// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	capabilities "github.com/smartcontractkit/chainlink-common/pkg/capabilities"

	mock "github.com/stretchr/testify/mock"
)

// Executable is an autogenerated mock type for the Executable type
type Executable struct {
	mock.Mock
}

type Executable_Expecter struct {
	mock *mock.Mock
}

func (_m *Executable) EXPECT() *Executable_Expecter {
	return &Executable_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, request
func (_m *Executable) Execute(ctx context.Context, request capabilities.CapabilityRequest) (capabilities.CapabilityResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 capabilities.CapabilityResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, capabilities.CapabilityRequest) (capabilities.CapabilityResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, capabilities.CapabilityRequest) capabilities.CapabilityResponse); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(capabilities.CapabilityResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, capabilities.CapabilityRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Executable_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type Executable_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
//   - request capabilities.CapabilityRequest
func (_e *Executable_Expecter) Execute(ctx interface{}, request interface{}) *Executable_Execute_Call {
	return &Executable_Execute_Call{Call: _e.mock.On("Execute", ctx, request)}
}

func (_c *Executable_Execute_Call) Run(run func(ctx context.Context, request capabilities.CapabilityRequest)) *Executable_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(capabilities.CapabilityRequest))
	})
	return _c
}

func (_c *Executable_Execute_Call) Return(_a0 capabilities.CapabilityResponse, _a1 error) *Executable_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Executable_Execute_Call) RunAndReturn(run func(context.Context, capabilities.CapabilityRequest) (capabilities.CapabilityResponse, error)) *Executable_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterToWorkflow provides a mock function with given fields: ctx, request
func (_m *Executable) RegisterToWorkflow(ctx context.Context, request capabilities.RegisterToWorkflowRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for RegisterToWorkflow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, capabilities.RegisterToWorkflowRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Executable_RegisterToWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterToWorkflow'
type Executable_RegisterToWorkflow_Call struct {
	*mock.Call
}

// RegisterToWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - request capabilities.RegisterToWorkflowRequest
func (_e *Executable_Expecter) RegisterToWorkflow(ctx interface{}, request interface{}) *Executable_RegisterToWorkflow_Call {
	return &Executable_RegisterToWorkflow_Call{Call: _e.mock.On("RegisterToWorkflow", ctx, request)}
}

func (_c *Executable_RegisterToWorkflow_Call) Run(run func(ctx context.Context, request capabilities.RegisterToWorkflowRequest)) *Executable_RegisterToWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(capabilities.RegisterToWorkflowRequest))
	})
	return _c
}

func (_c *Executable_RegisterToWorkflow_Call) Return(_a0 error) *Executable_RegisterToWorkflow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Executable_RegisterToWorkflow_Call) RunAndReturn(run func(context.Context, capabilities.RegisterToWorkflowRequest) error) *Executable_RegisterToWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// UnregisterFromWorkflow provides a mock function with given fields: ctx, request
func (_m *Executable) UnregisterFromWorkflow(ctx context.Context, request capabilities.UnregisterFromWorkflowRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UnregisterFromWorkflow")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, capabilities.UnregisterFromWorkflowRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Executable_UnregisterFromWorkflow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterFromWorkflow'
type Executable_UnregisterFromWorkflow_Call struct {
	*mock.Call
}

// UnregisterFromWorkflow is a helper method to define mock.On call
//   - ctx context.Context
//   - request capabilities.UnregisterFromWorkflowRequest
func (_e *Executable_Expecter) UnregisterFromWorkflow(ctx interface{}, request interface{}) *Executable_UnregisterFromWorkflow_Call {
	return &Executable_UnregisterFromWorkflow_Call{Call: _e.mock.On("UnregisterFromWorkflow", ctx, request)}
}

func (_c *Executable_UnregisterFromWorkflow_Call) Run(run func(ctx context.Context, request capabilities.UnregisterFromWorkflowRequest)) *Executable_UnregisterFromWorkflow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(capabilities.UnregisterFromWorkflowRequest))
	})
	return _c
}

func (_c *Executable_UnregisterFromWorkflow_Call) Return(_a0 error) *Executable_UnregisterFromWorkflow_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Executable_UnregisterFromWorkflow_Call) RunAndReturn(run func(context.Context, capabilities.UnregisterFromWorkflowRequest) error) *Executable_UnregisterFromWorkflow_Call {
	_c.Call.Return(run)
	return _c
}

// NewExecutable creates a new instance of Executable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutable(t interface {
	mock.TestingT
	Cleanup(func())
}) *Executable {
	mock := &Executable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
