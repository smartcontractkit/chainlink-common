// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: factories.proto

package ccippb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// NewExecutionFactoryRequest is a gRPC adapter to the factory configuration [https://github.com/smartcontractkit/ccip/core/services/ocr2/plugins/ccip/ccipexec/ExecutionPluginStaticConfig]
type NewExecutionFactoryRequest struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	SrcProviderServiceId uint32                 `protobuf:"varint,1,opt,name=src_provider_service_id,json=srcProviderServiceId,proto3" json:"src_provider_service_id,omitempty"`
	DstProviderServiceId uint32                 `protobuf:"varint,2,opt,name=dst_provider_service_id,json=dstProviderServiceId,proto3" json:"dst_provider_service_id,omitempty"`
	SrcChain             uint32                 `protobuf:"varint,3,opt,name=src_chain,json=srcChain,proto3" json:"src_chain,omitempty"`
	DstChain             uint32                 `protobuf:"varint,4,opt,name=dst_chain,json=dstChain,proto3" json:"dst_chain,omitempty"`
	SrcTokenAddress      string                 `protobuf:"bytes,5,opt,name=src_token_address,json=srcTokenAddress,proto3" json:"src_token_address,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NewExecutionFactoryRequest) Reset() {
	*x = NewExecutionFactoryRequest{}
	mi := &file_factories_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewExecutionFactoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewExecutionFactoryRequest) ProtoMessage() {}

func (x *NewExecutionFactoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_factories_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewExecutionFactoryRequest.ProtoReflect.Descriptor instead.
func (*NewExecutionFactoryRequest) Descriptor() ([]byte, []int) {
	return file_factories_proto_rawDescGZIP(), []int{0}
}

func (x *NewExecutionFactoryRequest) GetSrcProviderServiceId() uint32 {
	if x != nil {
		return x.SrcProviderServiceId
	}
	return 0
}

func (x *NewExecutionFactoryRequest) GetDstProviderServiceId() uint32 {
	if x != nil {
		return x.DstProviderServiceId
	}
	return 0
}

func (x *NewExecutionFactoryRequest) GetSrcChain() uint32 {
	if x != nil {
		return x.SrcChain
	}
	return 0
}

func (x *NewExecutionFactoryRequest) GetDstChain() uint32 {
	if x != nil {
		return x.DstChain
	}
	return 0
}

func (x *NewExecutionFactoryRequest) GetSrcTokenAddress() string {
	if x != nil {
		return x.SrcTokenAddress
	}
	return ""
}

// NewExecutionFactoryResponse is a contains the id of the created execution factory
type NewExecutionFactoryResponse struct {
	state                     protoimpl.MessageState `protogen:"open.v1"`
	ExecutionFactoryServiceId uint32                 `protobuf:"varint,1,opt,name=execution_factory_service_id,json=executionFactoryServiceId,proto3" json:"execution_factory_service_id,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *NewExecutionFactoryResponse) Reset() {
	*x = NewExecutionFactoryResponse{}
	mi := &file_factories_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewExecutionFactoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewExecutionFactoryResponse) ProtoMessage() {}

func (x *NewExecutionFactoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_factories_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewExecutionFactoryResponse.ProtoReflect.Descriptor instead.
func (*NewExecutionFactoryResponse) Descriptor() ([]byte, []int) {
	return file_factories_proto_rawDescGZIP(), []int{1}
}

func (x *NewExecutionFactoryResponse) GetExecutionFactoryServiceId() uint32 {
	if x != nil {
		return x.ExecutionFactoryServiceId
	}
	return 0
}

// NewCommitFactoryRequest is a gRPC adapter to the factory configuration [https://github.com/smartcontractkit/ccip/core/services/ocr2/plugins/ccip/ccipcommit/CommitPluginStaticConfig]
type NewCommitFactoryRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	ProviderServiceId uint32                 `protobuf:"varint,1,opt,name=provider_service_id,json=providerServiceId,proto3" json:"provider_service_id,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *NewCommitFactoryRequest) Reset() {
	*x = NewCommitFactoryRequest{}
	mi := &file_factories_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewCommitFactoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewCommitFactoryRequest) ProtoMessage() {}

func (x *NewCommitFactoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_factories_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewCommitFactoryRequest.ProtoReflect.Descriptor instead.
func (*NewCommitFactoryRequest) Descriptor() ([]byte, []int) {
	return file_factories_proto_rawDescGZIP(), []int{2}
}

func (x *NewCommitFactoryRequest) GetProviderServiceId() uint32 {
	if x != nil {
		return x.ProviderServiceId
	}
	return 0
}

// NewCommitFactoryResponse is a reference to the factory generator service. It is a gRPC proxy mechanism
// for the return value of [github.com/smartcontractkit/ccip/core/services/ocr2/plugins/ccip/ccipcommit.NewCommitReportingPluginFactory]
// because the underlying return value is an interface, which is modeled as a service in gRPC
type NewCommitFactoryResponse struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	CommitFactoryServiceId uint32                 `protobuf:"varint,1,opt,name=commit_factory_service_id,json=commitFactoryServiceId,proto3" json:"commit_factory_service_id,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *NewCommitFactoryResponse) Reset() {
	*x = NewCommitFactoryResponse{}
	mi := &file_factories_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewCommitFactoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewCommitFactoryResponse) ProtoMessage() {}

func (x *NewCommitFactoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_factories_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewCommitFactoryResponse.ProtoReflect.Descriptor instead.
func (*NewCommitFactoryResponse) Descriptor() ([]byte, []int) {
	return file_factories_proto_rawDescGZIP(), []int{3}
}

func (x *NewCommitFactoryResponse) GetCommitFactoryServiceId() uint32 {
	if x != nil {
		return x.CommitFactoryServiceId
	}
	return 0
}

// GetTransactionStatusRequest is a gRPC adapter for the input arguments of
// [github.com/smartcontractkit/chainlink-common/pkg/types/CCIPExecProvider.GetTransactionStatus]
type GetTransactionStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransactionId string                 `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTransactionStatusRequest) Reset() {
	*x = GetTransactionStatusRequest{}
	mi := &file_factories_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionStatusRequest) ProtoMessage() {}

func (x *GetTransactionStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_factories_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionStatusRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionStatusRequest) Descriptor() ([]byte, []int) {
	return file_factories_proto_rawDescGZIP(), []int{4}
}

func (x *GetTransactionStatusRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

// GetTransactionStatusResponse is a gRPC adapter for the output arguments of
// [github.com/smartcontractkit/chainlink-common/pkg/types/CCIPExecProvider.GetTransactionStatus]
type GetTransactionStatusResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TransactionStatus int32                  `protobuf:"varint,1,opt,name=transaction_status,json=transactionStatus,proto3" json:"transaction_status,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetTransactionStatusResponse) Reset() {
	*x = GetTransactionStatusResponse{}
	mi := &file_factories_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionStatusResponse) ProtoMessage() {}

func (x *GetTransactionStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_factories_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionStatusResponse.ProtoReflect.Descriptor instead.
func (*GetTransactionStatusResponse) Descriptor() ([]byte, []int) {
	return file_factories_proto_rawDescGZIP(), []int{5}
}

func (x *GetTransactionStatusResponse) GetTransactionStatus() int32 {
	if x != nil {
		return x.TransactionStatus
	}
	return 0
}

// NewCommitStoreReaderRequest is a gRPC adapter for the input arguments of
// [github.com/smartcontractkit/chainlink-common/pkg/types/CCIPExecProvider.NewCommitStoreReader]
type NewCommitStoreReaderRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewCommitStoreReaderRequest) Reset() {
	*x = NewCommitStoreReaderRequest{}
	mi := &file_factories_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewCommitStoreReaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewCommitStoreReaderRequest) ProtoMessage() {}

func (x *NewCommitStoreReaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_factories_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewCommitStoreReaderRequest.ProtoReflect.Descriptor instead.
func (*NewCommitStoreReaderRequest) Descriptor() ([]byte, []int) {
	return file_factories_proto_rawDescGZIP(), []int{6}
}

func (x *NewCommitStoreReaderRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// NewCommitStoreReaderResponse is a gRPC adapter for the output arguments of
// [github.com/smartcontractkit/chainlink-common/pkg/types/CCIPExecProvider.NewCommitStoreReader]
// It contains the id of the created commit store reader service that was created
type NewCommitStoreReaderResponse struct {
	state                      protoimpl.MessageState `protogen:"open.v1"`
	CommitStoreReaderServiceId int32                  `protobuf:"varint,1,opt,name=commit_store_reader_service_id,json=commitStoreReaderServiceId,proto3" json:"commit_store_reader_service_id,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *NewCommitStoreReaderResponse) Reset() {
	*x = NewCommitStoreReaderResponse{}
	mi := &file_factories_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewCommitStoreReaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewCommitStoreReaderResponse) ProtoMessage() {}

func (x *NewCommitStoreReaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_factories_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewCommitStoreReaderResponse.ProtoReflect.Descriptor instead.
func (*NewCommitStoreReaderResponse) Descriptor() ([]byte, []int) {
	return file_factories_proto_rawDescGZIP(), []int{7}
}

func (x *NewCommitStoreReaderResponse) GetCommitStoreReaderServiceId() int32 {
	if x != nil {
		return x.CommitStoreReaderServiceId
	}
	return 0
}

// NewOffRampReaderRequest is a gRPC adapter for the input arguments of
// [github.com/smartcontractkit/chainlink-common/pkg/types/CCIPExecProvider.NewOffRampReader]
type NewOffRampReaderRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewOffRampReaderRequest) Reset() {
	*x = NewOffRampReaderRequest{}
	mi := &file_factories_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewOffRampReaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewOffRampReaderRequest) ProtoMessage() {}

func (x *NewOffRampReaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_factories_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewOffRampReaderRequest.ProtoReflect.Descriptor instead.
func (*NewOffRampReaderRequest) Descriptor() ([]byte, []int) {
	return file_factories_proto_rawDescGZIP(), []int{8}
}

func (x *NewOffRampReaderRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// NewOffRampReaderResponse is a gRPC adapter for the output arguments of
// [github.com/smartcontractkit/chainlink-common/pkg/types/CCIPExecProvider.NewOffRampReader]
// It contains the id of the created offramp reader service that was created
type NewOffRampReaderResponse struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	OfframpReaderServiceId int32                  `protobuf:"varint,1,opt,name=offramp_reader_service_id,json=offrampReaderServiceId,proto3" json:"offramp_reader_service_id,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *NewOffRampReaderResponse) Reset() {
	*x = NewOffRampReaderResponse{}
	mi := &file_factories_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewOffRampReaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewOffRampReaderResponse) ProtoMessage() {}

func (x *NewOffRampReaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_factories_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewOffRampReaderResponse.ProtoReflect.Descriptor instead.
func (*NewOffRampReaderResponse) Descriptor() ([]byte, []int) {
	return file_factories_proto_rawDescGZIP(), []int{9}
}

func (x *NewOffRampReaderResponse) GetOfframpReaderServiceId() int32 {
	if x != nil {
		return x.OfframpReaderServiceId
	}
	return 0
}

// NewOnRampReaderRequest is a gRPC adapter for the input arguments of
// [github.com/smartcontractkit/chainlink-common/pkg/types/CCIPExecProvider.NewOnRampReader]
type NewOnRampReaderRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Address             string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	SourceChainSelector uint64                 `protobuf:"varint,2,opt,name=sourceChainSelector,proto3" json:"sourceChainSelector,omitempty"`
	DestChainSelector   uint64                 `protobuf:"varint,3,opt,name=destChainSelector,proto3" json:"destChainSelector,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *NewOnRampReaderRequest) Reset() {
	*x = NewOnRampReaderRequest{}
	mi := &file_factories_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewOnRampReaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewOnRampReaderRequest) ProtoMessage() {}

func (x *NewOnRampReaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_factories_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewOnRampReaderRequest.ProtoReflect.Descriptor instead.
func (*NewOnRampReaderRequest) Descriptor() ([]byte, []int) {
	return file_factories_proto_rawDescGZIP(), []int{10}
}

func (x *NewOnRampReaderRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *NewOnRampReaderRequest) GetSourceChainSelector() uint64 {
	if x != nil {
		return x.SourceChainSelector
	}
	return 0
}

func (x *NewOnRampReaderRequest) GetDestChainSelector() uint64 {
	if x != nil {
		return x.DestChainSelector
	}
	return 0
}

// NewOnRampReaderResponse is a gRPC wrapper for the return value of
// [github.com/smartcontractkit/chainlink-common/pkg/types/CCIPExecProvider.NewOnRampReader]
// It contains the id of the created onramp reader service that was created
type NewOnRampReaderResponse struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	OnrampReaderServiceId int32                  `protobuf:"varint,1,opt,name=onramp_reader_service_id,json=onrampReaderServiceId,proto3" json:"onramp_reader_service_id,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *NewOnRampReaderResponse) Reset() {
	*x = NewOnRampReaderResponse{}
	mi := &file_factories_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewOnRampReaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewOnRampReaderResponse) ProtoMessage() {}

func (x *NewOnRampReaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_factories_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewOnRampReaderResponse.ProtoReflect.Descriptor instead.
func (*NewOnRampReaderResponse) Descriptor() ([]byte, []int) {
	return file_factories_proto_rawDescGZIP(), []int{11}
}

func (x *NewOnRampReaderResponse) GetOnrampReaderServiceId() int32 {
	if x != nil {
		return x.OnrampReaderServiceId
	}
	return 0
}

// NewPriceGetterRequest is a gRPC adapter for the input arguments of
// [github.com/smartcontractkit/chainlink-common/pkg/types/CCIPCommitProvider.NewPriceGetter]
type NewPriceGetterRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewPriceGetterRequest) Reset() {
	*x = NewPriceGetterRequest{}
	mi := &file_factories_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewPriceGetterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewPriceGetterRequest) ProtoMessage() {}

func (x *NewPriceGetterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_factories_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewPriceGetterRequest.ProtoReflect.Descriptor instead.
func (*NewPriceGetterRequest) Descriptor() ([]byte, []int) {
	return file_factories_proto_rawDescGZIP(), []int{12}
}

func (x *NewPriceGetterRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// NewPriceGetterResponse is a gRPC adapter for the output arguments of
// [github.com/smartcontractkit/chainlink-common/pkg/types/CCIPCommitProvider.NewPriceGetter]
// It contains the id of the created price getter service that was created
type NewPriceGetterResponse struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	PriceGetterServiceId int32                  `protobuf:"varint,1,opt,name=price_getter_service_id,json=priceGetterServiceId,proto3" json:"price_getter_service_id,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *NewPriceGetterResponse) Reset() {
	*x = NewPriceGetterResponse{}
	mi := &file_factories_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewPriceGetterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewPriceGetterResponse) ProtoMessage() {}

func (x *NewPriceGetterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_factories_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewPriceGetterResponse.ProtoReflect.Descriptor instead.
func (*NewPriceGetterResponse) Descriptor() ([]byte, []int) {
	return file_factories_proto_rawDescGZIP(), []int{13}
}

func (x *NewPriceGetterResponse) GetPriceGetterServiceId() int32 {
	if x != nil {
		return x.PriceGetterServiceId
	}
	return 0
}

// NewPriceRegistryRequest is a gRPC adapter for the input arguments of
// [github.com/smartcontractkit/chainlink-common/pkg/types/CCIPExecProvider.NewPriceRegistryReader]
type NewPriceRegistryReaderRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewPriceRegistryReaderRequest) Reset() {
	*x = NewPriceRegistryReaderRequest{}
	mi := &file_factories_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewPriceRegistryReaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewPriceRegistryReaderRequest) ProtoMessage() {}

func (x *NewPriceRegistryReaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_factories_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewPriceRegistryReaderRequest.ProtoReflect.Descriptor instead.
func (*NewPriceRegistryReaderRequest) Descriptor() ([]byte, []int) {
	return file_factories_proto_rawDescGZIP(), []int{14}
}

func (x *NewPriceRegistryReaderRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// NewPriceRegistryReaderResponse is a gRPC adapter for the output arguments of
// [github.com/smartcontractkit/chainlink-common/pkg/types/CCIPExecProvider.NewPriceRegistryReader]
// It contains the id of the created price registry reader service that was created
type NewPriceRegistryReaderResponse struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	PriceRegistryReaderServiceId int32                  `protobuf:"varint,1,opt,name=price_registry_reader_service_id,json=priceRegistryReaderServiceId,proto3" json:"price_registry_reader_service_id,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *NewPriceRegistryReaderResponse) Reset() {
	*x = NewPriceRegistryReaderResponse{}
	mi := &file_factories_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewPriceRegistryReaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewPriceRegistryReaderResponse) ProtoMessage() {}

func (x *NewPriceRegistryReaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_factories_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewPriceRegistryReaderResponse.ProtoReflect.Descriptor instead.
func (*NewPriceRegistryReaderResponse) Descriptor() ([]byte, []int) {
	return file_factories_proto_rawDescGZIP(), []int{15}
}

func (x *NewPriceRegistryReaderResponse) GetPriceRegistryReaderServiceId() int32 {
	if x != nil {
		return x.PriceRegistryReaderServiceId
	}
	return 0
}

// NewTokenDataRequest is a gRPC adapter for the input arguments of
// [github.com/smartcontractkit/chainlink-common/pkg/types/CCIPExecProvider.NewTokenDataReader]
type NewTokenDataRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NewTokenDataRequest) Reset() {
	*x = NewTokenDataRequest{}
	mi := &file_factories_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewTokenDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTokenDataRequest) ProtoMessage() {}

func (x *NewTokenDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_factories_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTokenDataRequest.ProtoReflect.Descriptor instead.
func (*NewTokenDataRequest) Descriptor() ([]byte, []int) {
	return file_factories_proto_rawDescGZIP(), []int{16}
}

func (x *NewTokenDataRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// NewTokenDataResponse is a gRPC adapter for the output arguments of
// [github.com/smartcontractkit/chainlink-common/pkg/types/CCIPExecProvider.NewTokenDataReader]
// It contains the id of the created token data reader service that was created
type NewTokenDataResponse struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	TokenDataReaderServiceId int32                  `protobuf:"varint,1,opt,name=token_data_reader_service_id,json=tokenDataReaderServiceId,proto3" json:"token_data_reader_service_id,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *NewTokenDataResponse) Reset() {
	*x = NewTokenDataResponse{}
	mi := &file_factories_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewTokenDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTokenDataResponse) ProtoMessage() {}

func (x *NewTokenDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_factories_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTokenDataResponse.ProtoReflect.Descriptor instead.
func (*NewTokenDataResponse) Descriptor() ([]byte, []int) {
	return file_factories_proto_rawDescGZIP(), []int{17}
}

func (x *NewTokenDataResponse) GetTokenDataReaderServiceId() int32 {
	if x != nil {
		return x.TokenDataReaderServiceId
	}
	return 0
}

type NewTokenPoolBatchedReaderRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Address             string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	SourceChainSelector uint64                 `protobuf:"varint,2,opt,name=sourceChainSelector,proto3" json:"sourceChainSelector,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *NewTokenPoolBatchedReaderRequest) Reset() {
	*x = NewTokenPoolBatchedReaderRequest{}
	mi := &file_factories_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewTokenPoolBatchedReaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTokenPoolBatchedReaderRequest) ProtoMessage() {}

func (x *NewTokenPoolBatchedReaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_factories_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTokenPoolBatchedReaderRequest.ProtoReflect.Descriptor instead.
func (*NewTokenPoolBatchedReaderRequest) Descriptor() ([]byte, []int) {
	return file_factories_proto_rawDescGZIP(), []int{18}
}

func (x *NewTokenPoolBatchedReaderRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *NewTokenPoolBatchedReaderRequest) GetSourceChainSelector() uint64 {
	if x != nil {
		return x.SourceChainSelector
	}
	return 0
}

// NewTokenPoolBatchedReaderResponse is a gRPC adapter for the output arguments of
// [github.com/smartcontractkit/chainlink-common/pkg/types/CCIPExecProvider.NewTokenPoolBatchedReader]
// It contains the id of the created token pool batched reader service that was created
type NewTokenPoolBatchedReaderResponse struct {
	state                           protoimpl.MessageState `protogen:"open.v1"`
	TokenPoolBatchedReaderServiceId int32                  `protobuf:"varint,1,opt,name=token_pool_batched_reader_service_id,json=tokenPoolBatchedReaderServiceId,proto3" json:"token_pool_batched_reader_service_id,omitempty"`
	unknownFields                   protoimpl.UnknownFields
	sizeCache                       protoimpl.SizeCache
}

func (x *NewTokenPoolBatchedReaderResponse) Reset() {
	*x = NewTokenPoolBatchedReaderResponse{}
	mi := &file_factories_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewTokenPoolBatchedReaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTokenPoolBatchedReaderResponse) ProtoMessage() {}

func (x *NewTokenPoolBatchedReaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_factories_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTokenPoolBatchedReaderResponse.ProtoReflect.Descriptor instead.
func (*NewTokenPoolBatchedReaderResponse) Descriptor() ([]byte, []int) {
	return file_factories_proto_rawDescGZIP(), []int{19}
}

func (x *NewTokenPoolBatchedReaderResponse) GetTokenPoolBatchedReaderServiceId() int32 {
	if x != nil {
		return x.TokenPoolBatchedReaderServiceId
	}
	return 0
}

// SourceNativeTokenResponse is a gRPC adapter for the input arguments of
// [github.com/smartcontractkit/chainlink-common/pkg/types/CCIPCommitProvider.SourceNativeToken]
type SourceNativeTokenRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	SourceRouterAddress string                 `protobuf:"bytes,1,opt,name=source_router_address,json=sourceRouterAddress,proto3" json:"source_router_address,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *SourceNativeTokenRequest) Reset() {
	*x = SourceNativeTokenRequest{}
	mi := &file_factories_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceNativeTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceNativeTokenRequest) ProtoMessage() {}

func (x *SourceNativeTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_factories_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceNativeTokenRequest.ProtoReflect.Descriptor instead.
func (*SourceNativeTokenRequest) Descriptor() ([]byte, []int) {
	return file_factories_proto_rawDescGZIP(), []int{20}
}

func (x *SourceNativeTokenRequest) GetSourceRouterAddress() string {
	if x != nil {
		return x.SourceRouterAddress
	}
	return ""
}

// SourceNativeTokenResponse is a gRPC adapter for the output arguments of
// [github.com/smartcontractkit/chainlink-common/pkg/types/CCIPExecProvider.SourceNativeToken]
type SourceNativeTokenResponse struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	NativeTokenAddress string                 `protobuf:"bytes,1,opt,name=native_token_address,json=nativeTokenAddress,proto3" json:"native_token_address,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *SourceNativeTokenResponse) Reset() {
	*x = SourceNativeTokenResponse{}
	mi := &file_factories_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceNativeTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceNativeTokenResponse) ProtoMessage() {}

func (x *SourceNativeTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_factories_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceNativeTokenResponse.ProtoReflect.Descriptor instead.
func (*SourceNativeTokenResponse) Descriptor() ([]byte, []int) {
	return file_factories_proto_rawDescGZIP(), []int{21}
}

func (x *SourceNativeTokenResponse) GetNativeTokenAddress() string {
	if x != nil {
		return x.NativeTokenAddress
	}
	return ""
}

// NewOffRampReadersRequest is a gRPC adapter for the input arguments of
// [github.com/smartcontractkit/chainlink-common/pkg/types/CCIPCommitProvider.NewOffRampReaders]
type NewOffRampReadersRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	DestRouterAddress string                 `protobuf:"bytes,1,opt,name=dest_router_address,json=destRouterAddress,proto3" json:"dest_router_address,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *NewOffRampReadersRequest) Reset() {
	*x = NewOffRampReadersRequest{}
	mi := &file_factories_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewOffRampReadersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewOffRampReadersRequest) ProtoMessage() {}

func (x *NewOffRampReadersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_factories_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewOffRampReadersRequest.ProtoReflect.Descriptor instead.
func (*NewOffRampReadersRequest) Descriptor() ([]byte, []int) {
	return file_factories_proto_rawDescGZIP(), []int{22}
}

func (x *NewOffRampReadersRequest) GetDestRouterAddress() string {
	if x != nil {
		return x.DestRouterAddress
	}
	return ""
}

// NewOffRampReadersRequest is a gRPC adapter for the output arguments of
// [github.com/smartcontractkit/chainlink-common/pkg/types/CCIPCommitProvider.NewOffRampReaders]
type NewOffRampReadersResponse struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	OfframpReadersServiceIds []int32                `protobuf:"varint,1,rep,packed,name=offramp_readers_service_ids,json=offrampReadersServiceIds,proto3" json:"offramp_readers_service_ids,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *NewOffRampReadersResponse) Reset() {
	*x = NewOffRampReadersResponse{}
	mi := &file_factories_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewOffRampReadersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewOffRampReadersResponse) ProtoMessage() {}

func (x *NewOffRampReadersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_factories_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewOffRampReadersResponse.ProtoReflect.Descriptor instead.
func (*NewOffRampReadersResponse) Descriptor() ([]byte, []int) {
	return file_factories_proto_rawDescGZIP(), []int{23}
}

func (x *NewOffRampReadersResponse) GetOfframpReadersServiceIds() []int32 {
	if x != nil {
		return x.OfframpReadersServiceIds
	}
	return nil
}

var File_factories_proto protoreflect.FileDescriptor

var file_factories_proto_rawDesc = string([]byte{
	0x0a, 0x0f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x15, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x01, 0x0a, 0x1a, 0x4e, 0x65, 0x77, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x17, 0x73, 0x72, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x73, 0x72, 0x63, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x64,
	0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x64, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x72, 0x63, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x64, 0x73, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x11,
	0x73, 0x72, 0x63, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x72, 0x63, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x5e, 0x0a, 0x1b, 0x4e, 0x65, 0x77, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x17, 0x4e, 0x65, 0x77, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x18, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x39, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x1b, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x22, 0x4d, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2d, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x37, 0x0a, 0x1b, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x62, 0x0a, 0x1c, 0x4e, 0x65, 0x77, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x17,
	0x4e, 0x65, 0x77, 0x4f, 0x66, 0x66, 0x52, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x55, 0x0a, 0x18, 0x4e, 0x65, 0x77, 0x4f, 0x66, 0x66, 0x52, 0x61, 0x6d, 0x70, 0x52,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a,
	0x19, 0x6f, 0x66, 0x66, 0x72, 0x61, 0x6d, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x16, 0x6f, 0x66, 0x66, 0x72, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x16, 0x4e, 0x65, 0x77,
	0x4f, 0x6e, 0x52, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x30, 0x0a,
	0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x2c, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x64, 0x65, 0x73, 0x74,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0x52, 0x0a,
	0x17, 0x4e, 0x65, 0x77, 0x4f, 0x6e, 0x52, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x6f, 0x6e, 0x72, 0x61,
	0x6d, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x6f, 0x6e, 0x72, 0x61,
	0x6d, 0x70, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x22, 0x31, 0x0a, 0x15, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x4f, 0x0a, 0x16, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35,
	0x0a, 0x17, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x65, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x14, 0x70, 0x72, 0x69, 0x63, 0x65, 0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x39, 0x0a, 0x1d, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x68, 0x0a, 0x1e, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x46, 0x0a, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1c, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x13, 0x4e, 0x65,
	0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x56, 0x0a, 0x14, 0x4e,
	0x65, 0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x1c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x20, 0x4e, 0x65, 0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x22, 0x72, 0x0a, 0x21, 0x4e, 0x65, 0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x24, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x72,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x6f, 0x6f,
	0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x18, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x4d, 0x0a, 0x19, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x12, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x4a, 0x0a, 0x18, 0x4e, 0x65, 0x77, 0x4f, 0x66, 0x66,
	0x52, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x64, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x5a, 0x0a, 0x19, 0x4e, 0x65, 0x77, 0x4f, 0x66, 0x66, 0x52, 0x61, 0x6d, 0x70,
	0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3d, 0x0a, 0x1b, 0x6f, 0x66, 0x66, 0x72, 0x61, 0x6d, 0x70, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x18, 0x6f, 0x66, 0x66, 0x72, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73, 0x32, 0x99,
	0x01, 0x0a, 0x19, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x7c, 0x0a, 0x13,
	0x4e, 0x65, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x31, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x4e,
	0x65, 0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xcf, 0x08, 0x0a, 0x17, 0x45,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x32, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x81, 0x01, 0x0a, 0x14, 0x4e,
	0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x32, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e,
	0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75,
	0x0a, 0x10, 0x4e, 0x65, 0x77, 0x4f, 0x66, 0x66, 0x52, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x2e, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x4f, 0x66,
	0x66, 0x52, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x4f, 0x66,
	0x66, 0x52, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x4f, 0x6e, 0x52, 0x61,
	0x6d, 0x70, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2d, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70,
	0x2e, 0x4e, 0x65, 0x77, 0x4f, 0x6e, 0x52, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e,
	0x4e, 0x65, 0x77, 0x4f, 0x6e, 0x52, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x16, 0x4e, 0x65,
	0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x4e, 0x65, 0x77,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x6c, 0x6f, 0x6f,
	0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63,
	0x69, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x2e, 0x6c, 0x6f, 0x6f, 0x70,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69,
	0x70, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x4e, 0x65,
	0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x19, 0x4e, 0x65, 0x77, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x37, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x52, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6c, 0x6f,
	0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63,
	0x63, 0x69, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x50, 0x6f, 0x6f, 0x6c,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x11, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2f, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e,
	0x63, 0x63, 0x69, 0x70, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62,
	0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x39, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0x8d, 0x01, 0x0a,
	0x16, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x73, 0x0a, 0x10, 0x4e, 0x65, 0x77, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2e, 0x2e, 0x6c, 0x6f,
	0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63,
	0x63, 0x69, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x6c, 0x6f,
	0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63,
	0x63, 0x69, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x9f, 0x06, 0x0a,
	0x14, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x14, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x32,
	0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70,
	0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x33, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x10, 0x4e, 0x65, 0x77,
	0x4f, 0x66, 0x66, 0x52, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x2e, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62,
	0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x4f, 0x66, 0x66, 0x52, 0x61, 0x6d, 0x70,
	0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62,
	0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x4f, 0x66, 0x66, 0x52, 0x61, 0x6d, 0x70,
	0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x72, 0x0a, 0x0f, 0x4e, 0x65, 0x77, 0x4f, 0x6e, 0x52, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x2d, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x4f,
	0x6e, 0x52, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x4f, 0x6e,
	0x52, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x47, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2d,
	0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70,
	0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x47,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x87, 0x01, 0x0a, 0x16, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x34, 0x2e, 0x6c, 0x6f, 0x6f,
	0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63,
	0x69, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x35, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x52, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x78, 0x0a, 0x11, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2f,
	0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70,
	0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x30, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42, 0x4f,
	0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6b, 0x69, 0x74, 0x2f, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x6c, 0x6f, 0x6f, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x70, 0x62, 0x2f, 0x63, 0x63, 0x69, 0x70, 0x3b, 0x63, 0x63, 0x69, 0x70, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_factories_proto_rawDescOnce sync.Once
	file_factories_proto_rawDescData []byte
)

func file_factories_proto_rawDescGZIP() []byte {
	file_factories_proto_rawDescOnce.Do(func() {
		file_factories_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_factories_proto_rawDesc), len(file_factories_proto_rawDesc)))
	})
	return file_factories_proto_rawDescData
}

var file_factories_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_factories_proto_goTypes = []any{
	(*NewExecutionFactoryRequest)(nil),        // 0: loop.internal.pb.ccip.NewExecutionFactoryRequest
	(*NewExecutionFactoryResponse)(nil),       // 1: loop.internal.pb.ccip.NewExecutionFactoryResponse
	(*NewCommitFactoryRequest)(nil),           // 2: loop.internal.pb.ccip.NewCommitFactoryRequest
	(*NewCommitFactoryResponse)(nil),          // 3: loop.internal.pb.ccip.NewCommitFactoryResponse
	(*GetTransactionStatusRequest)(nil),       // 4: loop.internal.pb.ccip.GetTransactionStatusRequest
	(*GetTransactionStatusResponse)(nil),      // 5: loop.internal.pb.ccip.GetTransactionStatusResponse
	(*NewCommitStoreReaderRequest)(nil),       // 6: loop.internal.pb.ccip.NewCommitStoreReaderRequest
	(*NewCommitStoreReaderResponse)(nil),      // 7: loop.internal.pb.ccip.NewCommitStoreReaderResponse
	(*NewOffRampReaderRequest)(nil),           // 8: loop.internal.pb.ccip.NewOffRampReaderRequest
	(*NewOffRampReaderResponse)(nil),          // 9: loop.internal.pb.ccip.NewOffRampReaderResponse
	(*NewOnRampReaderRequest)(nil),            // 10: loop.internal.pb.ccip.NewOnRampReaderRequest
	(*NewOnRampReaderResponse)(nil),           // 11: loop.internal.pb.ccip.NewOnRampReaderResponse
	(*NewPriceGetterRequest)(nil),             // 12: loop.internal.pb.ccip.NewPriceGetterRequest
	(*NewPriceGetterResponse)(nil),            // 13: loop.internal.pb.ccip.NewPriceGetterResponse
	(*NewPriceRegistryReaderRequest)(nil),     // 14: loop.internal.pb.ccip.NewPriceRegistryReaderRequest
	(*NewPriceRegistryReaderResponse)(nil),    // 15: loop.internal.pb.ccip.NewPriceRegistryReaderResponse
	(*NewTokenDataRequest)(nil),               // 16: loop.internal.pb.ccip.NewTokenDataRequest
	(*NewTokenDataResponse)(nil),              // 17: loop.internal.pb.ccip.NewTokenDataResponse
	(*NewTokenPoolBatchedReaderRequest)(nil),  // 18: loop.internal.pb.ccip.NewTokenPoolBatchedReaderRequest
	(*NewTokenPoolBatchedReaderResponse)(nil), // 19: loop.internal.pb.ccip.NewTokenPoolBatchedReaderResponse
	(*SourceNativeTokenRequest)(nil),          // 20: loop.internal.pb.ccip.SourceNativeTokenRequest
	(*SourceNativeTokenResponse)(nil),         // 21: loop.internal.pb.ccip.SourceNativeTokenResponse
	(*NewOffRampReadersRequest)(nil),          // 22: loop.internal.pb.ccip.NewOffRampReadersRequest
	(*NewOffRampReadersResponse)(nil),         // 23: loop.internal.pb.ccip.NewOffRampReadersResponse
	(*emptypb.Empty)(nil),                     // 24: google.protobuf.Empty
}
var file_factories_proto_depIdxs = []int32{
	0,  // 0: loop.internal.pb.ccip.ExecutionFactoryGenerator.NewExecutionFactory:input_type -> loop.internal.pb.ccip.NewExecutionFactoryRequest
	4,  // 1: loop.internal.pb.ccip.ExecutionCustomHandlers.GetTransactionStatus:input_type -> loop.internal.pb.ccip.GetTransactionStatusRequest
	6,  // 2: loop.internal.pb.ccip.ExecutionCustomHandlers.NewCommitStoreReader:input_type -> loop.internal.pb.ccip.NewCommitStoreReaderRequest
	8,  // 3: loop.internal.pb.ccip.ExecutionCustomHandlers.NewOffRampReader:input_type -> loop.internal.pb.ccip.NewOffRampReaderRequest
	10, // 4: loop.internal.pb.ccip.ExecutionCustomHandlers.NewOnRampReader:input_type -> loop.internal.pb.ccip.NewOnRampReaderRequest
	14, // 5: loop.internal.pb.ccip.ExecutionCustomHandlers.NewPriceRegistryReader:input_type -> loop.internal.pb.ccip.NewPriceRegistryReaderRequest
	16, // 6: loop.internal.pb.ccip.ExecutionCustomHandlers.NewTokenDataReader:input_type -> loop.internal.pb.ccip.NewTokenDataRequest
	18, // 7: loop.internal.pb.ccip.ExecutionCustomHandlers.NewTokenPoolBatchedReader:input_type -> loop.internal.pb.ccip.NewTokenPoolBatchedReaderRequest
	20, // 8: loop.internal.pb.ccip.ExecutionCustomHandlers.SourceNativeToken:input_type -> loop.internal.pb.ccip.SourceNativeTokenRequest
	24, // 9: loop.internal.pb.ccip.ExecutionCustomHandlers.Close:input_type -> google.protobuf.Empty
	2,  // 10: loop.internal.pb.ccip.CommitFactoryGenerator.NewCommitFactory:input_type -> loop.internal.pb.ccip.NewCommitFactoryRequest
	6,  // 11: loop.internal.pb.ccip.CommitCustomHandlers.NewCommitStoreReader:input_type -> loop.internal.pb.ccip.NewCommitStoreReaderRequest
	8,  // 12: loop.internal.pb.ccip.CommitCustomHandlers.NewOffRampReader:input_type -> loop.internal.pb.ccip.NewOffRampReaderRequest
	10, // 13: loop.internal.pb.ccip.CommitCustomHandlers.NewOnRampReader:input_type -> loop.internal.pb.ccip.NewOnRampReaderRequest
	24, // 14: loop.internal.pb.ccip.CommitCustomHandlers.NewPriceGetter:input_type -> google.protobuf.Empty
	14, // 15: loop.internal.pb.ccip.CommitCustomHandlers.NewPriceRegistryReader:input_type -> loop.internal.pb.ccip.NewPriceRegistryReaderRequest
	20, // 16: loop.internal.pb.ccip.CommitCustomHandlers.SourceNativeToken:input_type -> loop.internal.pb.ccip.SourceNativeTokenRequest
	24, // 17: loop.internal.pb.ccip.CommitCustomHandlers.Close:input_type -> google.protobuf.Empty
	1,  // 18: loop.internal.pb.ccip.ExecutionFactoryGenerator.NewExecutionFactory:output_type -> loop.internal.pb.ccip.NewExecutionFactoryResponse
	5,  // 19: loop.internal.pb.ccip.ExecutionCustomHandlers.GetTransactionStatus:output_type -> loop.internal.pb.ccip.GetTransactionStatusResponse
	7,  // 20: loop.internal.pb.ccip.ExecutionCustomHandlers.NewCommitStoreReader:output_type -> loop.internal.pb.ccip.NewCommitStoreReaderResponse
	9,  // 21: loop.internal.pb.ccip.ExecutionCustomHandlers.NewOffRampReader:output_type -> loop.internal.pb.ccip.NewOffRampReaderResponse
	11, // 22: loop.internal.pb.ccip.ExecutionCustomHandlers.NewOnRampReader:output_type -> loop.internal.pb.ccip.NewOnRampReaderResponse
	15, // 23: loop.internal.pb.ccip.ExecutionCustomHandlers.NewPriceRegistryReader:output_type -> loop.internal.pb.ccip.NewPriceRegistryReaderResponse
	17, // 24: loop.internal.pb.ccip.ExecutionCustomHandlers.NewTokenDataReader:output_type -> loop.internal.pb.ccip.NewTokenDataResponse
	19, // 25: loop.internal.pb.ccip.ExecutionCustomHandlers.NewTokenPoolBatchedReader:output_type -> loop.internal.pb.ccip.NewTokenPoolBatchedReaderResponse
	21, // 26: loop.internal.pb.ccip.ExecutionCustomHandlers.SourceNativeToken:output_type -> loop.internal.pb.ccip.SourceNativeTokenResponse
	24, // 27: loop.internal.pb.ccip.ExecutionCustomHandlers.Close:output_type -> google.protobuf.Empty
	3,  // 28: loop.internal.pb.ccip.CommitFactoryGenerator.NewCommitFactory:output_type -> loop.internal.pb.ccip.NewCommitFactoryResponse
	7,  // 29: loop.internal.pb.ccip.CommitCustomHandlers.NewCommitStoreReader:output_type -> loop.internal.pb.ccip.NewCommitStoreReaderResponse
	9,  // 30: loop.internal.pb.ccip.CommitCustomHandlers.NewOffRampReader:output_type -> loop.internal.pb.ccip.NewOffRampReaderResponse
	11, // 31: loop.internal.pb.ccip.CommitCustomHandlers.NewOnRampReader:output_type -> loop.internal.pb.ccip.NewOnRampReaderResponse
	13, // 32: loop.internal.pb.ccip.CommitCustomHandlers.NewPriceGetter:output_type -> loop.internal.pb.ccip.NewPriceGetterResponse
	15, // 33: loop.internal.pb.ccip.CommitCustomHandlers.NewPriceRegistryReader:output_type -> loop.internal.pb.ccip.NewPriceRegistryReaderResponse
	21, // 34: loop.internal.pb.ccip.CommitCustomHandlers.SourceNativeToken:output_type -> loop.internal.pb.ccip.SourceNativeTokenResponse
	24, // 35: loop.internal.pb.ccip.CommitCustomHandlers.Close:output_type -> google.protobuf.Empty
	18, // [18:36] is the sub-list for method output_type
	0,  // [0:18] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_factories_proto_init() }
func file_factories_proto_init() {
	if File_factories_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_factories_proto_rawDesc), len(file_factories_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_factories_proto_goTypes,
		DependencyIndexes: file_factories_proto_depIdxs,
		MessageInfos:      file_factories_proto_msgTypes,
	}.Build()
	File_factories_proto = out.File
	file_factories_proto_goTypes = nil
	file_factories_proto_depIdxs = nil
}
