// Code generated by github.com/smartcontractkit/chainlink-common/pkg/capabilities/v2/protoc, DO NOT EDIT.

package consensus

import (
	"errors"

	"google.golang.org/protobuf/types/known/anypb"

	"github.com/smartcontractkit/chainlink-common/pkg/values/pb"
	"github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk/v2"
	pb1 "github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk/v2/pb"
	sdkpb "github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk/v2/pb"
)

type Consensus struct {
	// TODO: https://smartcontract-it.atlassian.net/browse/CAPPL-799 allow defaults for capabilities
}

func (c *Consensus) Simple(runtime sdk.DonRuntime, input *pb1.SimpleConsensusInputs) sdk.Promise[*pb.Value] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*pb.Value](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      "consensus@1.0.0",
		Payload: wrapped,
		Method:  "Simple",
	}), func(i *sdkpb.CapabilityResponse) (*pb.Value, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &pb.Value{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}
