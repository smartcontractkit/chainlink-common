package nodeauth

import (
	"context"
	"crypto/ed25519"
	"encoding/hex"
	"fmt"
	"log/slog"
	"time"

	"github.com/go-playground/validator/v10"
	"github.com/golang-jwt/jwt/v5"

	"github.com/smartcontractkit/chainlink-common/pkg/nodeauth/utils"
)

// NodeJWTValidator is designed to be used by the server-side service to validate the JWT token generated by the Node.
//  1. Standard JWT Validation: validate the JWT claims and signature against the node's public key.
//  2. Node Specific Validation: validate the node validity against the topologyProvider cache/on-chain.
type NodeJWTValidator struct {
	nodeTopologyProvider NodeTopologyProvider // Node topology source of truth to validate node validity.
	parser               *jwt.Parser          // JWT parser to parse the JWT token.
	validator            *validator.Validate  // golang validator to ensure struc typing
	logger               *slog.Logger
}

func NewNodeJWTValidator(nodeTopologyProvider NodeTopologyProvider, logger *slog.Logger) *NodeJWTValidator {

	return &NodeJWTValidator{
		nodeTopologyProvider: nodeTopologyProvider,
		parser:               jwt.NewParser(),
		validator:            validator.New(),
		logger:               logger,
	}
}

// 1. Standard JWT Validation: validate the JWT claims and signature against the node's public key.
// 2. Node Specific Validation: validate the node validity against the topologyProvider cache/on-chain.
func (v *NodeJWTValidator) ValidateJWT(ctx context.Context, tokenString string, originalRequest any) (bool, error) {
	// Parse JWT claims
	claims, err := v.parseJWTClaims(tokenString)
	if err != nil {
		return false, fmt.Errorf("failed to parse and validate JWT claims: %w", err)
	}

	// Extract public key from JWT claim
	publicKey, err := v.decodePublicKey(claims.PublicKey)
	if err != nil {
		return false, fmt.Errorf("invalid public key format: %w", err)
	}

	// Verify JWT signature aginst the public key
	if err := v.verifyJWTSignature(tokenString, publicKey); err != nil {
		return false, fmt.Errorf("JWT signature verification failed: %w", err)
	}

	// Verify request digest integrity
	if err := v.verifyRequestDigest(claims, originalRequest); err != nil {
		return false, fmt.Errorf("request integrity check failed: %w", err)
	}

	// Verify JWT claims' standard fields
	if err := v.verifyStandardClaims(claims); err != nil {
		return false, fmt.Errorf("JWT claims validation failed: %w", err)
	}

	// Node Specific Validation: Validate node against topology provider
	isValid, err := v.nodeTopologyProvider.IsNodeAuthorized(ctx, claims.P2PId, publicKey)
	if err != nil {
		v.logger.Error("Node validation failed",
			"p2pId", claims.P2PId,
			"error", err,
		)
		return false, fmt.Errorf("node validation failed: %w", err)
	}

	if !isValid {
		v.logger.Warn("Unauthorized node attempted access",
			"p2pId", claims.P2PId,
		)
		return false, fmt.Errorf("unauthorized node: %s", claims.P2PId)
	}

	v.logger.Debug("JWT validation successful",
		"p2pId", claims.P2PId,
		"environment", claims.Environment,
	)

	return true, nil
}

// parseJWTClaims extracts JWT claims from the token string.
func (v *NodeJWTValidator) parseJWTClaims(tokenString string) (*NodeJWTClaims, error) {
	token, _, err := v.parser.ParseUnverified(tokenString, &NodeJWTClaims{})
	if err != nil {
		return nil, fmt.Errorf("invalid JWT format: %w", err)
	}

	claims, ok := token.Claims.(*NodeJWTClaims)
	if !ok {
		return nil, fmt.Errorf("invalid claims type")
	}
	return claims, nil
}

// decodePublicKey converts hex-encoded public key in the JWT claim to [32]byte array
func (v *NodeJWTValidator) decodePublicKey(publicKeyHex string) ([32]byte, error) {
	publicKeyBytes, err := hex.DecodeString(publicKeyHex)
	if err != nil {
		return [32]byte{}, fmt.Errorf("invalid hex encoding: %w", err)
	}

	var publicKey [32]byte
	copy(publicKey[:], publicKeyBytes)
	return publicKey, nil
}

// verifyJWTSignature prove the JWT signature is signed by the node's private key.
// DEV NOTE: The designed JWT method is asymmetric Ed25519, @nodeauth/node_jwt_signer.go.
func (v *NodeJWTValidator) verifyJWTSignature(tokenString string, publicKey [32]byte) error {

	token, err := v.parser.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {
		// Ensure the signing method is Ed25519
		if _, ok := token.Method.(*jwt.SigningMethodEd25519); !ok {
			return nil, fmt.Errorf("unexpected signing method: %v", token.Header["alg"])
		}

		// DEV NOTE: Internally, the JWT parser's callback use the returned value here to verify the signature.
		return ed25519.PublicKey(publicKey[:]), nil
	})

	if err != nil {
		return fmt.Errorf("signature verification failed: %w", err)
	}

	if !token.Valid {
		return fmt.Errorf("token is invalid after signature verification")
	}

	return nil
}

// verifyRequestDigest ensures the request hasn't been tampered with by verifying the digest in the JWT claim.
func (v *NodeJWTValidator) verifyRequestDigest(claims *NodeJWTClaims, originalRequest any) error {
	// Calculate expected digest using the same method as the client
	expectedDigest := utils.CalculateRequestDigest(originalRequest)

	if claims.Digest != expectedDigest {
		return fmt.Errorf("digest mismatch: got %s, want %s", claims.Digest, expectedDigest)
	}

	return nil
}

// verifyStandardClaims validates standard JWT fields.
// DEV NOTE: This does not perform signature (public vs private key) verification.
func (v *NodeJWTValidator) verifyStandardClaims(claims *NodeJWTClaims) error {
	now := time.Now()

	// Check basic type-safety of struct fields
	if err := v.validator.Struct(claims); err != nil {
		return fmt.Errorf("claims validation failed: %w", err)
	}

	// Check expiration
	if claims.ExpiresAt != nil && claims.ExpiresAt.Before(now) {
		return fmt.Errorf("token expired at %v", claims.ExpiresAt.Time)
	}

	// Check not before (if set)
	if claims.NotBefore != nil && claims.NotBefore.After(now) {
		return fmt.Errorf("token not valid until %v", claims.NotBefore.Time)
	}

	// Check issued at
	if claims.IssuedAt != nil && claims.IssuedAt.After(now.Add(workflowJWTExpiration)) {
		return fmt.Errorf("token issued too far in future: %v", claims.IssuedAt.Time)
	}

	// TODO: Verify issuer once we align on the value provided on the client side
	// TODO: Verify subject once we align on the value provided on the client side

	return nil
}
