// Code generated by github.com/smartcontractkit/chainlink-common/pkg/capabilities/cli, DO NOT EDIT.

package anymapaction

import (
    "github.com/smartcontractkit/chainlink-common/pkg/capabilities"
    "github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk"
)

type map[string]interface{} map[string]interface{} 
func (cfg map[string]interface{}) New(w *sdk.WorkflowSpecFactory,ref string, input MapActionInput)MapActionOutputsCap {
    
    def := sdk.StepDefinition{
       ID: "anymapaction@1.0.0",Ref: ref,
       Inputs: input.ToSteps(),
       Config: map[string]any{
       },
       CapabilityType: capabilities.CapabilityTypeAction,
   }


    step := sdk.Step[MapActionOutputs]{Definition: def}
    raw :=  step.AddTo(w)
    return MapActionOutputsWrapper(raw)
}



// MapActionOutputsWrapper allows access to field from an sdk.CapDefinition[MapActionOutputs]
func MapActionOutputsWrapper(raw sdk.CapDefinition[MapActionOutputs]) MapActionOutputsCap {
    wrapped, ok := raw.(MapActionOutputsCap)
    if ok {
        return wrapped
    }
    return &mapActionOutputsCap{CapDefinition: raw}
}
type MapActionOutputsCap interface {
    sdk.CapDefinition[MapActionOutputs]
    Payload() sdk.CapDefinition[map[string]interface{}]
    private()
}

type mapActionOutputsCap struct {
    sdk.CapDefinition[MapActionOutputs]
}

func (*mapActionOutputsCap) private() {}
func (c *mapActionOutputsCap) Payload() sdk.CapDefinition[map[string]interface{}] {
    return sdk.AccessField[MapActionOutputs, map[string]interface{}](c.CapDefinition, "payload")
}

func ConstantMapActionOutputs(value MapActionOutputs) MapActionOutputsCap {
    return &mapActionOutputsCap{CapDefinition: sdk.ConstantDefinition(value)}
}

func NewMapActionOutputsFromFields(
                                                                        payload sdk.CapDefinition[map[string]interface{}],) MapActionOutputsCap {
    return &simpleMapActionOutputs{
        CapDefinition: sdk.ComponentCapDefinition[MapActionOutputs]{
        "payload": payload.Ref(),
        },
        payload: payload,
    }
}

type simpleMapActionOutputs struct {
    sdk.CapDefinition[MapActionOutputs]
    payload sdk.CapDefinition[map[string]interface{}]
}
func (c *simpleMapActionOutputs) Payload() sdk.CapDefinition[map[string]interface{}] {
    return c.payload
}

func (c *simpleMapActionOutputs) private() {}


type MapActionInput struct {
    Payload sdk.CapDefinition[map[string]interface{}]
}

func (input MapActionInput) ToSteps() sdk.StepInputs {
    return sdk.StepInputs{
       Mapping: map[string]any{
        "payload": input.Payload.Ref(),
       },
   }
}