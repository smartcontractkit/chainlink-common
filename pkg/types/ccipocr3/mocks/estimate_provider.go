// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	ccipocr3 "github.com/smartcontractkit/chainlink-common/pkg/types/ccipocr3"
	mock "github.com/stretchr/testify/mock"
)

// EstimateProvider is an autogenerated mock type for the EstimateProvider type
type EstimateProvider struct {
	mock.Mock
}

type EstimateProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *EstimateProvider) EXPECT() *EstimateProvider_Expecter {
	return &EstimateProvider_Expecter{mock: &_m.Mock}
}

// CalculateMerkleTreeGas provides a mock function with given fields: numRequests
func (_m *EstimateProvider) CalculateMerkleTreeGas(numRequests int) uint64 {
	ret := _m.Called(numRequests)

	if len(ret) == 0 {
		panic("no return value specified for CalculateMerkleTreeGas")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func(int) uint64); ok {
		r0 = rf(numRequests)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// EstimateProvider_CalculateMerkleTreeGas_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalculateMerkleTreeGas'
type EstimateProvider_CalculateMerkleTreeGas_Call struct {
	*mock.Call
}

// CalculateMerkleTreeGas is a helper method to define mock.On call
//   - numRequests int
func (_e *EstimateProvider_Expecter) CalculateMerkleTreeGas(numRequests interface{}) *EstimateProvider_CalculateMerkleTreeGas_Call {
	return &EstimateProvider_CalculateMerkleTreeGas_Call{Call: _e.mock.On("CalculateMerkleTreeGas", numRequests)}
}

func (_c *EstimateProvider_CalculateMerkleTreeGas_Call) Run(run func(numRequests int)) *EstimateProvider_CalculateMerkleTreeGas_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *EstimateProvider_CalculateMerkleTreeGas_Call) Return(_a0 uint64) *EstimateProvider_CalculateMerkleTreeGas_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EstimateProvider_CalculateMerkleTreeGas_Call) RunAndReturn(run func(int) uint64) *EstimateProvider_CalculateMerkleTreeGas_Call {
	_c.Call.Return(run)
	return _c
}

// CalculateMessageMaxGas provides a mock function with given fields: msg
func (_m *EstimateProvider) CalculateMessageMaxGas(msg ccipocr3.Message) uint64 {
	ret := _m.Called(msg)

	if len(ret) == 0 {
		panic("no return value specified for CalculateMessageMaxGas")
	}

	var r0 uint64
	if rf, ok := ret.Get(0).(func(ccipocr3.Message) uint64); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// EstimateProvider_CalculateMessageMaxGas_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalculateMessageMaxGas'
type EstimateProvider_CalculateMessageMaxGas_Call struct {
	*mock.Call
}

// CalculateMessageMaxGas is a helper method to define mock.On call
//   - msg ccipocr3.Message
func (_e *EstimateProvider_Expecter) CalculateMessageMaxGas(msg interface{}) *EstimateProvider_CalculateMessageMaxGas_Call {
	return &EstimateProvider_CalculateMessageMaxGas_Call{Call: _e.mock.On("CalculateMessageMaxGas", msg)}
}

func (_c *EstimateProvider_CalculateMessageMaxGas_Call) Run(run func(msg ccipocr3.Message)) *EstimateProvider_CalculateMessageMaxGas_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ccipocr3.Message))
	})
	return _c
}

func (_c *EstimateProvider_CalculateMessageMaxGas_Call) Return(_a0 uint64) *EstimateProvider_CalculateMessageMaxGas_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EstimateProvider_CalculateMessageMaxGas_Call) RunAndReturn(run func(ccipocr3.Message) uint64) *EstimateProvider_CalculateMessageMaxGas_Call {
	_c.Call.Return(run)
	return _c
}

// NewEstimateProvider creates a new instance of EstimateProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEstimateProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *EstimateProvider {
	mock := &EstimateProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
