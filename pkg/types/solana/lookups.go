package solana

type Lookup struct {
	Optional                bool
	AccountConstant         *AccountConstant         `json:"accountConstant,omitempty"`
	AccountLookup           *AccountLookup           `json:"accountLookup,omitempty"`
	PDALookups              *PDALookups              `json:"pdas,omitempty"`
	AccountsFromLookupTable *AccountsFromLookupTable `json:"accountsFromLookupTable,omitempty"`
}

func (l Lookup) IsNil() bool {
	return l.AccountConstant == nil && l.AccountLookup == nil && l.PDALookups == nil && l.AccountsFromLookupTable == nil
}

// AccountConstant represents a fixed address, provided in Base58 format, converted into a `solana.PublicKey`.
type AccountConstant struct {
	Name       string `json:"name,omitempty"`
	Address    string `json:"address"`
	IsSigner   bool   `json:"isSigner,omitempty"`
	IsWritable bool   `json:"isWritable,omitempty"`
}

// AccountLookup dynamically derives an account address from args using a specified location path.
type AccountLookup struct {
	Name     string `json:"name,omitempty"`
	Location string `json:"location"`
	// IsSigner and IsWritable can either be a constant bool or a location to a bitmap which decides the bools
	IsSigner   MetaBool `json:"isSigner"`
	IsWritable MetaBool `json:"isWritable"`
}

type MetaBool struct {
	Value          bool   `json:"value,omitempty"`          // bool value
	BitmapLocation string `json:"bitmapLocation,omitempty"` // dot separated location of the bitmap
}

type Seed struct {
	Static  []byte `json:"static,omitempty"` // Static seed value
	Dynamic Lookup `json:"dynamic"`          // Dynamic lookup for seed
}

// PDALookups generates Program Derived Addresses (PDA) by combining a derived public key with one or more seeds.
type PDALookups struct {
	Name string `json:"name,omitempty"`
	// The public key of the PDA to be combined with seeds. If there are multiple PublicKeys
	// there will be multiple PDAs generated by combining each PublicKey with the seeds.
	PublicKey Lookup `json:"publicKey"`
	// Seeds to be derived from an additional lookup
	Seeds      []Seed `json:"seeds"`
	IsSigner   bool   `json:"isSigner,omitempty"`
	IsWritable bool   `json:"isWritable,omitempty"`
	// OPTIONAL: On-chain location and type of desired data from PDA (e.g. a sub-account of the data account)
	InternalField InternalField `json:"internalField"`
}

type InternalField struct {
	// must map directly to IDL type
	TypeName string `json:"typeName"`
	Location string `json:"location"`
	IDL      string `json:"idl"`
}

// LookupTables represents a list of lookup tables that are used to derive addresses for a program.
type LookupTables struct {
	DerivedLookupTables []DerivedLookupTable `json:"derivedLookupTables,omitempty"`
	StaticLookupTables  [][32]byte           `json:"staticLookupTables,omitempty"` // solana.PublicKey
}

// DerivedLookupTable represents a lookup table that is used to derive addresses for a program.
type DerivedLookupTable struct {
	Name     string `json:"name,omitempty"`
	Accounts Lookup `json:"accounts"`
	Optional bool   `json:"optional"`
}

// AccountsFromLookupTable extracts accounts from a lookup table that was previously read and stored in memory.
type AccountsFromLookupTable struct {
	LookupTableName string `json:"lookupTableName"`
	IncludeIndexes  []int  `json:"includeIndexes"`
}

type ATALookup struct {
	// Field that determines whether the ATA lookup is necessary. Basically
	// just need to check this field exists. Dot separated location.
	Location string
	// If the field exists, initialize a ATA account using the Wallet, Token Program, and Mint addresses below
	WalletAddress Lookup
	TokenProgram  Lookup // Deprecated: The token program is now fetched from the mint account
	MintAddress   Lookup
	Optional      bool
}
