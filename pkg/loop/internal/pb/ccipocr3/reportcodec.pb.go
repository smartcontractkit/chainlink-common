// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: reportcodec.proto

package ccipocr3pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EncodeCommitPluginReportInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Report        *CommitPluginReport    `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncodeCommitPluginReportInput) Reset() {
	*x = EncodeCommitPluginReportInput{}
	mi := &file_reportcodec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncodeCommitPluginReportInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodeCommitPluginReportInput) ProtoMessage() {}

func (x *EncodeCommitPluginReportInput) ProtoReflect() protoreflect.Message {
	mi := &file_reportcodec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodeCommitPluginReportInput.ProtoReflect.Descriptor instead.
func (*EncodeCommitPluginReportInput) Descriptor() ([]byte, []int) {
	return file_reportcodec_proto_rawDescGZIP(), []int{0}
}

func (x *EncodeCommitPluginReportInput) GetReport() *CommitPluginReport {
	if x != nil {
		return x.Report
	}
	return nil
}

type EncodeCommitPluginReportOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EncodedReport []byte                 `protobuf:"bytes,1,opt,name=encoded_report,json=encodedReport,proto3" json:"encoded_report,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncodeCommitPluginReportOutput) Reset() {
	*x = EncodeCommitPluginReportOutput{}
	mi := &file_reportcodec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncodeCommitPluginReportOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodeCommitPluginReportOutput) ProtoMessage() {}

func (x *EncodeCommitPluginReportOutput) ProtoReflect() protoreflect.Message {
	mi := &file_reportcodec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodeCommitPluginReportOutput.ProtoReflect.Descriptor instead.
func (*EncodeCommitPluginReportOutput) Descriptor() ([]byte, []int) {
	return file_reportcodec_proto_rawDescGZIP(), []int{1}
}

func (x *EncodeCommitPluginReportOutput) GetEncodedReport() []byte {
	if x != nil {
		return x.EncodedReport
	}
	return nil
}

type DecodeCommitPluginReportInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EncodedReport []byte                 `protobuf:"bytes,1,opt,name=encoded_report,json=encodedReport,proto3" json:"encoded_report,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecodeCommitPluginReportInput) Reset() {
	*x = DecodeCommitPluginReportInput{}
	mi := &file_reportcodec_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecodeCommitPluginReportInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeCommitPluginReportInput) ProtoMessage() {}

func (x *DecodeCommitPluginReportInput) ProtoReflect() protoreflect.Message {
	mi := &file_reportcodec_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeCommitPluginReportInput.ProtoReflect.Descriptor instead.
func (*DecodeCommitPluginReportInput) Descriptor() ([]byte, []int) {
	return file_reportcodec_proto_rawDescGZIP(), []int{2}
}

func (x *DecodeCommitPluginReportInput) GetEncodedReport() []byte {
	if x != nil {
		return x.EncodedReport
	}
	return nil
}

type DecodeCommitPluginReportOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Report        *CommitPluginReport    `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecodeCommitPluginReportOutput) Reset() {
	*x = DecodeCommitPluginReportOutput{}
	mi := &file_reportcodec_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecodeCommitPluginReportOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeCommitPluginReportOutput) ProtoMessage() {}

func (x *DecodeCommitPluginReportOutput) ProtoReflect() protoreflect.Message {
	mi := &file_reportcodec_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeCommitPluginReportOutput.ProtoReflect.Descriptor instead.
func (*DecodeCommitPluginReportOutput) Descriptor() ([]byte, []int) {
	return file_reportcodec_proto_rawDescGZIP(), []int{3}
}

func (x *DecodeCommitPluginReportOutput) GetReport() *CommitPluginReport {
	if x != nil {
		return x.Report
	}
	return nil
}

var File_reportcodec_proto protoreflect.FileDescriptor

var file_reportcodec_proto_rawDesc = string([]byte{
	0x0a, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x19, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x6f, 0x63, 0x72, 0x33, 0x1a, 0x0c,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x66, 0x0a, 0x1d,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x45, 0x0a,
	0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62,
	0x2e, 0x63, 0x63, 0x69, 0x70, 0x6f, 0x63, 0x72, 0x33, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x22, 0x47, 0x0a, 0x1e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x46, 0x0a,
	0x1d, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x25,
	0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x67, 0x0a, 0x1e, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x45, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x6f,
	0x63, 0x72, 0x33, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x32, 0x95,
	0x02, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43,
	0x6f, 0x64, 0x65, 0x63, 0x12, 0x7f, 0x0a, 0x06, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x38,
	0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70,
	0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x6f, 0x63, 0x72, 0x33, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x39, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70,
	0x6f, 0x63, 0x72, 0x33, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x06, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x38, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x70, 0x62, 0x2e, 0x63, 0x63, 0x69, 0x70, 0x6f, 0x63, 0x72, 0x33, 0x2e, 0x44, 0x65, 0x63, 0x6f,
	0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x1a, 0x39, 0x2e, 0x6c, 0x6f, 0x6f, 0x70,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x63, 0x63, 0x69,
	0x70, 0x6f, 0x63, 0x72, 0x33, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x22, 0x00, 0x42, 0x57, 0x5a, 0x55, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x6b, 0x69, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2d,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6c, 0x6f, 0x6f, 0x70, 0x2f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x62, 0x2f, 0x63, 0x63, 0x69, 0x70,
	0x6f, 0x63, 0x72, 0x33, 0x3b, 0x63, 0x63, 0x69, 0x70, 0x6f, 0x63, 0x72, 0x33, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_reportcodec_proto_rawDescOnce sync.Once
	file_reportcodec_proto_rawDescData []byte
)

func file_reportcodec_proto_rawDescGZIP() []byte {
	file_reportcodec_proto_rawDescOnce.Do(func() {
		file_reportcodec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_reportcodec_proto_rawDesc), len(file_reportcodec_proto_rawDesc)))
	})
	return file_reportcodec_proto_rawDescData
}

var file_reportcodec_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_reportcodec_proto_goTypes = []any{
	(*EncodeCommitPluginReportInput)(nil),  // 0: loop.internal.pb.ccipocr3.EncodeCommitPluginReportInput
	(*EncodeCommitPluginReportOutput)(nil), // 1: loop.internal.pb.ccipocr3.EncodeCommitPluginReportOutput
	(*DecodeCommitPluginReportInput)(nil),  // 2: loop.internal.pb.ccipocr3.DecodeCommitPluginReportInput
	(*DecodeCommitPluginReportOutput)(nil), // 3: loop.internal.pb.ccipocr3.DecodeCommitPluginReportOutput
	(*CommitPluginReport)(nil),             // 4: loop.internal.pb.ccipocr3.CommitPluginReport
}
var file_reportcodec_proto_depIdxs = []int32{
	4, // 0: loop.internal.pb.ccipocr3.EncodeCommitPluginReportInput.report:type_name -> loop.internal.pb.ccipocr3.CommitPluginReport
	4, // 1: loop.internal.pb.ccipocr3.DecodeCommitPluginReportOutput.report:type_name -> loop.internal.pb.ccipocr3.CommitPluginReport
	0, // 2: loop.internal.pb.ccipocr3.CommitPluginCodec.Encode:input_type -> loop.internal.pb.ccipocr3.EncodeCommitPluginReportInput
	2, // 3: loop.internal.pb.ccipocr3.CommitPluginCodec.Decode:input_type -> loop.internal.pb.ccipocr3.DecodeCommitPluginReportInput
	1, // 4: loop.internal.pb.ccipocr3.CommitPluginCodec.Encode:output_type -> loop.internal.pb.ccipocr3.EncodeCommitPluginReportOutput
	1, // 5: loop.internal.pb.ccipocr3.CommitPluginCodec.Decode:output_type -> loop.internal.pb.ccipocr3.EncodeCommitPluginReportOutput
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_reportcodec_proto_init() }
func file_reportcodec_proto_init() {
	if File_reportcodec_proto != nil {
		return
	}
	file_models_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_reportcodec_proto_rawDesc), len(file_reportcodec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_reportcodec_proto_goTypes,
		DependencyIndexes: file_reportcodec_proto_depIdxs,
		MessageInfos:      file_reportcodec_proto_msgTypes,
	}.Build()
	File_reportcodec_proto = out.File
	file_reportcodec_proto_goTypes = nil
	file_reportcodec_proto_depIdxs = nil
}
