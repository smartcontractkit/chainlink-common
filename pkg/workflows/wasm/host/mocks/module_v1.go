// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	pb "github.com/smartcontractkit/chainlink-common/pkg/workflows/wasm/pb"
)

// ModuleV1 is an autogenerated mock type for the ModuleV1 type
type ModuleV1 struct {
	mock.Mock
}

type ModuleV1_Expecter struct {
	mock *mock.Mock
}

func (_m *ModuleV1) EXPECT() *ModuleV1_Expecter {
	return &ModuleV1_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *ModuleV1) Close() {
	_m.Called()
}

// ModuleV1_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type ModuleV1_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *ModuleV1_Expecter) Close() *ModuleV1_Close_Call {
	return &ModuleV1_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *ModuleV1_Close_Call) Run(run func()) *ModuleV1_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ModuleV1_Close_Call) Return() *ModuleV1_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *ModuleV1_Close_Call) RunAndReturn(run func()) *ModuleV1_Close_Call {
	_c.Run(run)
	return _c
}

// IsLegacyDAG provides a mock function with no fields
func (_m *ModuleV1) IsLegacyDAG() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsLegacyDAG")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ModuleV1_IsLegacyDAG_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsLegacyDAG'
type ModuleV1_IsLegacyDAG_Call struct {
	*mock.Call
}

// IsLegacyDAG is a helper method to define mock.On call
func (_e *ModuleV1_Expecter) IsLegacyDAG() *ModuleV1_IsLegacyDAG_Call {
	return &ModuleV1_IsLegacyDAG_Call{Call: _e.mock.On("IsLegacyDAG")}
}

func (_c *ModuleV1_IsLegacyDAG_Call) Run(run func()) *ModuleV1_IsLegacyDAG_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ModuleV1_IsLegacyDAG_Call) Return(_a0 bool) *ModuleV1_IsLegacyDAG_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ModuleV1_IsLegacyDAG_Call) RunAndReturn(run func() bool) *ModuleV1_IsLegacyDAG_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: ctx, request
func (_m *ModuleV1) Run(ctx context.Context, request *pb.Request) (*pb.Response, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for Run")
	}

	var r0 *pb.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.Request) (*pb.Response, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.Request) *pb.Response); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.Request) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModuleV1_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type ModuleV1_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
//   - request *pb.Request
func (_e *ModuleV1_Expecter) Run(ctx interface{}, request interface{}) *ModuleV1_Run_Call {
	return &ModuleV1_Run_Call{Call: _e.mock.On("Run", ctx, request)}
}

func (_c *ModuleV1_Run_Call) Run(run func(ctx context.Context, request *pb.Request)) *ModuleV1_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pb.Request))
	})
	return _c
}

func (_c *ModuleV1_Run_Call) Return(_a0 *pb.Response, _a1 error) *ModuleV1_Run_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ModuleV1_Run_Call) RunAndReturn(run func(context.Context, *pb.Request) (*pb.Response, error)) *ModuleV1_Run_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with no fields
func (_m *ModuleV1) Start() {
	_m.Called()
}

// ModuleV1_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type ModuleV1_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *ModuleV1_Expecter) Start() *ModuleV1_Start_Call {
	return &ModuleV1_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *ModuleV1_Start_Call) Run(run func()) *ModuleV1_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ModuleV1_Start_Call) Return() *ModuleV1_Start_Call {
	_c.Call.Return()
	return _c
}

func (_c *ModuleV1_Start_Call) RunAndReturn(run func()) *ModuleV1_Start_Call {
	_c.Run(run)
	return _c
}

// NewModuleV1 creates a new instance of ModuleV1. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewModuleV1(t interface {
	mock.TestingT
	Cleanup(func())
}) *ModuleV1 {
	mock := &ModuleV1{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
