// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: factories.proto

package ccippb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ExecutionFactoryGenerator_NewExecutionFactory_FullMethodName = "/loop.internal.pb.ccip.ExecutionFactoryGenerator/NewExecutionFactory"
)

// ExecutionFactoryGeneratorClient is the client API for ExecutionFactoryGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ExecutionFactoryGenerator is a gRPC service that generates a execution factory
// It is a gRPC service adapter for the https://github.com/smartcontractkit/ccip/core/services/ocr2/plugins/ccip/ccipexec/NewExecutionReportingPluginFactory
type ExecutionFactoryGeneratorClient interface {
	NewExecutionFactory(ctx context.Context, in *NewExecutionFactoryRequest, opts ...grpc.CallOption) (*NewExecutionFactoryResponse, error)
}

type executionFactoryGeneratorClient struct {
	cc grpc.ClientConnInterface
}

func NewExecutionFactoryGeneratorClient(cc grpc.ClientConnInterface) ExecutionFactoryGeneratorClient {
	return &executionFactoryGeneratorClient{cc}
}

func (c *executionFactoryGeneratorClient) NewExecutionFactory(ctx context.Context, in *NewExecutionFactoryRequest, opts ...grpc.CallOption) (*NewExecutionFactoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewExecutionFactoryResponse)
	err := c.cc.Invoke(ctx, ExecutionFactoryGenerator_NewExecutionFactory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExecutionFactoryGeneratorServer is the server API for ExecutionFactoryGenerator service.
// All implementations must embed UnimplementedExecutionFactoryGeneratorServer
// for forward compatibility.
//
// ExecutionFactoryGenerator is a gRPC service that generates a execution factory
// It is a gRPC service adapter for the https://github.com/smartcontractkit/ccip/core/services/ocr2/plugins/ccip/ccipexec/NewExecutionReportingPluginFactory
type ExecutionFactoryGeneratorServer interface {
	NewExecutionFactory(context.Context, *NewExecutionFactoryRequest) (*NewExecutionFactoryResponse, error)
	mustEmbedUnimplementedExecutionFactoryGeneratorServer()
}

// UnimplementedExecutionFactoryGeneratorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExecutionFactoryGeneratorServer struct{}

func (UnimplementedExecutionFactoryGeneratorServer) NewExecutionFactory(context.Context, *NewExecutionFactoryRequest) (*NewExecutionFactoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewExecutionFactory not implemented")
}
func (UnimplementedExecutionFactoryGeneratorServer) mustEmbedUnimplementedExecutionFactoryGeneratorServer() {
}
func (UnimplementedExecutionFactoryGeneratorServer) testEmbeddedByValue() {}

// UnsafeExecutionFactoryGeneratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExecutionFactoryGeneratorServer will
// result in compilation errors.
type UnsafeExecutionFactoryGeneratorServer interface {
	mustEmbedUnimplementedExecutionFactoryGeneratorServer()
}

func RegisterExecutionFactoryGeneratorServer(s grpc.ServiceRegistrar, srv ExecutionFactoryGeneratorServer) {
	// If the following call pancis, it indicates UnimplementedExecutionFactoryGeneratorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExecutionFactoryGenerator_ServiceDesc, srv)
}

func _ExecutionFactoryGenerator_NewExecutionFactory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewExecutionFactoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionFactoryGeneratorServer).NewExecutionFactory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutionFactoryGenerator_NewExecutionFactory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionFactoryGeneratorServer).NewExecutionFactory(ctx, req.(*NewExecutionFactoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExecutionFactoryGenerator_ServiceDesc is the grpc.ServiceDesc for ExecutionFactoryGenerator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExecutionFactoryGenerator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.internal.pb.ccip.ExecutionFactoryGenerator",
	HandlerType: (*ExecutionFactoryGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewExecutionFactory",
			Handler:    _ExecutionFactoryGenerator_NewExecutionFactory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "factories.proto",
}

const (
	ExecutionCustomHandlers_GetTransactionStatus_FullMethodName      = "/loop.internal.pb.ccip.ExecutionCustomHandlers/GetTransactionStatus"
	ExecutionCustomHandlers_NewCommitStoreReader_FullMethodName      = "/loop.internal.pb.ccip.ExecutionCustomHandlers/NewCommitStoreReader"
	ExecutionCustomHandlers_NewOffRampReader_FullMethodName          = "/loop.internal.pb.ccip.ExecutionCustomHandlers/NewOffRampReader"
	ExecutionCustomHandlers_NewOnRampReader_FullMethodName           = "/loop.internal.pb.ccip.ExecutionCustomHandlers/NewOnRampReader"
	ExecutionCustomHandlers_NewPriceRegistryReader_FullMethodName    = "/loop.internal.pb.ccip.ExecutionCustomHandlers/NewPriceRegistryReader"
	ExecutionCustomHandlers_NewTokenDataReader_FullMethodName        = "/loop.internal.pb.ccip.ExecutionCustomHandlers/NewTokenDataReader"
	ExecutionCustomHandlers_NewTokenPoolBatchedReader_FullMethodName = "/loop.internal.pb.ccip.ExecutionCustomHandlers/NewTokenPoolBatchedReader"
	ExecutionCustomHandlers_SourceNativeToken_FullMethodName         = "/loop.internal.pb.ccip.ExecutionCustomHandlers/SourceNativeToken"
	ExecutionCustomHandlers_Close_FullMethodName                     = "/loop.internal.pb.ccip.ExecutionCustomHandlers/Close"
)

// ExecutionCustomHandlersClient is the client API for ExecutionCustomHandlers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ExecutionCustomHandlers is a gRPC service that services the custom
// resource generation requests for the execution provider
type ExecutionCustomHandlersClient interface {
	GetTransactionStatus(ctx context.Context, in *GetTransactionStatusRequest, opts ...grpc.CallOption) (*GetTransactionStatusResponse, error)
	NewCommitStoreReader(ctx context.Context, in *NewCommitStoreReaderRequest, opts ...grpc.CallOption) (*NewCommitStoreReaderResponse, error)
	NewOffRampReader(ctx context.Context, in *NewOffRampReaderRequest, opts ...grpc.CallOption) (*NewOffRampReaderResponse, error)
	NewOnRampReader(ctx context.Context, in *NewOnRampReaderRequest, opts ...grpc.CallOption) (*NewOnRampReaderResponse, error)
	NewPriceRegistryReader(ctx context.Context, in *NewPriceRegistryReaderRequest, opts ...grpc.CallOption) (*NewPriceRegistryReaderResponse, error)
	NewTokenDataReader(ctx context.Context, in *NewTokenDataRequest, opts ...grpc.CallOption) (*NewTokenDataResponse, error)
	NewTokenPoolBatchedReader(ctx context.Context, in *NewTokenPoolBatchedReaderRequest, opts ...grpc.CallOption) (*NewTokenPoolBatchedReaderResponse, error)
	SourceNativeToken(ctx context.Context, in *SourceNativeTokenRequest, opts ...grpc.CallOption) (*SourceNativeTokenResponse, error)
	Close(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type executionCustomHandlersClient struct {
	cc grpc.ClientConnInterface
}

func NewExecutionCustomHandlersClient(cc grpc.ClientConnInterface) ExecutionCustomHandlersClient {
	return &executionCustomHandlersClient{cc}
}

func (c *executionCustomHandlersClient) GetTransactionStatus(ctx context.Context, in *GetTransactionStatusRequest, opts ...grpc.CallOption) (*GetTransactionStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionStatusResponse)
	err := c.cc.Invoke(ctx, ExecutionCustomHandlers_GetTransactionStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executionCustomHandlersClient) NewCommitStoreReader(ctx context.Context, in *NewCommitStoreReaderRequest, opts ...grpc.CallOption) (*NewCommitStoreReaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewCommitStoreReaderResponse)
	err := c.cc.Invoke(ctx, ExecutionCustomHandlers_NewCommitStoreReader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executionCustomHandlersClient) NewOffRampReader(ctx context.Context, in *NewOffRampReaderRequest, opts ...grpc.CallOption) (*NewOffRampReaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewOffRampReaderResponse)
	err := c.cc.Invoke(ctx, ExecutionCustomHandlers_NewOffRampReader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executionCustomHandlersClient) NewOnRampReader(ctx context.Context, in *NewOnRampReaderRequest, opts ...grpc.CallOption) (*NewOnRampReaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewOnRampReaderResponse)
	err := c.cc.Invoke(ctx, ExecutionCustomHandlers_NewOnRampReader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executionCustomHandlersClient) NewPriceRegistryReader(ctx context.Context, in *NewPriceRegistryReaderRequest, opts ...grpc.CallOption) (*NewPriceRegistryReaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewPriceRegistryReaderResponse)
	err := c.cc.Invoke(ctx, ExecutionCustomHandlers_NewPriceRegistryReader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executionCustomHandlersClient) NewTokenDataReader(ctx context.Context, in *NewTokenDataRequest, opts ...grpc.CallOption) (*NewTokenDataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewTokenDataResponse)
	err := c.cc.Invoke(ctx, ExecutionCustomHandlers_NewTokenDataReader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executionCustomHandlersClient) NewTokenPoolBatchedReader(ctx context.Context, in *NewTokenPoolBatchedReaderRequest, opts ...grpc.CallOption) (*NewTokenPoolBatchedReaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewTokenPoolBatchedReaderResponse)
	err := c.cc.Invoke(ctx, ExecutionCustomHandlers_NewTokenPoolBatchedReader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executionCustomHandlersClient) SourceNativeToken(ctx context.Context, in *SourceNativeTokenRequest, opts ...grpc.CallOption) (*SourceNativeTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SourceNativeTokenResponse)
	err := c.cc.Invoke(ctx, ExecutionCustomHandlers_SourceNativeToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *executionCustomHandlersClient) Close(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ExecutionCustomHandlers_Close_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExecutionCustomHandlersServer is the server API for ExecutionCustomHandlers service.
// All implementations must embed UnimplementedExecutionCustomHandlersServer
// for forward compatibility.
//
// ExecutionCustomHandlers is a gRPC service that services the custom
// resource generation requests for the execution provider
type ExecutionCustomHandlersServer interface {
	GetTransactionStatus(context.Context, *GetTransactionStatusRequest) (*GetTransactionStatusResponse, error)
	NewCommitStoreReader(context.Context, *NewCommitStoreReaderRequest) (*NewCommitStoreReaderResponse, error)
	NewOffRampReader(context.Context, *NewOffRampReaderRequest) (*NewOffRampReaderResponse, error)
	NewOnRampReader(context.Context, *NewOnRampReaderRequest) (*NewOnRampReaderResponse, error)
	NewPriceRegistryReader(context.Context, *NewPriceRegistryReaderRequest) (*NewPriceRegistryReaderResponse, error)
	NewTokenDataReader(context.Context, *NewTokenDataRequest) (*NewTokenDataResponse, error)
	NewTokenPoolBatchedReader(context.Context, *NewTokenPoolBatchedReaderRequest) (*NewTokenPoolBatchedReaderResponse, error)
	SourceNativeToken(context.Context, *SourceNativeTokenRequest) (*SourceNativeTokenResponse, error)
	Close(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedExecutionCustomHandlersServer()
}

// UnimplementedExecutionCustomHandlersServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExecutionCustomHandlersServer struct{}

func (UnimplementedExecutionCustomHandlersServer) GetTransactionStatus(context.Context, *GetTransactionStatusRequest) (*GetTransactionStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionStatus not implemented")
}
func (UnimplementedExecutionCustomHandlersServer) NewCommitStoreReader(context.Context, *NewCommitStoreReaderRequest) (*NewCommitStoreReaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewCommitStoreReader not implemented")
}
func (UnimplementedExecutionCustomHandlersServer) NewOffRampReader(context.Context, *NewOffRampReaderRequest) (*NewOffRampReaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewOffRampReader not implemented")
}
func (UnimplementedExecutionCustomHandlersServer) NewOnRampReader(context.Context, *NewOnRampReaderRequest) (*NewOnRampReaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewOnRampReader not implemented")
}
func (UnimplementedExecutionCustomHandlersServer) NewPriceRegistryReader(context.Context, *NewPriceRegistryReaderRequest) (*NewPriceRegistryReaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewPriceRegistryReader not implemented")
}
func (UnimplementedExecutionCustomHandlersServer) NewTokenDataReader(context.Context, *NewTokenDataRequest) (*NewTokenDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewTokenDataReader not implemented")
}
func (UnimplementedExecutionCustomHandlersServer) NewTokenPoolBatchedReader(context.Context, *NewTokenPoolBatchedReaderRequest) (*NewTokenPoolBatchedReaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewTokenPoolBatchedReader not implemented")
}
func (UnimplementedExecutionCustomHandlersServer) SourceNativeToken(context.Context, *SourceNativeTokenRequest) (*SourceNativeTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SourceNativeToken not implemented")
}
func (UnimplementedExecutionCustomHandlersServer) Close(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedExecutionCustomHandlersServer) mustEmbedUnimplementedExecutionCustomHandlersServer() {
}
func (UnimplementedExecutionCustomHandlersServer) testEmbeddedByValue() {}

// UnsafeExecutionCustomHandlersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExecutionCustomHandlersServer will
// result in compilation errors.
type UnsafeExecutionCustomHandlersServer interface {
	mustEmbedUnimplementedExecutionCustomHandlersServer()
}

func RegisterExecutionCustomHandlersServer(s grpc.ServiceRegistrar, srv ExecutionCustomHandlersServer) {
	// If the following call pancis, it indicates UnimplementedExecutionCustomHandlersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExecutionCustomHandlers_ServiceDesc, srv)
}

func _ExecutionCustomHandlers_GetTransactionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionCustomHandlersServer).GetTransactionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutionCustomHandlers_GetTransactionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionCustomHandlersServer).GetTransactionStatus(ctx, req.(*GetTransactionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutionCustomHandlers_NewCommitStoreReader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewCommitStoreReaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionCustomHandlersServer).NewCommitStoreReader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutionCustomHandlers_NewCommitStoreReader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionCustomHandlersServer).NewCommitStoreReader(ctx, req.(*NewCommitStoreReaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutionCustomHandlers_NewOffRampReader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewOffRampReaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionCustomHandlersServer).NewOffRampReader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutionCustomHandlers_NewOffRampReader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionCustomHandlersServer).NewOffRampReader(ctx, req.(*NewOffRampReaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutionCustomHandlers_NewOnRampReader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewOnRampReaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionCustomHandlersServer).NewOnRampReader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutionCustomHandlers_NewOnRampReader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionCustomHandlersServer).NewOnRampReader(ctx, req.(*NewOnRampReaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutionCustomHandlers_NewPriceRegistryReader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPriceRegistryReaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionCustomHandlersServer).NewPriceRegistryReader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutionCustomHandlers_NewPriceRegistryReader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionCustomHandlersServer).NewPriceRegistryReader(ctx, req.(*NewPriceRegistryReaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutionCustomHandlers_NewTokenDataReader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewTokenDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionCustomHandlersServer).NewTokenDataReader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutionCustomHandlers_NewTokenDataReader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionCustomHandlersServer).NewTokenDataReader(ctx, req.(*NewTokenDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutionCustomHandlers_NewTokenPoolBatchedReader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewTokenPoolBatchedReaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionCustomHandlersServer).NewTokenPoolBatchedReader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutionCustomHandlers_NewTokenPoolBatchedReader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionCustomHandlersServer).NewTokenPoolBatchedReader(ctx, req.(*NewTokenPoolBatchedReaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutionCustomHandlers_SourceNativeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceNativeTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionCustomHandlersServer).SourceNativeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutionCustomHandlers_SourceNativeToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionCustomHandlersServer).SourceNativeToken(ctx, req.(*SourceNativeTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExecutionCustomHandlers_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExecutionCustomHandlersServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExecutionCustomHandlers_Close_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExecutionCustomHandlersServer).Close(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ExecutionCustomHandlers_ServiceDesc is the grpc.ServiceDesc for ExecutionCustomHandlers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExecutionCustomHandlers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.internal.pb.ccip.ExecutionCustomHandlers",
	HandlerType: (*ExecutionCustomHandlersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransactionStatus",
			Handler:    _ExecutionCustomHandlers_GetTransactionStatus_Handler,
		},
		{
			MethodName: "NewCommitStoreReader",
			Handler:    _ExecutionCustomHandlers_NewCommitStoreReader_Handler,
		},
		{
			MethodName: "NewOffRampReader",
			Handler:    _ExecutionCustomHandlers_NewOffRampReader_Handler,
		},
		{
			MethodName: "NewOnRampReader",
			Handler:    _ExecutionCustomHandlers_NewOnRampReader_Handler,
		},
		{
			MethodName: "NewPriceRegistryReader",
			Handler:    _ExecutionCustomHandlers_NewPriceRegistryReader_Handler,
		},
		{
			MethodName: "NewTokenDataReader",
			Handler:    _ExecutionCustomHandlers_NewTokenDataReader_Handler,
		},
		{
			MethodName: "NewTokenPoolBatchedReader",
			Handler:    _ExecutionCustomHandlers_NewTokenPoolBatchedReader_Handler,
		},
		{
			MethodName: "SourceNativeToken",
			Handler:    _ExecutionCustomHandlers_SourceNativeToken_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _ExecutionCustomHandlers_Close_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "factories.proto",
}

const (
	CommitFactoryGenerator_NewCommitFactory_FullMethodName = "/loop.internal.pb.ccip.CommitFactoryGenerator/NewCommitFactory"
)

// CommitFactoryGeneratorClient is the client API for CommitFactoryGenerator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommitFactoryGeneratorClient interface {
	NewCommitFactory(ctx context.Context, in *NewCommitFactoryRequest, opts ...grpc.CallOption) (*NewCommitFactoryResponse, error)
}

type commitFactoryGeneratorClient struct {
	cc grpc.ClientConnInterface
}

func NewCommitFactoryGeneratorClient(cc grpc.ClientConnInterface) CommitFactoryGeneratorClient {
	return &commitFactoryGeneratorClient{cc}
}

func (c *commitFactoryGeneratorClient) NewCommitFactory(ctx context.Context, in *NewCommitFactoryRequest, opts ...grpc.CallOption) (*NewCommitFactoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewCommitFactoryResponse)
	err := c.cc.Invoke(ctx, CommitFactoryGenerator_NewCommitFactory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommitFactoryGeneratorServer is the server API for CommitFactoryGenerator service.
// All implementations must embed UnimplementedCommitFactoryGeneratorServer
// for forward compatibility.
type CommitFactoryGeneratorServer interface {
	NewCommitFactory(context.Context, *NewCommitFactoryRequest) (*NewCommitFactoryResponse, error)
	mustEmbedUnimplementedCommitFactoryGeneratorServer()
}

// UnimplementedCommitFactoryGeneratorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommitFactoryGeneratorServer struct{}

func (UnimplementedCommitFactoryGeneratorServer) NewCommitFactory(context.Context, *NewCommitFactoryRequest) (*NewCommitFactoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewCommitFactory not implemented")
}
func (UnimplementedCommitFactoryGeneratorServer) mustEmbedUnimplementedCommitFactoryGeneratorServer() {
}
func (UnimplementedCommitFactoryGeneratorServer) testEmbeddedByValue() {}

// UnsafeCommitFactoryGeneratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommitFactoryGeneratorServer will
// result in compilation errors.
type UnsafeCommitFactoryGeneratorServer interface {
	mustEmbedUnimplementedCommitFactoryGeneratorServer()
}

func RegisterCommitFactoryGeneratorServer(s grpc.ServiceRegistrar, srv CommitFactoryGeneratorServer) {
	// If the following call pancis, it indicates UnimplementedCommitFactoryGeneratorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CommitFactoryGenerator_ServiceDesc, srv)
}

func _CommitFactoryGenerator_NewCommitFactory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewCommitFactoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitFactoryGeneratorServer).NewCommitFactory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommitFactoryGenerator_NewCommitFactory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitFactoryGeneratorServer).NewCommitFactory(ctx, req.(*NewCommitFactoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommitFactoryGenerator_ServiceDesc is the grpc.ServiceDesc for CommitFactoryGenerator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommitFactoryGenerator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.internal.pb.ccip.CommitFactoryGenerator",
	HandlerType: (*CommitFactoryGeneratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewCommitFactory",
			Handler:    _CommitFactoryGenerator_NewCommitFactory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "factories.proto",
}

const (
	CommitCustomHandlers_NewCommitStoreReader_FullMethodName   = "/loop.internal.pb.ccip.CommitCustomHandlers/NewCommitStoreReader"
	CommitCustomHandlers_NewOffRampReader_FullMethodName       = "/loop.internal.pb.ccip.CommitCustomHandlers/NewOffRampReader"
	CommitCustomHandlers_NewOnRampReader_FullMethodName        = "/loop.internal.pb.ccip.CommitCustomHandlers/NewOnRampReader"
	CommitCustomHandlers_NewPriceGetter_FullMethodName         = "/loop.internal.pb.ccip.CommitCustomHandlers/NewPriceGetter"
	CommitCustomHandlers_NewPriceRegistryReader_FullMethodName = "/loop.internal.pb.ccip.CommitCustomHandlers/NewPriceRegistryReader"
	CommitCustomHandlers_SourceNativeToken_FullMethodName      = "/loop.internal.pb.ccip.CommitCustomHandlers/SourceNativeToken"
	CommitCustomHandlers_Close_FullMethodName                  = "/loop.internal.pb.ccip.CommitCustomHandlers/Close"
)

// CommitCustomHandlersClient is the client API for CommitCustomHandlers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CommitCustomHandlers is a gRPC service that services the custom
// resource generation requests for the commit provider
type CommitCustomHandlersClient interface {
	NewCommitStoreReader(ctx context.Context, in *NewCommitStoreReaderRequest, opts ...grpc.CallOption) (*NewCommitStoreReaderResponse, error)
	NewOffRampReader(ctx context.Context, in *NewOffRampReaderRequest, opts ...grpc.CallOption) (*NewOffRampReaderResponse, error)
	NewOnRampReader(ctx context.Context, in *NewOnRampReaderRequest, opts ...grpc.CallOption) (*NewOnRampReaderResponse, error)
	NewPriceGetter(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NewPriceGetterResponse, error)
	NewPriceRegistryReader(ctx context.Context, in *NewPriceRegistryReaderRequest, opts ...grpc.CallOption) (*NewPriceRegistryReaderResponse, error)
	SourceNativeToken(ctx context.Context, in *SourceNativeTokenRequest, opts ...grpc.CallOption) (*SourceNativeTokenResponse, error)
	Close(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type commitCustomHandlersClient struct {
	cc grpc.ClientConnInterface
}

func NewCommitCustomHandlersClient(cc grpc.ClientConnInterface) CommitCustomHandlersClient {
	return &commitCustomHandlersClient{cc}
}

func (c *commitCustomHandlersClient) NewCommitStoreReader(ctx context.Context, in *NewCommitStoreReaderRequest, opts ...grpc.CallOption) (*NewCommitStoreReaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewCommitStoreReaderResponse)
	err := c.cc.Invoke(ctx, CommitCustomHandlers_NewCommitStoreReader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitCustomHandlersClient) NewOffRampReader(ctx context.Context, in *NewOffRampReaderRequest, opts ...grpc.CallOption) (*NewOffRampReaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewOffRampReaderResponse)
	err := c.cc.Invoke(ctx, CommitCustomHandlers_NewOffRampReader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitCustomHandlersClient) NewOnRampReader(ctx context.Context, in *NewOnRampReaderRequest, opts ...grpc.CallOption) (*NewOnRampReaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewOnRampReaderResponse)
	err := c.cc.Invoke(ctx, CommitCustomHandlers_NewOnRampReader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitCustomHandlersClient) NewPriceGetter(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*NewPriceGetterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewPriceGetterResponse)
	err := c.cc.Invoke(ctx, CommitCustomHandlers_NewPriceGetter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitCustomHandlersClient) NewPriceRegistryReader(ctx context.Context, in *NewPriceRegistryReaderRequest, opts ...grpc.CallOption) (*NewPriceRegistryReaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewPriceRegistryReaderResponse)
	err := c.cc.Invoke(ctx, CommitCustomHandlers_NewPriceRegistryReader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitCustomHandlersClient) SourceNativeToken(ctx context.Context, in *SourceNativeTokenRequest, opts ...grpc.CallOption) (*SourceNativeTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SourceNativeTokenResponse)
	err := c.cc.Invoke(ctx, CommitCustomHandlers_SourceNativeToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitCustomHandlersClient) Close(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CommitCustomHandlers_Close_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommitCustomHandlersServer is the server API for CommitCustomHandlers service.
// All implementations must embed UnimplementedCommitCustomHandlersServer
// for forward compatibility.
//
// CommitCustomHandlers is a gRPC service that services the custom
// resource generation requests for the commit provider
type CommitCustomHandlersServer interface {
	NewCommitStoreReader(context.Context, *NewCommitStoreReaderRequest) (*NewCommitStoreReaderResponse, error)
	NewOffRampReader(context.Context, *NewOffRampReaderRequest) (*NewOffRampReaderResponse, error)
	NewOnRampReader(context.Context, *NewOnRampReaderRequest) (*NewOnRampReaderResponse, error)
	NewPriceGetter(context.Context, *emptypb.Empty) (*NewPriceGetterResponse, error)
	NewPriceRegistryReader(context.Context, *NewPriceRegistryReaderRequest) (*NewPriceRegistryReaderResponse, error)
	SourceNativeToken(context.Context, *SourceNativeTokenRequest) (*SourceNativeTokenResponse, error)
	Close(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedCommitCustomHandlersServer()
}

// UnimplementedCommitCustomHandlersServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommitCustomHandlersServer struct{}

func (UnimplementedCommitCustomHandlersServer) NewCommitStoreReader(context.Context, *NewCommitStoreReaderRequest) (*NewCommitStoreReaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewCommitStoreReader not implemented")
}
func (UnimplementedCommitCustomHandlersServer) NewOffRampReader(context.Context, *NewOffRampReaderRequest) (*NewOffRampReaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewOffRampReader not implemented")
}
func (UnimplementedCommitCustomHandlersServer) NewOnRampReader(context.Context, *NewOnRampReaderRequest) (*NewOnRampReaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewOnRampReader not implemented")
}
func (UnimplementedCommitCustomHandlersServer) NewPriceGetter(context.Context, *emptypb.Empty) (*NewPriceGetterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewPriceGetter not implemented")
}
func (UnimplementedCommitCustomHandlersServer) NewPriceRegistryReader(context.Context, *NewPriceRegistryReaderRequest) (*NewPriceRegistryReaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewPriceRegistryReader not implemented")
}
func (UnimplementedCommitCustomHandlersServer) SourceNativeToken(context.Context, *SourceNativeTokenRequest) (*SourceNativeTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SourceNativeToken not implemented")
}
func (UnimplementedCommitCustomHandlersServer) Close(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedCommitCustomHandlersServer) mustEmbedUnimplementedCommitCustomHandlersServer() {}
func (UnimplementedCommitCustomHandlersServer) testEmbeddedByValue()                              {}

// UnsafeCommitCustomHandlersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommitCustomHandlersServer will
// result in compilation errors.
type UnsafeCommitCustomHandlersServer interface {
	mustEmbedUnimplementedCommitCustomHandlersServer()
}

func RegisterCommitCustomHandlersServer(s grpc.ServiceRegistrar, srv CommitCustomHandlersServer) {
	// If the following call pancis, it indicates UnimplementedCommitCustomHandlersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CommitCustomHandlers_ServiceDesc, srv)
}

func _CommitCustomHandlers_NewCommitStoreReader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewCommitStoreReaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitCustomHandlersServer).NewCommitStoreReader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommitCustomHandlers_NewCommitStoreReader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitCustomHandlersServer).NewCommitStoreReader(ctx, req.(*NewCommitStoreReaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommitCustomHandlers_NewOffRampReader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewOffRampReaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitCustomHandlersServer).NewOffRampReader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommitCustomHandlers_NewOffRampReader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitCustomHandlersServer).NewOffRampReader(ctx, req.(*NewOffRampReaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommitCustomHandlers_NewOnRampReader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewOnRampReaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitCustomHandlersServer).NewOnRampReader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommitCustomHandlers_NewOnRampReader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitCustomHandlersServer).NewOnRampReader(ctx, req.(*NewOnRampReaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommitCustomHandlers_NewPriceGetter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitCustomHandlersServer).NewPriceGetter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommitCustomHandlers_NewPriceGetter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitCustomHandlersServer).NewPriceGetter(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommitCustomHandlers_NewPriceRegistryReader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPriceRegistryReaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitCustomHandlersServer).NewPriceRegistryReader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommitCustomHandlers_NewPriceRegistryReader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitCustomHandlersServer).NewPriceRegistryReader(ctx, req.(*NewPriceRegistryReaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommitCustomHandlers_SourceNativeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SourceNativeTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitCustomHandlersServer).SourceNativeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommitCustomHandlers_SourceNativeToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitCustomHandlersServer).SourceNativeToken(ctx, req.(*SourceNativeTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommitCustomHandlers_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitCustomHandlersServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommitCustomHandlers_Close_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitCustomHandlersServer).Close(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// CommitCustomHandlers_ServiceDesc is the grpc.ServiceDesc for CommitCustomHandlers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommitCustomHandlers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.internal.pb.ccip.CommitCustomHandlers",
	HandlerType: (*CommitCustomHandlersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewCommitStoreReader",
			Handler:    _CommitCustomHandlers_NewCommitStoreReader_Handler,
		},
		{
			MethodName: "NewOffRampReader",
			Handler:    _CommitCustomHandlers_NewOffRampReader_Handler,
		},
		{
			MethodName: "NewOnRampReader",
			Handler:    _CommitCustomHandlers_NewOnRampReader_Handler,
		},
		{
			MethodName: "NewPriceGetter",
			Handler:    _CommitCustomHandlers_NewPriceGetter_Handler,
		},
		{
			MethodName: "NewPriceRegistryReader",
			Handler:    _CommitCustomHandlers_NewPriceRegistryReader_Handler,
		},
		{
			MethodName: "SourceNativeToken",
			Handler:    _CommitCustomHandlers_SourceNativeToken_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _CommitCustomHandlers_Close_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "factories.proto",
}
