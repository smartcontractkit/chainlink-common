// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: capabilities/v2/pb/capabilities_v2.proto

package pb

import (
	context "context"
	pb "github.com/smartcontractkit/chainlink-common/pkg/capabilities/pb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Capability_Info_FullMethodName              = "/capabilities_v2.Capability/Info"
	Capability_Execute_FullMethodName           = "/capabilities_v2.Capability/Execute"
	Capability_RegisterTrigger_FullMethodName   = "/capabilities_v2.Capability/RegisterTrigger"
	Capability_UnregisterTrigger_FullMethodName = "/capabilities_v2.Capability/UnregisterTrigger"
)

// CapabilityClient is the client API for Capability service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CapabilityClient interface {
	Info(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*pb.CapabilityInfoReply, error)
	Execute(ctx context.Context, in *CapabilityRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CapabilityResponse], error)
	RegisterTrigger(ctx context.Context, in *TriggerRegistrationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TriggerResponseMessage], error)
	UnregisterTrigger(ctx context.Context, in *TriggerRegistrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type capabilityClient struct {
	cc grpc.ClientConnInterface
}

func NewCapabilityClient(cc grpc.ClientConnInterface) CapabilityClient {
	return &capabilityClient{cc}
}

func (c *capabilityClient) Info(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*pb.CapabilityInfoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.CapabilityInfoReply)
	err := c.cc.Invoke(ctx, Capability_Info_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *capabilityClient) Execute(ctx context.Context, in *CapabilityRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[CapabilityResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Capability_ServiceDesc.Streams[0], Capability_Execute_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CapabilityRequest, CapabilityResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Capability_ExecuteClient = grpc.ServerStreamingClient[CapabilityResponse]

func (c *capabilityClient) RegisterTrigger(ctx context.Context, in *TriggerRegistrationRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TriggerResponseMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Capability_ServiceDesc.Streams[1], Capability_RegisterTrigger_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TriggerRegistrationRequest, TriggerResponseMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Capability_RegisterTriggerClient = grpc.ServerStreamingClient[TriggerResponseMessage]

func (c *capabilityClient) UnregisterTrigger(ctx context.Context, in *TriggerRegistrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Capability_UnregisterTrigger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CapabilityServer is the server API for Capability service.
// All implementations must embed UnimplementedCapabilityServer
// for forward compatibility.
type CapabilityServer interface {
	Info(context.Context, *emptypb.Empty) (*pb.CapabilityInfoReply, error)
	Execute(*CapabilityRequest, grpc.ServerStreamingServer[CapabilityResponse]) error
	RegisterTrigger(*TriggerRegistrationRequest, grpc.ServerStreamingServer[TriggerResponseMessage]) error
	UnregisterTrigger(context.Context, *TriggerRegistrationRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCapabilityServer()
}

// UnimplementedCapabilityServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCapabilityServer struct{}

func (UnimplementedCapabilityServer) Info(context.Context, *emptypb.Empty) (*pb.CapabilityInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedCapabilityServer) Execute(*CapabilityRequest, grpc.ServerStreamingServer[CapabilityResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedCapabilityServer) RegisterTrigger(*TriggerRegistrationRequest, grpc.ServerStreamingServer[TriggerResponseMessage]) error {
	return status.Errorf(codes.Unimplemented, "method RegisterTrigger not implemented")
}
func (UnimplementedCapabilityServer) UnregisterTrigger(context.Context, *TriggerRegistrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterTrigger not implemented")
}
func (UnimplementedCapabilityServer) mustEmbedUnimplementedCapabilityServer() {}
func (UnimplementedCapabilityServer) testEmbeddedByValue()                    {}

// UnsafeCapabilityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CapabilityServer will
// result in compilation errors.
type UnsafeCapabilityServer interface {
	mustEmbedUnimplementedCapabilityServer()
}

func RegisterCapabilityServer(s grpc.ServiceRegistrar, srv CapabilityServer) {
	// If the following call pancis, it indicates UnimplementedCapabilityServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Capability_ServiceDesc, srv)
}

func _Capability_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapabilityServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Capability_Info_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapabilityServer).Info(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Capability_Execute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CapabilityRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CapabilityServer).Execute(m, &grpc.GenericServerStream[CapabilityRequest, CapabilityResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Capability_ExecuteServer = grpc.ServerStreamingServer[CapabilityResponse]

func _Capability_RegisterTrigger_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TriggerRegistrationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CapabilityServer).RegisterTrigger(m, &grpc.GenericServerStream[TriggerRegistrationRequest, TriggerResponseMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Capability_RegisterTriggerServer = grpc.ServerStreamingServer[TriggerResponseMessage]

func _Capability_UnregisterTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CapabilityServer).UnregisterTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Capability_UnregisterTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CapabilityServer).UnregisterTrigger(ctx, req.(*TriggerRegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Capability_ServiceDesc is the grpc.ServiceDesc for Capability service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Capability_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "capabilities_v2.Capability",
	HandlerType: (*CapabilityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _Capability_Info_Handler,
		},
		{
			MethodName: "UnregisterTrigger",
			Handler:    _Capability_UnregisterTrigger_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Execute",
			Handler:       _Capability_Execute_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RegisterTrigger",
			Handler:       _Capability_RegisterTrigger_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "capabilities/v2/pb/capabilities_v2.proto",
}
