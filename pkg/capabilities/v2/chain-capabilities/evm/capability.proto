syntax = "proto3";

option go_package = "github.com/smartcontractkit/chainlink-common/pkg/capabilities/v2/chain-capabilities/evm/capability;evm";

package cre.sdk.v2.evm;

import "google/protobuf/empty.proto";
import "capabilities/v2/protoc/pkg/pb/cre_metadata.proto";
import "chains/evm/evm.proto";

service Client {
  option (cre.metadata.capability) = {
    mode: DON
    capability_id: "evm@1.0.0"
  };
  rpc CallContract(loop.evm.CallContractRequest) returns (loop.evm.CallContractReply);
  rpc FilterLogs(loop.evm.FilterLogsRequest) returns (loop.evm.FilterLogsReply);
  rpc BalanceAt(loop.evm.BalanceAtRequest) returns (loop.evm.BalanceAtReply);
  rpc EstimateGas(loop.evm.EstimateGasRequest) returns (loop.evm.EstimateGasReply);
  rpc GetTransactionByHash(loop.evm.GetTransactionByHashRequest) returns (loop.evm.GetTransactionByHashReply);
  rpc GetTransactionReceipt(loop.evm.GetTransactionReceiptRequest) returns (loop.evm.GetTransactionReceiptReply);
  rpc LatestAndFinalizedHead(google.protobuf.Empty) returns (loop.evm.LatestAndFinalizedHeadReply);
  rpc QueryTrackedLogs(loop.evm.QueryTrackedLogsRequest) returns (loop.evm.QueryTrackedLogsReply);
  rpc RegisterLogTracking(loop.evm.RegisterLogTrackingRequest) returns (google.protobuf.Empty);
  rpc UnregisterLogTracking(loop.evm.UnregisterLogTrackingRequest) returns (google.protobuf.Empty);
  rpc LogTrigger(FilterLogTriggerRequest) returns (stream loop.evm.FilterLogsReply);
}

enum ConfidenceLevel {
  EARLY = 0;        // default, blocks that have a good level of confidence defined by chain, but not guaranteed to be included in the chain
  BLOCK_DEPTH = 1;  // blocks that are lower than the BlockDepth parameter defined by user, which is a number of blocks to wait for confirmation
  FINALIZED = 2;    // guaranteed to be included in the chain
}
message FilterLogTriggerRequest {
  repeated bytes addresses = 1; // contract(s) to filter logs from, at least one address is required
  repeated bytes topics0 = 2;  // list of topics0/eventSigs to filter, at least one topic is required
  repeated bytes topics1 = 3;  // list of topics1 to filter, optional, can be empty
  repeated bytes topics2 = 4;  // list of topics1 to filter, optional, can be empty
  repeated bytes topics3 = 5;  // list of topics1 to filter, optional, can be empty
  ConfidenceLevel Confidence = 6; // optional, defaults to "EARLY"
  uint64 BlockDepth = 7; // optional, defaults to particular value per chain (from a table), number of blocks to wait for confirmation
}
