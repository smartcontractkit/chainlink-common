// Code generated by github.com/smartcontractkit/chainlink-common/pkg/capabilities/cli, DO NOT EDIT.

package pkg2

import (
	"github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk"
)

// OtherPackageWrapper allows access to field from an sdk.CapDefinition[OtherPackage]
func OtherPackageWrapper(raw sdk.CapDefinition[OtherPackage]) OtherPackageCap {
	wrapped, ok := raw.(OtherPackageCap)
	if ok {
		return wrapped
	}
	return &otherPackageCap{CapDefinition: raw}
}

type OtherPackageCap interface {
	sdk.CapDefinition[OtherPackage]
	Nr() sdk.CapDefinition[NotWrapped]
	X() sdk.CapDefinition[string]
	Z() sdk.CapDefinition[string]
	private()
}

type otherPackageCap struct {
	sdk.CapDefinition[OtherPackage]
}

func (*otherPackageCap) private() {}
func (c *otherPackageCap) Nr() sdk.CapDefinition[NotWrapped] {
	return sdk.AccessField[OtherPackage, NotWrapped](c.CapDefinition, "Nr")
}
func (c *otherPackageCap) X() sdk.CapDefinition[string] {
	return sdk.AccessField[OtherPackage, string](c.CapDefinition, "X")
}
func (c *otherPackageCap) Z() sdk.CapDefinition[string] {
	return sdk.AccessField[OtherPackage, string](c.CapDefinition, "Z")
}

func ConstantOtherPackage(value OtherPackage) OtherPackageCap {
	return &otherPackageCap{CapDefinition: sdk.ConstantDefinition(value)}
}

func NewOtherPackageFromFields(
	nr sdk.CapDefinition[NotWrapped],
	x sdk.CapDefinition[string],
	z sdk.CapDefinition[string]) OtherPackageCap {
	return &simpleOtherPackage{
		CapDefinition: sdk.ComponentCapDefinition[OtherPackage]{
			"Nr": nr.Ref(),
			"X":  x.Ref(),
			"Z":  z.Ref(),
		},
		nr: nr,
		x:  x,
		z:  z,
	}
}

type simpleOtherPackage struct {
	sdk.CapDefinition[OtherPackage]
	nr sdk.CapDefinition[NotWrapped]
	x  sdk.CapDefinition[string]
	z  sdk.CapDefinition[string]
}

func (c *simpleOtherPackage) Nr() sdk.CapDefinition[NotWrapped] {
	return c.nr
}
func (c *simpleOtherPackage) X() sdk.CapDefinition[string] {
	return c.x
}
func (c *simpleOtherPackage) Z() sdk.CapDefinition[string] {
	return c.z
}

func (c *simpleOtherPackage) private() {}
