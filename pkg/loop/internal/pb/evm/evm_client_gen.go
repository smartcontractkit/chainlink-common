// Code generated by github.com/smartcontractkit/chainlink-common/pkg/capabilities/v2/protoc, DO NOT EDIT.

package evmpb

import (
	"errors"

	"google.golang.org/protobuf/types/known/anypb"

	"google.golang.org/protobuf/types/known/emptypb"

	"github.com/smartcontractkit/chainlink-common/pkg/loop/internal/pb"
	"github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk/v2"
	"github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk/v2/pb"
)

type EVM struct {
	// TODO: https://smartcontract-it.atlassian.net/browse/CAPPL-799 allow defaults for capabilities
	// TODO: https://smartcontract-it.atlassian.net/browse/CAPPL-797 ID should be allowed to require a parameter.
}

func (c *EVM) GetTransactionFee(runtime sdk.DonRuntime, input *GetTransactionFeeRequest) sdk.Promise[*GetTransactionFeeReply] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*GetTransactionFeeReply](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&pb.CapabilityRequest{
		Id:      "mainnet-evm@1.0.0",
		Payload: wrapped,
		Method:  "GetTransactionFee",
	}), func(i *pb.CapabilityResponse) (*GetTransactionFeeReply, error) {
		switch payload := i.Response.(type) {
		case *pb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *pb.CapabilityResponse_Payload:
			output := &GetTransactionFeeReply{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *EVM) CallContract(runtime sdk.DonRuntime, input *CallContractRequest) sdk.Promise[*CallContractReply] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*CallContractReply](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&pb.CapabilityRequest{
		Id:      "mainnet-evm@1.0.0",
		Payload: wrapped,
		Method:  "CallContract",
	}), func(i *pb.CapabilityResponse) (*CallContractReply, error) {
		switch payload := i.Response.(type) {
		case *pb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *pb.CapabilityResponse_Payload:
			output := &CallContractReply{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *EVM) GetLogs(runtime sdk.DonRuntime, input *GetLogsRequest) sdk.Promise[*GetLogsReply] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*GetLogsReply](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&pb.CapabilityRequest{
		Id:      "mainnet-evm@1.0.0",
		Payload: wrapped,
		Method:  "GetLogs",
	}), func(i *pb.CapabilityResponse) (*GetLogsReply, error) {
		switch payload := i.Response.(type) {
		case *pb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *pb.CapabilityResponse_Payload:
			output := &GetLogsReply{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *EVM) BalanceAt(runtime sdk.DonRuntime, input *BalanceAtRequest) sdk.Promise[*BalanceAtReply] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*BalanceAtReply](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&pb.CapabilityRequest{
		Id:      "mainnet-evm@1.0.0",
		Payload: wrapped,
		Method:  "BalanceAt",
	}), func(i *pb.CapabilityResponse) (*BalanceAtReply, error) {
		switch payload := i.Response.(type) {
		case *pb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *pb.CapabilityResponse_Payload:
			output := &BalanceAtReply{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *EVM) EstimateGas(runtime sdk.DonRuntime, input *EstimateGasRequest) sdk.Promise[*EstimateGasReply] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*EstimateGasReply](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&pb.CapabilityRequest{
		Id:      "mainnet-evm@1.0.0",
		Payload: wrapped,
		Method:  "EstimateGas",
	}), func(i *pb.CapabilityResponse) (*EstimateGasReply, error) {
		switch payload := i.Response.(type) {
		case *pb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *pb.CapabilityResponse_Payload:
			output := &EstimateGasReply{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *EVM) GetTransactionByHash(runtime sdk.DonRuntime, input *GetTransactionByHashRequest) sdk.Promise[*GetTransactionByHashReply] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*GetTransactionByHashReply](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&pb.CapabilityRequest{
		Id:      "mainnet-evm@1.0.0",
		Payload: wrapped,
		Method:  "GetTransactionByHash",
	}), func(i *pb.CapabilityResponse) (*GetTransactionByHashReply, error) {
		switch payload := i.Response.(type) {
		case *pb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *pb.CapabilityResponse_Payload:
			output := &GetTransactionByHashReply{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *EVM) GetTransactionReceipt(runtime sdk.DonRuntime, input *GetReceiptRequest) sdk.Promise[*GetReceiptReply] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*GetReceiptReply](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&pb.CapabilityRequest{
		Id:      "mainnet-evm@1.0.0",
		Payload: wrapped,
		Method:  "GetTransactionReceipt",
	}), func(i *pb.CapabilityResponse) (*GetReceiptReply, error) {
		switch payload := i.Response.(type) {
		case *pb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *pb.CapabilityResponse_Payload:
			output := &GetReceiptReply{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *EVM) LatestAndFinalizedHead(runtime sdk.DonRuntime, input *emptypb.Empty) sdk.Promise[*LatestAndFinalizedHeadReply] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*LatestAndFinalizedHeadReply](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&pb.CapabilityRequest{
		Id:      "mainnet-evm@1.0.0",
		Payload: wrapped,
		Method:  "LatestAndFinalizedHead",
	}), func(i *pb.CapabilityResponse) (*LatestAndFinalizedHeadReply, error) {
		switch payload := i.Response.(type) {
		case *pb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *pb.CapabilityResponse_Payload:
			output := &LatestAndFinalizedHeadReply{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *EVM) QueryLogsFromCache(runtime sdk.DonRuntime, input *QueryLogsFromCacheRequest) sdk.Promise[*QueryLogsFromCacheReply] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*QueryLogsFromCacheReply](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&pb.CapabilityRequest{
		Id:      "mainnet-evm@1.0.0",
		Payload: wrapped,
		Method:  "QueryLogsFromCache",
	}), func(i *pb.CapabilityResponse) (*QueryLogsFromCacheReply, error) {
		switch payload := i.Response.(type) {
		case *pb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *pb.CapabilityResponse_Payload:
			output := &QueryLogsFromCacheReply{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *EVM) RegisterLogTracking(runtime sdk.DonRuntime, input *RegisterLogTrackingRequest) sdk.Promise[*emptypb.Empty] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*emptypb.Empty](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&pb.CapabilityRequest{
		Id:      "mainnet-evm@1.0.0",
		Payload: wrapped,
		Method:  "RegisterLogTracking",
	}), func(i *pb.CapabilityResponse) (*emptypb.Empty, error) {
		switch payload := i.Response.(type) {
		case *pb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *pb.CapabilityResponse_Payload:
			output := &emptypb.Empty{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *EVM) UnregisterLogTracking(runtime sdk.DonRuntime, input *UnregisterLogTrackingRequest) sdk.Promise[*emptypb.Empty] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*emptypb.Empty](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&pb.CapabilityRequest{
		Id:      "mainnet-evm@1.0.0",
		Payload: wrapped,
		Method:  "UnregisterLogTracking",
	}), func(i *pb.CapabilityResponse) (*emptypb.Empty, error) {
		switch payload := i.Response.(type) {
		case *pb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *pb.CapabilityResponse_Payload:
			output := &emptypb.Empty{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *EVM) GetTransactionStatus(runtime sdk.DonRuntime, input *pb.GetTransactionStatusRequest) sdk.Promise[*pb.GetTransactionStatusReply] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*pb.GetTransactionStatusReply](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&pb.CapabilityRequest{
		Id:      "mainnet-evm@1.0.0",
		Payload: wrapped,
		Method:  "GetTransactionStatus",
	}), func(i *pb.CapabilityResponse) (*pb.GetTransactionStatusReply, error) {
		switch payload := i.Response.(type) {
		case *pb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *pb.CapabilityResponse_Payload:
			output := &pb.GetTransactionStatusReply{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}
