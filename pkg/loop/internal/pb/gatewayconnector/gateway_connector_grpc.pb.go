// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: gateway_connector.proto

package gatewayconnector

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GatewayConnector_AddHandler_FullMethodName      = "/loop.GatewayConnector/AddHandler"
	GatewayConnector_SendToGateway_FullMethodName   = "/loop.GatewayConnector/SendToGateway"
	GatewayConnector_SignMessage_FullMethodName     = "/loop.GatewayConnector/SignMessage"
	GatewayConnector_GatewayIDs_FullMethodName      = "/loop.GatewayConnector/GatewayIDs"
	GatewayConnector_DonID_FullMethodName           = "/loop.GatewayConnector/DonID"
	GatewayConnector_AwaitConnection_FullMethodName = "/loop.GatewayConnector/AwaitConnection"
)

// GatewayConnectorClient is the client API for GatewayConnector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayConnectorClient interface {
	AddHandler(ctx context.Context, in *AddHandlerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendToGateway(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SignMessage(ctx context.Context, in *SignMessageRequest, opts ...grpc.CallOption) (*SignMessageReply, error)
	GatewayIDs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GatewayIDsReply, error)
	DonID(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DonIDReply, error)
	AwaitConnection(ctx context.Context, in *GatewayIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type gatewayConnectorClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayConnectorClient(cc grpc.ClientConnInterface) GatewayConnectorClient {
	return &gatewayConnectorClient{cc}
}

func (c *gatewayConnectorClient) AddHandler(ctx context.Context, in *AddHandlerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GatewayConnector_AddHandler_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayConnectorClient) SendToGateway(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GatewayConnector_SendToGateway_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayConnectorClient) SignMessage(ctx context.Context, in *SignMessageRequest, opts ...grpc.CallOption) (*SignMessageReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SignMessageReply)
	err := c.cc.Invoke(ctx, GatewayConnector_SignMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayConnectorClient) GatewayIDs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GatewayIDsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GatewayIDsReply)
	err := c.cc.Invoke(ctx, GatewayConnector_GatewayIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayConnectorClient) DonID(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DonIDReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DonIDReply)
	err := c.cc.Invoke(ctx, GatewayConnector_DonID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayConnectorClient) AwaitConnection(ctx context.Context, in *GatewayIDRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GatewayConnector_AwaitConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayConnectorServer is the server API for GatewayConnector service.
// All implementations must embed UnimplementedGatewayConnectorServer
// for forward compatibility.
type GatewayConnectorServer interface {
	AddHandler(context.Context, *AddHandlerRequest) (*emptypb.Empty, error)
	SendToGateway(context.Context, *SendMessageRequest) (*emptypb.Empty, error)
	SignMessage(context.Context, *SignMessageRequest) (*SignMessageReply, error)
	GatewayIDs(context.Context, *emptypb.Empty) (*GatewayIDsReply, error)
	DonID(context.Context, *emptypb.Empty) (*DonIDReply, error)
	AwaitConnection(context.Context, *GatewayIDRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedGatewayConnectorServer()
}

// UnimplementedGatewayConnectorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGatewayConnectorServer struct{}

func (UnimplementedGatewayConnectorServer) AddHandler(context.Context, *AddHandlerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHandler not implemented")
}
func (UnimplementedGatewayConnectorServer) SendToGateway(context.Context, *SendMessageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToGateway not implemented")
}
func (UnimplementedGatewayConnectorServer) SignMessage(context.Context, *SignMessageRequest) (*SignMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignMessage not implemented")
}
func (UnimplementedGatewayConnectorServer) GatewayIDs(context.Context, *emptypb.Empty) (*GatewayIDsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewayIDs not implemented")
}
func (UnimplementedGatewayConnectorServer) DonID(context.Context, *emptypb.Empty) (*DonIDReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DonID not implemented")
}
func (UnimplementedGatewayConnectorServer) AwaitConnection(context.Context, *GatewayIDRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AwaitConnection not implemented")
}
func (UnimplementedGatewayConnectorServer) mustEmbedUnimplementedGatewayConnectorServer() {}
func (UnimplementedGatewayConnectorServer) testEmbeddedByValue()                          {}

// UnsafeGatewayConnectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayConnectorServer will
// result in compilation errors.
type UnsafeGatewayConnectorServer interface {
	mustEmbedUnimplementedGatewayConnectorServer()
}

func RegisterGatewayConnectorServer(s grpc.ServiceRegistrar, srv GatewayConnectorServer) {
	// If the following call pancis, it indicates UnimplementedGatewayConnectorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GatewayConnector_ServiceDesc, srv)
}

func _GatewayConnector_AddHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayConnectorServer).AddHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayConnector_AddHandler_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayConnectorServer).AddHandler(ctx, req.(*AddHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayConnector_SendToGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayConnectorServer).SendToGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayConnector_SendToGateway_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayConnectorServer).SendToGateway(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayConnector_SignMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayConnectorServer).SignMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayConnector_SignMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayConnectorServer).SignMessage(ctx, req.(*SignMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayConnector_GatewayIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayConnectorServer).GatewayIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayConnector_GatewayIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayConnectorServer).GatewayIDs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayConnector_DonID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayConnectorServer).DonID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayConnector_DonID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayConnectorServer).DonID(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GatewayConnector_AwaitConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayConnectorServer).AwaitConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GatewayConnector_AwaitConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayConnectorServer).AwaitConnection(ctx, req.(*GatewayIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GatewayConnector_ServiceDesc is the grpc.ServiceDesc for GatewayConnector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GatewayConnector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.GatewayConnector",
	HandlerType: (*GatewayConnectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddHandler",
			Handler:    _GatewayConnector_AddHandler_Handler,
		},
		{
			MethodName: "SendToGateway",
			Handler:    _GatewayConnector_SendToGateway_Handler,
		},
		{
			MethodName: "SignMessage",
			Handler:    _GatewayConnector_SignMessage_Handler,
		},
		{
			MethodName: "GatewayIDs",
			Handler:    _GatewayConnector_GatewayIDs_Handler,
		},
		{
			MethodName: "DonID",
			Handler:    _GatewayConnector_DonID_Handler,
		},
		{
			MethodName: "AwaitConnection",
			Handler:    _GatewayConnector_AwaitConnection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway_connector.proto",
}
