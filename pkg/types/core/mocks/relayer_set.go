// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	core "github.com/smartcontractkit/chainlink-common/pkg/types/core"
	mock "github.com/stretchr/testify/mock"

	types "github.com/smartcontractkit/chainlink-common/pkg/types"
)

// RelayerSet is an autogenerated mock type for the RelayerSet type
type RelayerSet struct {
	mock.Mock
}

type RelayerSet_Expecter struct {
	mock *mock.Mock
}

func (_m *RelayerSet) EXPECT() *RelayerSet_Expecter {
	return &RelayerSet_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, relayID
func (_m *RelayerSet) Get(ctx context.Context, relayID types.RelayID) (core.Relayer, error) {
	ret := _m.Called(ctx, relayID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 core.Relayer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.RelayID) (core.Relayer, error)); ok {
		return rf(ctx, relayID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.RelayID) core.Relayer); ok {
		r0 = rf(ctx, relayID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.Relayer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.RelayID) error); ok {
		r1 = rf(ctx, relayID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RelayerSet_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type RelayerSet_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - relayID types.RelayID
func (_e *RelayerSet_Expecter) Get(ctx interface{}, relayID interface{}) *RelayerSet_Get_Call {
	return &RelayerSet_Get_Call{Call: _e.mock.On("Get", ctx, relayID)}
}

func (_c *RelayerSet_Get_Call) Run(run func(ctx context.Context, relayID types.RelayID)) *RelayerSet_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.RelayID))
	})
	return _c
}

func (_c *RelayerSet_Get_Call) Return(_a0 core.Relayer, _a1 error) *RelayerSet_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RelayerSet_Get_Call) RunAndReturn(run func(context.Context, types.RelayID) (core.Relayer, error)) *RelayerSet_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, relayIDs
func (_m *RelayerSet) List(ctx context.Context, relayIDs ...types.RelayID) (map[types.RelayID]core.Relayer, error) {
	_va := make([]interface{}, len(relayIDs))
	for _i := range relayIDs {
		_va[_i] = relayIDs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 map[types.RelayID]core.Relayer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...types.RelayID) (map[types.RelayID]core.Relayer, error)); ok {
		return rf(ctx, relayIDs...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...types.RelayID) map[types.RelayID]core.Relayer); ok {
		r0 = rf(ctx, relayIDs...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[types.RelayID]core.Relayer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...types.RelayID) error); ok {
		r1 = rf(ctx, relayIDs...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RelayerSet_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type RelayerSet_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - relayIDs ...types.RelayID
func (_e *RelayerSet_Expecter) List(ctx interface{}, relayIDs ...interface{}) *RelayerSet_List_Call {
	return &RelayerSet_List_Call{Call: _e.mock.On("List",
		append([]interface{}{ctx}, relayIDs...)...)}
}

func (_c *RelayerSet_List_Call) Run(run func(ctx context.Context, relayIDs ...types.RelayID)) *RelayerSet_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]types.RelayID, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(types.RelayID)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *RelayerSet_List_Call) Return(_a0 map[types.RelayID]core.Relayer, _a1 error) *RelayerSet_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RelayerSet_List_Call) RunAndReturn(run func(context.Context, ...types.RelayID) (map[types.RelayID]core.Relayer, error)) *RelayerSet_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewRelayerSet creates a new instance of RelayerSet. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRelayerSet(t interface {
	mock.TestingT
	Cleanup(func())
}) *RelayerSet {
	mock := &RelayerSet{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
