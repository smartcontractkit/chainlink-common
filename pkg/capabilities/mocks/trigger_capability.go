// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	capabilities "github.com/smartcontractkit/chainlink-common/pkg/capabilities"

	mock "github.com/stretchr/testify/mock"
)

// TriggerCapability is an autogenerated mock type for the TriggerCapability type
type TriggerCapability struct {
	mock.Mock
}

type TriggerCapability_Expecter struct {
	mock *mock.Mock
}

func (_m *TriggerCapability) EXPECT() *TriggerCapability_Expecter {
	return &TriggerCapability_Expecter{mock: &_m.Mock}
}

// Info provides a mock function with given fields: ctx
func (_m *TriggerCapability) Info(ctx context.Context) (capabilities.CapabilityInfo, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 capabilities.CapabilityInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (capabilities.CapabilityInfo, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) capabilities.CapabilityInfo); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(capabilities.CapabilityInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TriggerCapability_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type TriggerCapability_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - ctx context.Context
func (_e *TriggerCapability_Expecter) Info(ctx interface{}) *TriggerCapability_Info_Call {
	return &TriggerCapability_Info_Call{Call: _e.mock.On("Info", ctx)}
}

func (_c *TriggerCapability_Info_Call) Run(run func(ctx context.Context)) *TriggerCapability_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *TriggerCapability_Info_Call) Return(_a0 capabilities.CapabilityInfo, _a1 error) *TriggerCapability_Info_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TriggerCapability_Info_Call) RunAndReturn(run func(context.Context) (capabilities.CapabilityInfo, error)) *TriggerCapability_Info_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterTrigger provides a mock function with given fields: ctx, request
func (_m *TriggerCapability) RegisterTrigger(ctx context.Context, request capabilities.TriggerRegistrationRequest) (<-chan capabilities.TriggerResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for RegisterTrigger")
	}

	var r0 <-chan capabilities.TriggerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, capabilities.TriggerRegistrationRequest) (<-chan capabilities.TriggerResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, capabilities.TriggerRegistrationRequest) <-chan capabilities.TriggerResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan capabilities.TriggerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, capabilities.TriggerRegistrationRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TriggerCapability_RegisterTrigger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterTrigger'
type TriggerCapability_RegisterTrigger_Call struct {
	*mock.Call
}

// RegisterTrigger is a helper method to define mock.On call
//   - ctx context.Context
//   - request capabilities.TriggerRegistrationRequest
func (_e *TriggerCapability_Expecter) RegisterTrigger(ctx interface{}, request interface{}) *TriggerCapability_RegisterTrigger_Call {
	return &TriggerCapability_RegisterTrigger_Call{Call: _e.mock.On("RegisterTrigger", ctx, request)}
}

func (_c *TriggerCapability_RegisterTrigger_Call) Run(run func(ctx context.Context, request capabilities.TriggerRegistrationRequest)) *TriggerCapability_RegisterTrigger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(capabilities.TriggerRegistrationRequest))
	})
	return _c
}

func (_c *TriggerCapability_RegisterTrigger_Call) Return(_a0 <-chan capabilities.TriggerResponse, _a1 error) *TriggerCapability_RegisterTrigger_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TriggerCapability_RegisterTrigger_Call) RunAndReturn(run func(context.Context, capabilities.TriggerRegistrationRequest) (<-chan capabilities.TriggerResponse, error)) *TriggerCapability_RegisterTrigger_Call {
	_c.Call.Return(run)
	return _c
}

// UnregisterTrigger provides a mock function with given fields: ctx, request
func (_m *TriggerCapability) UnregisterTrigger(ctx context.Context, request capabilities.TriggerRegistrationRequest) error {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for UnregisterTrigger")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, capabilities.TriggerRegistrationRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TriggerCapability_UnregisterTrigger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterTrigger'
type TriggerCapability_UnregisterTrigger_Call struct {
	*mock.Call
}

// UnregisterTrigger is a helper method to define mock.On call
//   - ctx context.Context
//   - request capabilities.TriggerRegistrationRequest
func (_e *TriggerCapability_Expecter) UnregisterTrigger(ctx interface{}, request interface{}) *TriggerCapability_UnregisterTrigger_Call {
	return &TriggerCapability_UnregisterTrigger_Call{Call: _e.mock.On("UnregisterTrigger", ctx, request)}
}

func (_c *TriggerCapability_UnregisterTrigger_Call) Run(run func(ctx context.Context, request capabilities.TriggerRegistrationRequest)) *TriggerCapability_UnregisterTrigger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(capabilities.TriggerRegistrationRequest))
	})
	return _c
}

func (_c *TriggerCapability_UnregisterTrigger_Call) Return(_a0 error) *TriggerCapability_UnregisterTrigger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TriggerCapability_UnregisterTrigger_Call) RunAndReturn(run func(context.Context, capabilities.TriggerRegistrationRequest) error) *TriggerCapability_UnregisterTrigger_Call {
	_c.Call.Return(run)
	return _c
}

// NewTriggerCapability creates a new instance of TriggerCapability. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTriggerCapability(t interface {
	mock.TestingT
	Cleanup(func())
}) *TriggerCapability {
	mock := &TriggerCapability{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
