// Code generated by mockery v2.53.3. DO NOT EDIT.

package monitoring

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MetricsMock is an autogenerated mock type for the Metrics type
type MetricsMock struct {
	mock.Mock
}

type MetricsMock_Expecter struct {
	mock *mock.Mock
}

func (_m *MetricsMock) EXPECT() *MetricsMock_Expecter {
	return &MetricsMock_Expecter{mock: &_m.Mock}
}

// Cleanup provides a mock function with given fields: networkName, networkID, chainID, oracleName, sender, feedName, feedPath, symbol, contractType, contractStatus, contractAddress, feedID
func (_m *MetricsMock) Cleanup(networkName string, networkID string, chainID string, oracleName string, sender string, feedName string, feedPath string, symbol string, contractType string, contractStatus string, contractAddress string, feedID string) {
	_m.Called(networkName, networkID, chainID, oracleName, sender, feedName, feedPath, symbol, contractType, contractStatus, contractAddress, feedID)
}

// MetricsMock_Cleanup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cleanup'
type MetricsMock_Cleanup_Call struct {
	*mock.Call
}

// Cleanup is a helper method to define mock.On call
//   - networkName string
//   - networkID string
//   - chainID string
//   - oracleName string
//   - sender string
//   - feedName string
//   - feedPath string
//   - symbol string
//   - contractType string
//   - contractStatus string
//   - contractAddress string
//   - feedID string
func (_e *MetricsMock_Expecter) Cleanup(networkName interface{}, networkID interface{}, chainID interface{}, oracleName interface{}, sender interface{}, feedName interface{}, feedPath interface{}, symbol interface{}, contractType interface{}, contractStatus interface{}, contractAddress interface{}, feedID interface{}) *MetricsMock_Cleanup_Call {
	return &MetricsMock_Cleanup_Call{Call: _e.mock.On("Cleanup", networkName, networkID, chainID, oracleName, sender, feedName, feedPath, symbol, contractType, contractStatus, contractAddress, feedID)}
}

func (_c *MetricsMock_Cleanup_Call) Run(run func(networkName string, networkID string, chainID string, oracleName string, sender string, feedName string, feedPath string, symbol string, contractType string, contractStatus string, contractAddress string, feedID string)) *MetricsMock_Cleanup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string), args[6].(string), args[7].(string), args[8].(string), args[9].(string), args[10].(string), args[11].(string))
	})
	return _c
}

func (_c *MetricsMock_Cleanup_Call) Return() *MetricsMock_Cleanup_Call {
	_c.Call.Return()
	return _c
}

func (_c *MetricsMock_Cleanup_Call) RunAndReturn(run func(string, string, string, string, string, string, string, string, string, string, string, string)) *MetricsMock_Cleanup_Call {
	_c.Run(run)
	return _c
}

// HTTPHandler provides a mock function with no fields
func (_m *MetricsMock) HTTPHandler() http.Handler {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HTTPHandler")
	}

	var r0 http.Handler
	if rf, ok := ret.Get(0).(func() http.Handler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Handler)
		}
	}

	return r0
}

// MetricsMock_HTTPHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HTTPHandler'
type MetricsMock_HTTPHandler_Call struct {
	*mock.Call
}

// HTTPHandler is a helper method to define mock.On call
func (_e *MetricsMock_Expecter) HTTPHandler() *MetricsMock_HTTPHandler_Call {
	return &MetricsMock_HTTPHandler_Call{Call: _e.mock.On("HTTPHandler")}
}

func (_c *MetricsMock_HTTPHandler_Call) Run(run func()) *MetricsMock_HTTPHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MetricsMock_HTTPHandler_Call) Return(_a0 http.Handler) *MetricsMock_HTTPHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MetricsMock_HTTPHandler_Call) RunAndReturn(run func() http.Handler) *MetricsMock_HTTPHandler_Call {
	_c.Call.Return(run)
	return _c
}

// IncOffchainAggregatorAnswersTotal provides a mock function with given fields: contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName
func (_m *MetricsMock) IncOffchainAggregatorAnswersTotal(contractAddress string, feedID string, chainID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string) {
	_m.Called(contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName)
}

// MetricsMock_IncOffchainAggregatorAnswersTotal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncOffchainAggregatorAnswersTotal'
type MetricsMock_IncOffchainAggregatorAnswersTotal_Call struct {
	*mock.Call
}

// IncOffchainAggregatorAnswersTotal is a helper method to define mock.On call
//   - contractAddress string
//   - feedID string
//   - chainID string
//   - contractStatus string
//   - contractType string
//   - feedName string
//   - feedPath string
//   - networkID string
//   - networkName string
func (_e *MetricsMock_Expecter) IncOffchainAggregatorAnswersTotal(contractAddress interface{}, feedID interface{}, chainID interface{}, contractStatus interface{}, contractType interface{}, feedName interface{}, feedPath interface{}, networkID interface{}, networkName interface{}) *MetricsMock_IncOffchainAggregatorAnswersTotal_Call {
	return &MetricsMock_IncOffchainAggregatorAnswersTotal_Call{Call: _e.mock.On("IncOffchainAggregatorAnswersTotal", contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName)}
}

func (_c *MetricsMock_IncOffchainAggregatorAnswersTotal_Call) Run(run func(contractAddress string, feedID string, chainID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string)) *MetricsMock_IncOffchainAggregatorAnswersTotal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string), args[6].(string), args[7].(string), args[8].(string))
	})
	return _c
}

func (_c *MetricsMock_IncOffchainAggregatorAnswersTotal_Call) Return() *MetricsMock_IncOffchainAggregatorAnswersTotal_Call {
	_c.Call.Return()
	return _c
}

func (_c *MetricsMock_IncOffchainAggregatorAnswersTotal_Call) RunAndReturn(run func(string, string, string, string, string, string, string, string, string)) *MetricsMock_IncOffchainAggregatorAnswersTotal_Call {
	_c.Run(run)
	return _c
}

// SetFeedContractLinkBalance provides a mock function with given fields: balance, contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName
func (_m *MetricsMock) SetFeedContractLinkBalance(balance float64, contractAddress string, feedID string, chainID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string) {
	_m.Called(balance, contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName)
}

// MetricsMock_SetFeedContractLinkBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFeedContractLinkBalance'
type MetricsMock_SetFeedContractLinkBalance_Call struct {
	*mock.Call
}

// SetFeedContractLinkBalance is a helper method to define mock.On call
//   - balance float64
//   - contractAddress string
//   - feedID string
//   - chainID string
//   - contractStatus string
//   - contractType string
//   - feedName string
//   - feedPath string
//   - networkID string
//   - networkName string
func (_e *MetricsMock_Expecter) SetFeedContractLinkBalance(balance interface{}, contractAddress interface{}, feedID interface{}, chainID interface{}, contractStatus interface{}, contractType interface{}, feedName interface{}, feedPath interface{}, networkID interface{}, networkName interface{}) *MetricsMock_SetFeedContractLinkBalance_Call {
	return &MetricsMock_SetFeedContractLinkBalance_Call{Call: _e.mock.On("SetFeedContractLinkBalance", balance, contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName)}
}

func (_c *MetricsMock_SetFeedContractLinkBalance_Call) Run(run func(balance float64, contractAddress string, feedID string, chainID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string)) *MetricsMock_SetFeedContractLinkBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string), args[6].(string), args[7].(string), args[8].(string), args[9].(string))
	})
	return _c
}

func (_c *MetricsMock_SetFeedContractLinkBalance_Call) Return() *MetricsMock_SetFeedContractLinkBalance_Call {
	_c.Call.Return()
	return _c
}

func (_c *MetricsMock_SetFeedContractLinkBalance_Call) RunAndReturn(run func(float64, string, string, string, string, string, string, string, string, string)) *MetricsMock_SetFeedContractLinkBalance_Call {
	_c.Run(run)
	return _c
}

// SetFeedContractMetadata provides a mock function with given fields: chainID, contractAddress, feedID, contractStatus, contractType, feedName, feedPath, networkID, networkName, symbol
func (_m *MetricsMock) SetFeedContractMetadata(chainID string, contractAddress string, feedID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string, symbol string) {
	_m.Called(chainID, contractAddress, feedID, contractStatus, contractType, feedName, feedPath, networkID, networkName, symbol)
}

// MetricsMock_SetFeedContractMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFeedContractMetadata'
type MetricsMock_SetFeedContractMetadata_Call struct {
	*mock.Call
}

// SetFeedContractMetadata is a helper method to define mock.On call
//   - chainID string
//   - contractAddress string
//   - feedID string
//   - contractStatus string
//   - contractType string
//   - feedName string
//   - feedPath string
//   - networkID string
//   - networkName string
//   - symbol string
func (_e *MetricsMock_Expecter) SetFeedContractMetadata(chainID interface{}, contractAddress interface{}, feedID interface{}, contractStatus interface{}, contractType interface{}, feedName interface{}, feedPath interface{}, networkID interface{}, networkName interface{}, symbol interface{}) *MetricsMock_SetFeedContractMetadata_Call {
	return &MetricsMock_SetFeedContractMetadata_Call{Call: _e.mock.On("SetFeedContractMetadata", chainID, contractAddress, feedID, contractStatus, contractType, feedName, feedPath, networkID, networkName, symbol)}
}

func (_c *MetricsMock_SetFeedContractMetadata_Call) Run(run func(chainID string, contractAddress string, feedID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string, symbol string)) *MetricsMock_SetFeedContractMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string), args[6].(string), args[7].(string), args[8].(string), args[9].(string))
	})
	return _c
}

func (_c *MetricsMock_SetFeedContractMetadata_Call) Return() *MetricsMock_SetFeedContractMetadata_Call {
	_c.Call.Return()
	return _c
}

func (_c *MetricsMock_SetFeedContractMetadata_Call) RunAndReturn(run func(string, string, string, string, string, string, string, string, string, string)) *MetricsMock_SetFeedContractMetadata_Call {
	_c.Run(run)
	return _c
}

// SetFeedContractTransactionsFailed provides a mock function with given fields: numFailed, contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName
func (_m *MetricsMock) SetFeedContractTransactionsFailed(numFailed float64, contractAddress string, feedID string, chainID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string) {
	_m.Called(numFailed, contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName)
}

// MetricsMock_SetFeedContractTransactionsFailed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFeedContractTransactionsFailed'
type MetricsMock_SetFeedContractTransactionsFailed_Call struct {
	*mock.Call
}

// SetFeedContractTransactionsFailed is a helper method to define mock.On call
//   - numFailed float64
//   - contractAddress string
//   - feedID string
//   - chainID string
//   - contractStatus string
//   - contractType string
//   - feedName string
//   - feedPath string
//   - networkID string
//   - networkName string
func (_e *MetricsMock_Expecter) SetFeedContractTransactionsFailed(numFailed interface{}, contractAddress interface{}, feedID interface{}, chainID interface{}, contractStatus interface{}, contractType interface{}, feedName interface{}, feedPath interface{}, networkID interface{}, networkName interface{}) *MetricsMock_SetFeedContractTransactionsFailed_Call {
	return &MetricsMock_SetFeedContractTransactionsFailed_Call{Call: _e.mock.On("SetFeedContractTransactionsFailed", numFailed, contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName)}
}

func (_c *MetricsMock_SetFeedContractTransactionsFailed_Call) Run(run func(numFailed float64, contractAddress string, feedID string, chainID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string)) *MetricsMock_SetFeedContractTransactionsFailed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string), args[6].(string), args[7].(string), args[8].(string), args[9].(string))
	})
	return _c
}

func (_c *MetricsMock_SetFeedContractTransactionsFailed_Call) Return() *MetricsMock_SetFeedContractTransactionsFailed_Call {
	_c.Call.Return()
	return _c
}

func (_c *MetricsMock_SetFeedContractTransactionsFailed_Call) RunAndReturn(run func(float64, string, string, string, string, string, string, string, string, string)) *MetricsMock_SetFeedContractTransactionsFailed_Call {
	_c.Run(run)
	return _c
}

// SetFeedContractTransactionsSucceeded provides a mock function with given fields: numSucceeded, contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName
func (_m *MetricsMock) SetFeedContractTransactionsSucceeded(numSucceeded float64, contractAddress string, feedID string, chainID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string) {
	_m.Called(numSucceeded, contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName)
}

// MetricsMock_SetFeedContractTransactionsSucceeded_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetFeedContractTransactionsSucceeded'
type MetricsMock_SetFeedContractTransactionsSucceeded_Call struct {
	*mock.Call
}

// SetFeedContractTransactionsSucceeded is a helper method to define mock.On call
//   - numSucceeded float64
//   - contractAddress string
//   - feedID string
//   - chainID string
//   - contractStatus string
//   - contractType string
//   - feedName string
//   - feedPath string
//   - networkID string
//   - networkName string
func (_e *MetricsMock_Expecter) SetFeedContractTransactionsSucceeded(numSucceeded interface{}, contractAddress interface{}, feedID interface{}, chainID interface{}, contractStatus interface{}, contractType interface{}, feedName interface{}, feedPath interface{}, networkID interface{}, networkName interface{}) *MetricsMock_SetFeedContractTransactionsSucceeded_Call {
	return &MetricsMock_SetFeedContractTransactionsSucceeded_Call{Call: _e.mock.On("SetFeedContractTransactionsSucceeded", numSucceeded, contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName)}
}

func (_c *MetricsMock_SetFeedContractTransactionsSucceeded_Call) Run(run func(numSucceeded float64, contractAddress string, feedID string, chainID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string)) *MetricsMock_SetFeedContractTransactionsSucceeded_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string), args[6].(string), args[7].(string), args[8].(string), args[9].(string))
	})
	return _c
}

func (_c *MetricsMock_SetFeedContractTransactionsSucceeded_Call) Return() *MetricsMock_SetFeedContractTransactionsSucceeded_Call {
	_c.Call.Return()
	return _c
}

func (_c *MetricsMock_SetFeedContractTransactionsSucceeded_Call) RunAndReturn(run func(float64, string, string, string, string, string, string, string, string, string)) *MetricsMock_SetFeedContractTransactionsSucceeded_Call {
	_c.Run(run)
	return _c
}

// SetHeadTrackerCurrentHead provides a mock function with given fields: blockNumber, networkName, chainID, networkID
func (_m *MetricsMock) SetHeadTrackerCurrentHead(blockNumber float64, networkName string, chainID string, networkID string) {
	_m.Called(blockNumber, networkName, chainID, networkID)
}

// MetricsMock_SetHeadTrackerCurrentHead_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetHeadTrackerCurrentHead'
type MetricsMock_SetHeadTrackerCurrentHead_Call struct {
	*mock.Call
}

// SetHeadTrackerCurrentHead is a helper method to define mock.On call
//   - blockNumber float64
//   - networkName string
//   - chainID string
//   - networkID string
func (_e *MetricsMock_Expecter) SetHeadTrackerCurrentHead(blockNumber interface{}, networkName interface{}, chainID interface{}, networkID interface{}) *MetricsMock_SetHeadTrackerCurrentHead_Call {
	return &MetricsMock_SetHeadTrackerCurrentHead_Call{Call: _e.mock.On("SetHeadTrackerCurrentHead", blockNumber, networkName, chainID, networkID)}
}

func (_c *MetricsMock_SetHeadTrackerCurrentHead_Call) Run(run func(blockNumber float64, networkName string, chainID string, networkID string)) *MetricsMock_SetHeadTrackerCurrentHead_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *MetricsMock_SetHeadTrackerCurrentHead_Call) Return() *MetricsMock_SetHeadTrackerCurrentHead_Call {
	_c.Call.Return()
	return _c
}

func (_c *MetricsMock_SetHeadTrackerCurrentHead_Call) RunAndReturn(run func(float64, string, string, string)) *MetricsMock_SetHeadTrackerCurrentHead_Call {
	_c.Run(run)
	return _c
}

// SetLinkAvailableForPayment provides a mock function with given fields: amount, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName
func (_m *MetricsMock) SetLinkAvailableForPayment(amount float64, feedID string, chainID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string) {
	_m.Called(amount, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName)
}

// MetricsMock_SetLinkAvailableForPayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetLinkAvailableForPayment'
type MetricsMock_SetLinkAvailableForPayment_Call struct {
	*mock.Call
}

// SetLinkAvailableForPayment is a helper method to define mock.On call
//   - amount float64
//   - feedID string
//   - chainID string
//   - contractStatus string
//   - contractType string
//   - feedName string
//   - feedPath string
//   - networkID string
//   - networkName string
func (_e *MetricsMock_Expecter) SetLinkAvailableForPayment(amount interface{}, feedID interface{}, chainID interface{}, contractStatus interface{}, contractType interface{}, feedName interface{}, feedPath interface{}, networkID interface{}, networkName interface{}) *MetricsMock_SetLinkAvailableForPayment_Call {
	return &MetricsMock_SetLinkAvailableForPayment_Call{Call: _e.mock.On("SetLinkAvailableForPayment", amount, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName)}
}

func (_c *MetricsMock_SetLinkAvailableForPayment_Call) Run(run func(amount float64, feedID string, chainID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string)) *MetricsMock_SetLinkAvailableForPayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string), args[6].(string), args[7].(string), args[8].(string))
	})
	return _c
}

func (_c *MetricsMock_SetLinkAvailableForPayment_Call) Return() *MetricsMock_SetLinkAvailableForPayment_Call {
	_c.Call.Return()
	return _c
}

func (_c *MetricsMock_SetLinkAvailableForPayment_Call) RunAndReturn(run func(float64, string, string, string, string, string, string, string, string)) *MetricsMock_SetLinkAvailableForPayment_Call {
	_c.Run(run)
	return _c
}

// SetNodeMetadata provides a mock function with given fields: chainID, networkID, networkName, oracleName, sender
func (_m *MetricsMock) SetNodeMetadata(chainID string, networkID string, networkName string, oracleName string, sender string) {
	_m.Called(chainID, networkID, networkName, oracleName, sender)
}

// MetricsMock_SetNodeMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNodeMetadata'
type MetricsMock_SetNodeMetadata_Call struct {
	*mock.Call
}

// SetNodeMetadata is a helper method to define mock.On call
//   - chainID string
//   - networkID string
//   - networkName string
//   - oracleName string
//   - sender string
func (_e *MetricsMock_Expecter) SetNodeMetadata(chainID interface{}, networkID interface{}, networkName interface{}, oracleName interface{}, sender interface{}) *MetricsMock_SetNodeMetadata_Call {
	return &MetricsMock_SetNodeMetadata_Call{Call: _e.mock.On("SetNodeMetadata", chainID, networkID, networkName, oracleName, sender)}
}

func (_c *MetricsMock_SetNodeMetadata_Call) Run(run func(chainID string, networkID string, networkName string, oracleName string, sender string)) *MetricsMock_SetNodeMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string), args[4].(string))
	})
	return _c
}

func (_c *MetricsMock_SetNodeMetadata_Call) Return() *MetricsMock_SetNodeMetadata_Call {
	_c.Call.Return()
	return _c
}

func (_c *MetricsMock_SetNodeMetadata_Call) RunAndReturn(run func(string, string, string, string, string)) *MetricsMock_SetNodeMetadata_Call {
	_c.Run(run)
	return _c
}

// SetOffchainAggregatorAnswerStalled provides a mock function with given fields: isSet, contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName
func (_m *MetricsMock) SetOffchainAggregatorAnswerStalled(isSet bool, contractAddress string, feedID string, chainID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string) {
	_m.Called(isSet, contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName)
}

// MetricsMock_SetOffchainAggregatorAnswerStalled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOffchainAggregatorAnswerStalled'
type MetricsMock_SetOffchainAggregatorAnswerStalled_Call struct {
	*mock.Call
}

// SetOffchainAggregatorAnswerStalled is a helper method to define mock.On call
//   - isSet bool
//   - contractAddress string
//   - feedID string
//   - chainID string
//   - contractStatus string
//   - contractType string
//   - feedName string
//   - feedPath string
//   - networkID string
//   - networkName string
func (_e *MetricsMock_Expecter) SetOffchainAggregatorAnswerStalled(isSet interface{}, contractAddress interface{}, feedID interface{}, chainID interface{}, contractStatus interface{}, contractType interface{}, feedName interface{}, feedPath interface{}, networkID interface{}, networkName interface{}) *MetricsMock_SetOffchainAggregatorAnswerStalled_Call {
	return &MetricsMock_SetOffchainAggregatorAnswerStalled_Call{Call: _e.mock.On("SetOffchainAggregatorAnswerStalled", isSet, contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName)}
}

func (_c *MetricsMock_SetOffchainAggregatorAnswerStalled_Call) Run(run func(isSet bool, contractAddress string, feedID string, chainID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string)) *MetricsMock_SetOffchainAggregatorAnswerStalled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string), args[6].(string), args[7].(string), args[8].(string), args[9].(string))
	})
	return _c
}

func (_c *MetricsMock_SetOffchainAggregatorAnswerStalled_Call) Return() *MetricsMock_SetOffchainAggregatorAnswerStalled_Call {
	_c.Call.Return()
	return _c
}

func (_c *MetricsMock_SetOffchainAggregatorAnswerStalled_Call) RunAndReturn(run func(bool, string, string, string, string, string, string, string, string, string)) *MetricsMock_SetOffchainAggregatorAnswerStalled_Call {
	_c.Run(run)
	return _c
}

// SetOffchainAggregatorAnswers provides a mock function with given fields: answer, contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName
func (_m *MetricsMock) SetOffchainAggregatorAnswers(answer float64, contractAddress string, feedID string, chainID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string) {
	_m.Called(answer, contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName)
}

// MetricsMock_SetOffchainAggregatorAnswers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOffchainAggregatorAnswers'
type MetricsMock_SetOffchainAggregatorAnswers_Call struct {
	*mock.Call
}

// SetOffchainAggregatorAnswers is a helper method to define mock.On call
//   - answer float64
//   - contractAddress string
//   - feedID string
//   - chainID string
//   - contractStatus string
//   - contractType string
//   - feedName string
//   - feedPath string
//   - networkID string
//   - networkName string
func (_e *MetricsMock_Expecter) SetOffchainAggregatorAnswers(answer interface{}, contractAddress interface{}, feedID interface{}, chainID interface{}, contractStatus interface{}, contractType interface{}, feedName interface{}, feedPath interface{}, networkID interface{}, networkName interface{}) *MetricsMock_SetOffchainAggregatorAnswers_Call {
	return &MetricsMock_SetOffchainAggregatorAnswers_Call{Call: _e.mock.On("SetOffchainAggregatorAnswers", answer, contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName)}
}

func (_c *MetricsMock_SetOffchainAggregatorAnswers_Call) Run(run func(answer float64, contractAddress string, feedID string, chainID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string)) *MetricsMock_SetOffchainAggregatorAnswers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string), args[6].(string), args[7].(string), args[8].(string), args[9].(string))
	})
	return _c
}

func (_c *MetricsMock_SetOffchainAggregatorAnswers_Call) Return() *MetricsMock_SetOffchainAggregatorAnswers_Call {
	_c.Call.Return()
	return _c
}

func (_c *MetricsMock_SetOffchainAggregatorAnswers_Call) RunAndReturn(run func(float64, string, string, string, string, string, string, string, string, string)) *MetricsMock_SetOffchainAggregatorAnswers_Call {
	_c.Run(run)
	return _c
}

// SetOffchainAggregatorAnswersLatestTimestamp provides a mock function with given fields: latestTimestampSeconds, contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName
func (_m *MetricsMock) SetOffchainAggregatorAnswersLatestTimestamp(latestTimestampSeconds float64, contractAddress string, feedID string, chainID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string) {
	_m.Called(latestTimestampSeconds, contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName)
}

// MetricsMock_SetOffchainAggregatorAnswersLatestTimestamp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOffchainAggregatorAnswersLatestTimestamp'
type MetricsMock_SetOffchainAggregatorAnswersLatestTimestamp_Call struct {
	*mock.Call
}

// SetOffchainAggregatorAnswersLatestTimestamp is a helper method to define mock.On call
//   - latestTimestampSeconds float64
//   - contractAddress string
//   - feedID string
//   - chainID string
//   - contractStatus string
//   - contractType string
//   - feedName string
//   - feedPath string
//   - networkID string
//   - networkName string
func (_e *MetricsMock_Expecter) SetOffchainAggregatorAnswersLatestTimestamp(latestTimestampSeconds interface{}, contractAddress interface{}, feedID interface{}, chainID interface{}, contractStatus interface{}, contractType interface{}, feedName interface{}, feedPath interface{}, networkID interface{}, networkName interface{}) *MetricsMock_SetOffchainAggregatorAnswersLatestTimestamp_Call {
	return &MetricsMock_SetOffchainAggregatorAnswersLatestTimestamp_Call{Call: _e.mock.On("SetOffchainAggregatorAnswersLatestTimestamp", latestTimestampSeconds, contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName)}
}

func (_c *MetricsMock_SetOffchainAggregatorAnswersLatestTimestamp_Call) Run(run func(latestTimestampSeconds float64, contractAddress string, feedID string, chainID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string)) *MetricsMock_SetOffchainAggregatorAnswersLatestTimestamp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string), args[6].(string), args[7].(string), args[8].(string), args[9].(string))
	})
	return _c
}

func (_c *MetricsMock_SetOffchainAggregatorAnswersLatestTimestamp_Call) Return() *MetricsMock_SetOffchainAggregatorAnswersLatestTimestamp_Call {
	_c.Call.Return()
	return _c
}

func (_c *MetricsMock_SetOffchainAggregatorAnswersLatestTimestamp_Call) RunAndReturn(run func(float64, string, string, string, string, string, string, string, string, string)) *MetricsMock_SetOffchainAggregatorAnswersLatestTimestamp_Call {
	_c.Run(run)
	return _c
}

// SetOffchainAggregatorAnswersRaw provides a mock function with given fields: answer, contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName
func (_m *MetricsMock) SetOffchainAggregatorAnswersRaw(answer float64, contractAddress string, feedID string, chainID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string) {
	_m.Called(answer, contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName)
}

// MetricsMock_SetOffchainAggregatorAnswersRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOffchainAggregatorAnswersRaw'
type MetricsMock_SetOffchainAggregatorAnswersRaw_Call struct {
	*mock.Call
}

// SetOffchainAggregatorAnswersRaw is a helper method to define mock.On call
//   - answer float64
//   - contractAddress string
//   - feedID string
//   - chainID string
//   - contractStatus string
//   - contractType string
//   - feedName string
//   - feedPath string
//   - networkID string
//   - networkName string
func (_e *MetricsMock_Expecter) SetOffchainAggregatorAnswersRaw(answer interface{}, contractAddress interface{}, feedID interface{}, chainID interface{}, contractStatus interface{}, contractType interface{}, feedName interface{}, feedPath interface{}, networkID interface{}, networkName interface{}) *MetricsMock_SetOffchainAggregatorAnswersRaw_Call {
	return &MetricsMock_SetOffchainAggregatorAnswersRaw_Call{Call: _e.mock.On("SetOffchainAggregatorAnswersRaw", answer, contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName)}
}

func (_c *MetricsMock_SetOffchainAggregatorAnswersRaw_Call) Run(run func(answer float64, contractAddress string, feedID string, chainID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string)) *MetricsMock_SetOffchainAggregatorAnswersRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string), args[6].(string), args[7].(string), args[8].(string), args[9].(string))
	})
	return _c
}

func (_c *MetricsMock_SetOffchainAggregatorAnswersRaw_Call) Return() *MetricsMock_SetOffchainAggregatorAnswersRaw_Call {
	_c.Call.Return()
	return _c
}

func (_c *MetricsMock_SetOffchainAggregatorAnswersRaw_Call) RunAndReturn(run func(float64, string, string, string, string, string, string, string, string, string)) *MetricsMock_SetOffchainAggregatorAnswersRaw_Call {
	_c.Run(run)
	return _c
}

// SetOffchainAggregatorJuelsPerFeeCoin provides a mock function with given fields: juelsPerFeeCoin, contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName
func (_m *MetricsMock) SetOffchainAggregatorJuelsPerFeeCoin(juelsPerFeeCoin float64, contractAddress string, feedID string, chainID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string) {
	_m.Called(juelsPerFeeCoin, contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName)
}

// MetricsMock_SetOffchainAggregatorJuelsPerFeeCoin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOffchainAggregatorJuelsPerFeeCoin'
type MetricsMock_SetOffchainAggregatorJuelsPerFeeCoin_Call struct {
	*mock.Call
}

// SetOffchainAggregatorJuelsPerFeeCoin is a helper method to define mock.On call
//   - juelsPerFeeCoin float64
//   - contractAddress string
//   - feedID string
//   - chainID string
//   - contractStatus string
//   - contractType string
//   - feedName string
//   - feedPath string
//   - networkID string
//   - networkName string
func (_e *MetricsMock_Expecter) SetOffchainAggregatorJuelsPerFeeCoin(juelsPerFeeCoin interface{}, contractAddress interface{}, feedID interface{}, chainID interface{}, contractStatus interface{}, contractType interface{}, feedName interface{}, feedPath interface{}, networkID interface{}, networkName interface{}) *MetricsMock_SetOffchainAggregatorJuelsPerFeeCoin_Call {
	return &MetricsMock_SetOffchainAggregatorJuelsPerFeeCoin_Call{Call: _e.mock.On("SetOffchainAggregatorJuelsPerFeeCoin", juelsPerFeeCoin, contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName)}
}

func (_c *MetricsMock_SetOffchainAggregatorJuelsPerFeeCoin_Call) Run(run func(juelsPerFeeCoin float64, contractAddress string, feedID string, chainID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string)) *MetricsMock_SetOffchainAggregatorJuelsPerFeeCoin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string), args[6].(string), args[7].(string), args[8].(string), args[9].(string))
	})
	return _c
}

func (_c *MetricsMock_SetOffchainAggregatorJuelsPerFeeCoin_Call) Return() *MetricsMock_SetOffchainAggregatorJuelsPerFeeCoin_Call {
	_c.Call.Return()
	return _c
}

func (_c *MetricsMock_SetOffchainAggregatorJuelsPerFeeCoin_Call) RunAndReturn(run func(float64, string, string, string, string, string, string, string, string, string)) *MetricsMock_SetOffchainAggregatorJuelsPerFeeCoin_Call {
	_c.Run(run)
	return _c
}

// SetOffchainAggregatorJuelsPerFeeCoinRaw provides a mock function with given fields: juelsPerFeeCoin, contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName
func (_m *MetricsMock) SetOffchainAggregatorJuelsPerFeeCoinRaw(juelsPerFeeCoin float64, contractAddress string, feedID string, chainID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string) {
	_m.Called(juelsPerFeeCoin, contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName)
}

// MetricsMock_SetOffchainAggregatorJuelsPerFeeCoinRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOffchainAggregatorJuelsPerFeeCoinRaw'
type MetricsMock_SetOffchainAggregatorJuelsPerFeeCoinRaw_Call struct {
	*mock.Call
}

// SetOffchainAggregatorJuelsPerFeeCoinRaw is a helper method to define mock.On call
//   - juelsPerFeeCoin float64
//   - contractAddress string
//   - feedID string
//   - chainID string
//   - contractStatus string
//   - contractType string
//   - feedName string
//   - feedPath string
//   - networkID string
//   - networkName string
func (_e *MetricsMock_Expecter) SetOffchainAggregatorJuelsPerFeeCoinRaw(juelsPerFeeCoin interface{}, contractAddress interface{}, feedID interface{}, chainID interface{}, contractStatus interface{}, contractType interface{}, feedName interface{}, feedPath interface{}, networkID interface{}, networkName interface{}) *MetricsMock_SetOffchainAggregatorJuelsPerFeeCoinRaw_Call {
	return &MetricsMock_SetOffchainAggregatorJuelsPerFeeCoinRaw_Call{Call: _e.mock.On("SetOffchainAggregatorJuelsPerFeeCoinRaw", juelsPerFeeCoin, contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName)}
}

func (_c *MetricsMock_SetOffchainAggregatorJuelsPerFeeCoinRaw_Call) Run(run func(juelsPerFeeCoin float64, contractAddress string, feedID string, chainID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string)) *MetricsMock_SetOffchainAggregatorJuelsPerFeeCoinRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string), args[6].(string), args[7].(string), args[8].(string), args[9].(string))
	})
	return _c
}

func (_c *MetricsMock_SetOffchainAggregatorJuelsPerFeeCoinRaw_Call) Return() *MetricsMock_SetOffchainAggregatorJuelsPerFeeCoinRaw_Call {
	_c.Call.Return()
	return _c
}

func (_c *MetricsMock_SetOffchainAggregatorJuelsPerFeeCoinRaw_Call) RunAndReturn(run func(float64, string, string, string, string, string, string, string, string, string)) *MetricsMock_SetOffchainAggregatorJuelsPerFeeCoinRaw_Call {
	_c.Run(run)
	return _c
}

// SetOffchainAggregatorJuelsPerFeeCoinReceivedValues provides a mock function with given fields: value, contractAddress, feedID, sender, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName
func (_m *MetricsMock) SetOffchainAggregatorJuelsPerFeeCoinReceivedValues(value float64, contractAddress string, feedID string, sender string, chainID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string) {
	_m.Called(value, contractAddress, feedID, sender, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName)
}

// MetricsMock_SetOffchainAggregatorJuelsPerFeeCoinReceivedValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOffchainAggregatorJuelsPerFeeCoinReceivedValues'
type MetricsMock_SetOffchainAggregatorJuelsPerFeeCoinReceivedValues_Call struct {
	*mock.Call
}

// SetOffchainAggregatorJuelsPerFeeCoinReceivedValues is a helper method to define mock.On call
//   - value float64
//   - contractAddress string
//   - feedID string
//   - sender string
//   - chainID string
//   - contractStatus string
//   - contractType string
//   - feedName string
//   - feedPath string
//   - networkID string
//   - networkName string
func (_e *MetricsMock_Expecter) SetOffchainAggregatorJuelsPerFeeCoinReceivedValues(value interface{}, contractAddress interface{}, feedID interface{}, sender interface{}, chainID interface{}, contractStatus interface{}, contractType interface{}, feedName interface{}, feedPath interface{}, networkID interface{}, networkName interface{}) *MetricsMock_SetOffchainAggregatorJuelsPerFeeCoinReceivedValues_Call {
	return &MetricsMock_SetOffchainAggregatorJuelsPerFeeCoinReceivedValues_Call{Call: _e.mock.On("SetOffchainAggregatorJuelsPerFeeCoinReceivedValues", value, contractAddress, feedID, sender, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName)}
}

func (_c *MetricsMock_SetOffchainAggregatorJuelsPerFeeCoinReceivedValues_Call) Run(run func(value float64, contractAddress string, feedID string, sender string, chainID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string)) *MetricsMock_SetOffchainAggregatorJuelsPerFeeCoinReceivedValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string), args[6].(string), args[7].(string), args[8].(string), args[9].(string), args[10].(string))
	})
	return _c
}

func (_c *MetricsMock_SetOffchainAggregatorJuelsPerFeeCoinReceivedValues_Call) Return() *MetricsMock_SetOffchainAggregatorJuelsPerFeeCoinReceivedValues_Call {
	_c.Call.Return()
	return _c
}

func (_c *MetricsMock_SetOffchainAggregatorJuelsPerFeeCoinReceivedValues_Call) RunAndReturn(run func(float64, string, string, string, string, string, string, string, string, string, string)) *MetricsMock_SetOffchainAggregatorJuelsPerFeeCoinReceivedValues_Call {
	_c.Run(run)
	return _c
}

// SetOffchainAggregatorRoundID provides a mock function with given fields: aggregatorRoundID, contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName
func (_m *MetricsMock) SetOffchainAggregatorRoundID(aggregatorRoundID float64, contractAddress string, feedID string, chainID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string) {
	_m.Called(aggregatorRoundID, contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName)
}

// MetricsMock_SetOffchainAggregatorRoundID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOffchainAggregatorRoundID'
type MetricsMock_SetOffchainAggregatorRoundID_Call struct {
	*mock.Call
}

// SetOffchainAggregatorRoundID is a helper method to define mock.On call
//   - aggregatorRoundID float64
//   - contractAddress string
//   - feedID string
//   - chainID string
//   - contractStatus string
//   - contractType string
//   - feedName string
//   - feedPath string
//   - networkID string
//   - networkName string
func (_e *MetricsMock_Expecter) SetOffchainAggregatorRoundID(aggregatorRoundID interface{}, contractAddress interface{}, feedID interface{}, chainID interface{}, contractStatus interface{}, contractType interface{}, feedName interface{}, feedPath interface{}, networkID interface{}, networkName interface{}) *MetricsMock_SetOffchainAggregatorRoundID_Call {
	return &MetricsMock_SetOffchainAggregatorRoundID_Call{Call: _e.mock.On("SetOffchainAggregatorRoundID", aggregatorRoundID, contractAddress, feedID, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName)}
}

func (_c *MetricsMock_SetOffchainAggregatorRoundID_Call) Run(run func(aggregatorRoundID float64, contractAddress string, feedID string, chainID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string)) *MetricsMock_SetOffchainAggregatorRoundID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string), args[6].(string), args[7].(string), args[8].(string), args[9].(string))
	})
	return _c
}

func (_c *MetricsMock_SetOffchainAggregatorRoundID_Call) Return() *MetricsMock_SetOffchainAggregatorRoundID_Call {
	_c.Call.Return()
	return _c
}

func (_c *MetricsMock_SetOffchainAggregatorRoundID_Call) RunAndReturn(run func(float64, string, string, string, string, string, string, string, string, string)) *MetricsMock_SetOffchainAggregatorRoundID_Call {
	_c.Run(run)
	return _c
}

// SetOffchainAggregatorSubmissionReceivedValues provides a mock function with given fields: value, contractAddress, feedID, sender, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName
func (_m *MetricsMock) SetOffchainAggregatorSubmissionReceivedValues(value float64, contractAddress string, feedID string, sender string, chainID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string) {
	_m.Called(value, contractAddress, feedID, sender, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName)
}

// MetricsMock_SetOffchainAggregatorSubmissionReceivedValues_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetOffchainAggregatorSubmissionReceivedValues'
type MetricsMock_SetOffchainAggregatorSubmissionReceivedValues_Call struct {
	*mock.Call
}

// SetOffchainAggregatorSubmissionReceivedValues is a helper method to define mock.On call
//   - value float64
//   - contractAddress string
//   - feedID string
//   - sender string
//   - chainID string
//   - contractStatus string
//   - contractType string
//   - feedName string
//   - feedPath string
//   - networkID string
//   - networkName string
func (_e *MetricsMock_Expecter) SetOffchainAggregatorSubmissionReceivedValues(value interface{}, contractAddress interface{}, feedID interface{}, sender interface{}, chainID interface{}, contractStatus interface{}, contractType interface{}, feedName interface{}, feedPath interface{}, networkID interface{}, networkName interface{}) *MetricsMock_SetOffchainAggregatorSubmissionReceivedValues_Call {
	return &MetricsMock_SetOffchainAggregatorSubmissionReceivedValues_Call{Call: _e.mock.On("SetOffchainAggregatorSubmissionReceivedValues", value, contractAddress, feedID, sender, chainID, contractStatus, contractType, feedName, feedPath, networkID, networkName)}
}

func (_c *MetricsMock_SetOffchainAggregatorSubmissionReceivedValues_Call) Run(run func(value float64, contractAddress string, feedID string, sender string, chainID string, contractStatus string, contractType string, feedName string, feedPath string, networkID string, networkName string)) *MetricsMock_SetOffchainAggregatorSubmissionReceivedValues_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(float64), args[1].(string), args[2].(string), args[3].(string), args[4].(string), args[5].(string), args[6].(string), args[7].(string), args[8].(string), args[9].(string), args[10].(string))
	})
	return _c
}

func (_c *MetricsMock_SetOffchainAggregatorSubmissionReceivedValues_Call) Return() *MetricsMock_SetOffchainAggregatorSubmissionReceivedValues_Call {
	_c.Call.Return()
	return _c
}

func (_c *MetricsMock_SetOffchainAggregatorSubmissionReceivedValues_Call) RunAndReturn(run func(float64, string, string, string, string, string, string, string, string, string, string)) *MetricsMock_SetOffchainAggregatorSubmissionReceivedValues_Call {
	_c.Run(run)
	return _c
}

// NewMetricsMock creates a new instance of MetricsMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMetricsMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *MetricsMock {
	mock := &MetricsMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
