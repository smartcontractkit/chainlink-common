// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	jsonrpc2 "github.com/smartcontractkit/chainlink-common/pkg/jsonrpc2"
	core "github.com/smartcontractkit/chainlink-common/pkg/types/core"

	mock "github.com/stretchr/testify/mock"
)

// GatewayConnector is an autogenerated mock type for the GatewayConnector type
type GatewayConnector struct {
	mock.Mock
}

type GatewayConnector_Expecter struct {
	mock *mock.Mock
}

func (_m *GatewayConnector) EXPECT() *GatewayConnector_Expecter {
	return &GatewayConnector_Expecter{mock: &_m.Mock}
}

// AddHandler provides a mock function with given fields: ctx, methods, handler
func (_m *GatewayConnector) AddHandler(ctx context.Context, methods []string, handler core.GatewayConnectorHandler) error {
	ret := _m.Called(ctx, methods, handler)

	if len(ret) == 0 {
		panic("no return value specified for AddHandler")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, core.GatewayConnectorHandler) error); ok {
		r0 = rf(ctx, methods, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GatewayConnector_AddHandler_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddHandler'
type GatewayConnector_AddHandler_Call struct {
	*mock.Call
}

// AddHandler is a helper method to define mock.On call
//   - ctx context.Context
//   - methods []string
//   - handler core.GatewayConnectorHandler
func (_e *GatewayConnector_Expecter) AddHandler(ctx interface{}, methods interface{}, handler interface{}) *GatewayConnector_AddHandler_Call {
	return &GatewayConnector_AddHandler_Call{Call: _e.mock.On("AddHandler", ctx, methods, handler)}
}

func (_c *GatewayConnector_AddHandler_Call) Run(run func(ctx context.Context, methods []string, handler core.GatewayConnectorHandler)) *GatewayConnector_AddHandler_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].(core.GatewayConnectorHandler))
	})
	return _c
}

func (_c *GatewayConnector_AddHandler_Call) Return(_a0 error) *GatewayConnector_AddHandler_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GatewayConnector_AddHandler_Call) RunAndReturn(run func(context.Context, []string, core.GatewayConnectorHandler) error) *GatewayConnector_AddHandler_Call {
	_c.Call.Return(run)
	return _c
}

// AwaitConnection provides a mock function with given fields: ctx, gatewayID
func (_m *GatewayConnector) AwaitConnection(ctx context.Context, gatewayID string) error {
	ret := _m.Called(ctx, gatewayID)

	if len(ret) == 0 {
		panic("no return value specified for AwaitConnection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, gatewayID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GatewayConnector_AwaitConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AwaitConnection'
type GatewayConnector_AwaitConnection_Call struct {
	*mock.Call
}

// AwaitConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - gatewayID string
func (_e *GatewayConnector_Expecter) AwaitConnection(ctx interface{}, gatewayID interface{}) *GatewayConnector_AwaitConnection_Call {
	return &GatewayConnector_AwaitConnection_Call{Call: _e.mock.On("AwaitConnection", ctx, gatewayID)}
}

func (_c *GatewayConnector_AwaitConnection_Call) Run(run func(ctx context.Context, gatewayID string)) *GatewayConnector_AwaitConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GatewayConnector_AwaitConnection_Call) Return(_a0 error) *GatewayConnector_AwaitConnection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GatewayConnector_AwaitConnection_Call) RunAndReturn(run func(context.Context, string) error) *GatewayConnector_AwaitConnection_Call {
	_c.Call.Return(run)
	return _c
}

// DonID provides a mock function with given fields: ctx
func (_m *GatewayConnector) DonID(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DonID")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GatewayConnector_DonID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DonID'
type GatewayConnector_DonID_Call struct {
	*mock.Call
}

// DonID is a helper method to define mock.On call
//   - ctx context.Context
func (_e *GatewayConnector_Expecter) DonID(ctx interface{}) *GatewayConnector_DonID_Call {
	return &GatewayConnector_DonID_Call{Call: _e.mock.On("DonID", ctx)}
}

func (_c *GatewayConnector_DonID_Call) Run(run func(ctx context.Context)) *GatewayConnector_DonID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *GatewayConnector_DonID_Call) Return(_a0 string, _a1 error) *GatewayConnector_DonID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GatewayConnector_DonID_Call) RunAndReturn(run func(context.Context) (string, error)) *GatewayConnector_DonID_Call {
	_c.Call.Return(run)
	return _c
}

// GatewayIDs provides a mock function with given fields: ctx
func (_m *GatewayConnector) GatewayIDs(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GatewayIDs")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GatewayConnector_GatewayIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GatewayIDs'
type GatewayConnector_GatewayIDs_Call struct {
	*mock.Call
}

// GatewayIDs is a helper method to define mock.On call
//   - ctx context.Context
func (_e *GatewayConnector_Expecter) GatewayIDs(ctx interface{}) *GatewayConnector_GatewayIDs_Call {
	return &GatewayConnector_GatewayIDs_Call{Call: _e.mock.On("GatewayIDs", ctx)}
}

func (_c *GatewayConnector_GatewayIDs_Call) Run(run func(ctx context.Context)) *GatewayConnector_GatewayIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *GatewayConnector_GatewayIDs_Call) Return(_a0 []string, _a1 error) *GatewayConnector_GatewayIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GatewayConnector_GatewayIDs_Call) RunAndReturn(run func(context.Context) ([]string, error)) *GatewayConnector_GatewayIDs_Call {
	_c.Call.Return(run)
	return _c
}

// SendToGateway provides a mock function with given fields: ctx, gatewayID, resp
func (_m *GatewayConnector) SendToGateway(ctx context.Context, gatewayID string, resp *jsonrpc2.Response) error {
	ret := _m.Called(ctx, gatewayID, resp)

	if len(ret) == 0 {
		panic("no return value specified for SendToGateway")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *jsonrpc2.Response) error); ok {
		r0 = rf(ctx, gatewayID, resp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GatewayConnector_SendToGateway_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendToGateway'
type GatewayConnector_SendToGateway_Call struct {
	*mock.Call
}

// SendToGateway is a helper method to define mock.On call
//   - ctx context.Context
//   - gatewayID string
//   - resp *jsonrpc2.Response
func (_e *GatewayConnector_Expecter) SendToGateway(ctx interface{}, gatewayID interface{}, resp interface{}) *GatewayConnector_SendToGateway_Call {
	return &GatewayConnector_SendToGateway_Call{Call: _e.mock.On("SendToGateway", ctx, gatewayID, resp)}
}

func (_c *GatewayConnector_SendToGateway_Call) Run(run func(ctx context.Context, gatewayID string, resp *jsonrpc2.Response)) *GatewayConnector_SendToGateway_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*jsonrpc2.Response))
	})
	return _c
}

func (_c *GatewayConnector_SendToGateway_Call) Return(_a0 error) *GatewayConnector_SendToGateway_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GatewayConnector_SendToGateway_Call) RunAndReturn(run func(context.Context, string, *jsonrpc2.Response) error) *GatewayConnector_SendToGateway_Call {
	_c.Call.Return(run)
	return _c
}

// SignMessage provides a mock function with given fields: ctx, msg
func (_m *GatewayConnector) SignMessage(ctx context.Context, msg []byte) ([]byte, error) {
	ret := _m.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for SignMessage")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []byte) ([]byte, error)); ok {
		return rf(ctx, msg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []byte) []byte); ok {
		r0 = rf(ctx, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GatewayConnector_SignMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignMessage'
type GatewayConnector_SignMessage_Call struct {
	*mock.Call
}

// SignMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - msg []byte
func (_e *GatewayConnector_Expecter) SignMessage(ctx interface{}, msg interface{}) *GatewayConnector_SignMessage_Call {
	return &GatewayConnector_SignMessage_Call{Call: _e.mock.On("SignMessage", ctx, msg)}
}

func (_c *GatewayConnector_SignMessage_Call) Run(run func(ctx context.Context, msg []byte)) *GatewayConnector_SignMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]byte))
	})
	return _c
}

func (_c *GatewayConnector_SignMessage_Call) Return(_a0 []byte, _a1 error) *GatewayConnector_SignMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GatewayConnector_SignMessage_Call) RunAndReturn(run func(context.Context, []byte) ([]byte, error)) *GatewayConnector_SignMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewGatewayConnector creates a new instance of GatewayConnector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGatewayConnector(t interface {
	mock.TestingT
	Cleanup(func())
}) *GatewayConnector {
	mock := &GatewayConnector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
