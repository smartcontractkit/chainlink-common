// Code generated by github.com/smartcontractkit/chainlink-common/pkg/capabilities/cli, DO NOT EDIT.

package nestedaction

import (
	"github.com/smartcontractkit/chainlink-common/pkg/capabilities"
	"github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk"
)

func (cfg ActionConfig) New(w *sdk.WorkflowSpecFactory, ref string, input ActionInput) ActionOutputsCap {

	def := sdk.StepDefinition{
		ID: "nested-test-action@1.0.0", Ref: ref,
		Inputs: input.ToSteps(),
		Config: map[string]any{
			"details": cfg.Details,
		},
		CapabilityType: capabilities.CapabilityTypeAction,
	}

	step := sdk.Step[ActionOutputs]{Definition: def}
	raw := step.AddTo(w)
	return ActionOutputsWrapper(raw)
}

// ActionOutputsWrapper allows access to field from an sdk.CapDefinition[ActionOutputs]
func ActionOutputsWrapper(raw sdk.CapDefinition[ActionOutputs]) ActionOutputsCap {
	wrapped, ok := raw.(ActionOutputsCap)
	if ok {
		return wrapped
	}
	return &actionOutputsCap{CapDefinition: raw}
}

type ActionOutputsCap interface {
	sdk.CapDefinition[ActionOutputs]
	Results() ActionOutputsResultsCap
	private()
}

type actionOutputsCap struct {
	sdk.CapDefinition[ActionOutputs]
}

func (*actionOutputsCap) private() {}
func (c *actionOutputsCap) Results() ActionOutputsResultsCap {
	return ActionOutputsResultsWrapper(sdk.AccessField[ActionOutputs, ActionOutputsResults](c.CapDefinition, "results"))
}

func ConstantActionOutputs(value ActionOutputs) ActionOutputsCap {
	return &actionOutputsCap{CapDefinition: sdk.ConstantDefinition(value)}
}

func NewActionOutputsFromFields(
	results ActionOutputsResultsCap) ActionOutputsCap {
	return &simpleActionOutputs{
		CapDefinition: sdk.ComponentCapDefinition[ActionOutputs]{
			"results": results.Ref(),
		},
		results: results,
	}
}

type simpleActionOutputs struct {
	sdk.CapDefinition[ActionOutputs]
	results ActionOutputsResultsCap
}

func (c *simpleActionOutputs) Results() ActionOutputsResultsCap {
	return c.results
}

func (c *simpleActionOutputs) private() {}

// ActionOutputsResultsWrapper allows access to field from an sdk.CapDefinition[ActionOutputsResults]
func ActionOutputsResultsWrapper(raw sdk.CapDefinition[ActionOutputsResults]) ActionOutputsResultsCap {
	wrapped, ok := raw.(ActionOutputsResultsCap)
	if ok {
		return wrapped
	}
	return &actionOutputsResultsCap{CapDefinition: raw}
}

type ActionOutputsResultsCap interface {
	sdk.CapDefinition[ActionOutputsResults]
	AdaptedThing() sdk.CapDefinition[string]
	private()
}

type actionOutputsResultsCap struct {
	sdk.CapDefinition[ActionOutputsResults]
}

func (*actionOutputsResultsCap) private() {}
func (c *actionOutputsResultsCap) AdaptedThing() sdk.CapDefinition[string] {
	return sdk.AccessField[ActionOutputsResults, string](c.CapDefinition, "adapted_thing")
}

func ConstantActionOutputsResults(value ActionOutputsResults) ActionOutputsResultsCap {
	return &actionOutputsResultsCap{CapDefinition: sdk.ConstantDefinition(value)}
}

func NewActionOutputsResultsFromFields(
	adaptedThing sdk.CapDefinition[string]) ActionOutputsResultsCap {
	return &simpleActionOutputsResults{
		CapDefinition: sdk.ComponentCapDefinition[ActionOutputsResults]{
			"adapted_thing": adaptedThing.Ref(),
		},
		adaptedThing: adaptedThing,
	}
}

type simpleActionOutputsResults struct {
	sdk.CapDefinition[ActionOutputsResults]
	adaptedThing sdk.CapDefinition[string]
}

func (c *simpleActionOutputsResults) AdaptedThing() sdk.CapDefinition[string] {
	return c.adaptedThing
}

func (c *simpleActionOutputsResults) private() {}

type ActionInput struct {
	Metadata sdk.CapDefinition[ActionInputsMetadata]
}

func (input ActionInput) ToSteps() sdk.StepInputs {
	return sdk.StepInputs{
		Mapping: map[string]any{
			"metadata": input.Metadata.Ref(),
		},
	}
}
