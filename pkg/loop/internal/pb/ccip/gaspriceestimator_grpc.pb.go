// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: gaspriceestimator.proto

package ccippb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GasPriceEstimatorExec_GetGasPrice_FullMethodName        = "/loop.internal.pb.ccip.GasPriceEstimatorExec/GetGasPrice"
	GasPriceEstimatorExec_DenoteInUSD_FullMethodName        = "/loop.internal.pb.ccip.GasPriceEstimatorExec/DenoteInUSD"
	GasPriceEstimatorExec_EstimateMsgCostUSD_FullMethodName = "/loop.internal.pb.ccip.GasPriceEstimatorExec/EstimateMsgCostUSD"
	GasPriceEstimatorExec_Median_FullMethodName             = "/loop.internal.pb.ccip.GasPriceEstimatorExec/Median"
)

// GasPriceEstimatorExecClient is the client API for GasPriceEstimatorExec service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// GasPriceEstimatorExec is a gRPC service adapter for the interface
// [github.com/smartcontractkit/chainlink-common/pkg/types/ccip.GasPriceEstimatorExec]
type GasPriceEstimatorExecClient interface {
	GetGasPrice(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetGasPriceResponse, error)
	DenoteInUSD(ctx context.Context, in *DenoteInUSDRequest, opts ...grpc.CallOption) (*DenoteInUSDResponse, error)
	EstimateMsgCostUSD(ctx context.Context, in *EstimateMsgCostUSDRequest, opts ...grpc.CallOption) (*EstimateMsgCostUSDResponse, error)
	// TODO CCIP-1882: reconcile gas price estimator to remove unnecessary interface funcs
	Median(ctx context.Context, in *MedianRequest, opts ...grpc.CallOption) (*MedianResponse, error)
}

type gasPriceEstimatorExecClient struct {
	cc grpc.ClientConnInterface
}

func NewGasPriceEstimatorExecClient(cc grpc.ClientConnInterface) GasPriceEstimatorExecClient {
	return &gasPriceEstimatorExecClient{cc}
}

func (c *gasPriceEstimatorExecClient) GetGasPrice(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetGasPriceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGasPriceResponse)
	err := c.cc.Invoke(ctx, GasPriceEstimatorExec_GetGasPrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasPriceEstimatorExecClient) DenoteInUSD(ctx context.Context, in *DenoteInUSDRequest, opts ...grpc.CallOption) (*DenoteInUSDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DenoteInUSDResponse)
	err := c.cc.Invoke(ctx, GasPriceEstimatorExec_DenoteInUSD_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasPriceEstimatorExecClient) EstimateMsgCostUSD(ctx context.Context, in *EstimateMsgCostUSDRequest, opts ...grpc.CallOption) (*EstimateMsgCostUSDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EstimateMsgCostUSDResponse)
	err := c.cc.Invoke(ctx, GasPriceEstimatorExec_EstimateMsgCostUSD_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasPriceEstimatorExecClient) Median(ctx context.Context, in *MedianRequest, opts ...grpc.CallOption) (*MedianResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MedianResponse)
	err := c.cc.Invoke(ctx, GasPriceEstimatorExec_Median_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GasPriceEstimatorExecServer is the server API for GasPriceEstimatorExec service.
// All implementations must embed UnimplementedGasPriceEstimatorExecServer
// for forward compatibility.
//
// GasPriceEstimatorExec is a gRPC service adapter for the interface
// [github.com/smartcontractkit/chainlink-common/pkg/types/ccip.GasPriceEstimatorExec]
type GasPriceEstimatorExecServer interface {
	GetGasPrice(context.Context, *emptypb.Empty) (*GetGasPriceResponse, error)
	DenoteInUSD(context.Context, *DenoteInUSDRequest) (*DenoteInUSDResponse, error)
	EstimateMsgCostUSD(context.Context, *EstimateMsgCostUSDRequest) (*EstimateMsgCostUSDResponse, error)
	// TODO CCIP-1882: reconcile gas price estimator to remove unnecessary interface funcs
	Median(context.Context, *MedianRequest) (*MedianResponse, error)
	mustEmbedUnimplementedGasPriceEstimatorExecServer()
}

// UnimplementedGasPriceEstimatorExecServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGasPriceEstimatorExecServer struct{}

func (UnimplementedGasPriceEstimatorExecServer) GetGasPrice(context.Context, *emptypb.Empty) (*GetGasPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGasPrice not implemented")
}
func (UnimplementedGasPriceEstimatorExecServer) DenoteInUSD(context.Context, *DenoteInUSDRequest) (*DenoteInUSDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenoteInUSD not implemented")
}
func (UnimplementedGasPriceEstimatorExecServer) EstimateMsgCostUSD(context.Context, *EstimateMsgCostUSDRequest) (*EstimateMsgCostUSDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateMsgCostUSD not implemented")
}
func (UnimplementedGasPriceEstimatorExecServer) Median(context.Context, *MedianRequest) (*MedianResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Median not implemented")
}
func (UnimplementedGasPriceEstimatorExecServer) mustEmbedUnimplementedGasPriceEstimatorExecServer() {}
func (UnimplementedGasPriceEstimatorExecServer) testEmbeddedByValue()                               {}

// UnsafeGasPriceEstimatorExecServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GasPriceEstimatorExecServer will
// result in compilation errors.
type UnsafeGasPriceEstimatorExecServer interface {
	mustEmbedUnimplementedGasPriceEstimatorExecServer()
}

func RegisterGasPriceEstimatorExecServer(s grpc.ServiceRegistrar, srv GasPriceEstimatorExecServer) {
	// If the following call pancis, it indicates UnimplementedGasPriceEstimatorExecServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GasPriceEstimatorExec_ServiceDesc, srv)
}

func _GasPriceEstimatorExec_GetGasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasPriceEstimatorExecServer).GetGasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GasPriceEstimatorExec_GetGasPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasPriceEstimatorExecServer).GetGasPrice(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasPriceEstimatorExec_DenoteInUSD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DenoteInUSDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasPriceEstimatorExecServer).DenoteInUSD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GasPriceEstimatorExec_DenoteInUSD_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasPriceEstimatorExecServer).DenoteInUSD(ctx, req.(*DenoteInUSDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasPriceEstimatorExec_EstimateMsgCostUSD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateMsgCostUSDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasPriceEstimatorExecServer).EstimateMsgCostUSD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GasPriceEstimatorExec_EstimateMsgCostUSD_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasPriceEstimatorExecServer).EstimateMsgCostUSD(ctx, req.(*EstimateMsgCostUSDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasPriceEstimatorExec_Median_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedianRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasPriceEstimatorExecServer).Median(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GasPriceEstimatorExec_Median_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasPriceEstimatorExecServer).Median(ctx, req.(*MedianRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GasPriceEstimatorExec_ServiceDesc is the grpc.ServiceDesc for GasPriceEstimatorExec service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GasPriceEstimatorExec_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.internal.pb.ccip.GasPriceEstimatorExec",
	HandlerType: (*GasPriceEstimatorExecServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGasPrice",
			Handler:    _GasPriceEstimatorExec_GetGasPrice_Handler,
		},
		{
			MethodName: "DenoteInUSD",
			Handler:    _GasPriceEstimatorExec_DenoteInUSD_Handler,
		},
		{
			MethodName: "EstimateMsgCostUSD",
			Handler:    _GasPriceEstimatorExec_EstimateMsgCostUSD_Handler,
		},
		{
			MethodName: "Median",
			Handler:    _GasPriceEstimatorExec_Median_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gaspriceestimator.proto",
}

const (
	GasPriceEstimatorCommit_GetGasPrice_FullMethodName = "/loop.internal.pb.ccip.GasPriceEstimatorCommit/GetGasPrice"
	GasPriceEstimatorCommit_DenoteInUSD_FullMethodName = "/loop.internal.pb.ccip.GasPriceEstimatorCommit/DenoteInUSD"
	GasPriceEstimatorCommit_Median_FullMethodName      = "/loop.internal.pb.ccip.GasPriceEstimatorCommit/Median"
	GasPriceEstimatorCommit_Deviates_FullMethodName    = "/loop.internal.pb.ccip.GasPriceEstimatorCommit/Deviates"
)

// GasPriceEstimatorCommitClient is the client API for GasPriceEstimatorCommit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// GasPriceEstimatorCommit is a gRPC service adapter for the interface
// [github.com/smartcontractkit/chainlink-common/pkg/types/ccip.GasPriceEstimatorCommit]
type GasPriceEstimatorCommitClient interface {
	GetGasPrice(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetGasPriceResponse, error)
	DenoteInUSD(ctx context.Context, in *DenoteInUSDRequest, opts ...grpc.CallOption) (*DenoteInUSDResponse, error)
	// TODO CCIP-1882: reconcile gas price estimator to remove unnecessary interface funcs
	Median(ctx context.Context, in *MedianRequest, opts ...grpc.CallOption) (*MedianResponse, error)
	Deviates(ctx context.Context, in *DeviatesRequest, opts ...grpc.CallOption) (*DeviatesResponse, error)
}

type gasPriceEstimatorCommitClient struct {
	cc grpc.ClientConnInterface
}

func NewGasPriceEstimatorCommitClient(cc grpc.ClientConnInterface) GasPriceEstimatorCommitClient {
	return &gasPriceEstimatorCommitClient{cc}
}

func (c *gasPriceEstimatorCommitClient) GetGasPrice(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetGasPriceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGasPriceResponse)
	err := c.cc.Invoke(ctx, GasPriceEstimatorCommit_GetGasPrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasPriceEstimatorCommitClient) DenoteInUSD(ctx context.Context, in *DenoteInUSDRequest, opts ...grpc.CallOption) (*DenoteInUSDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DenoteInUSDResponse)
	err := c.cc.Invoke(ctx, GasPriceEstimatorCommit_DenoteInUSD_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasPriceEstimatorCommitClient) Median(ctx context.Context, in *MedianRequest, opts ...grpc.CallOption) (*MedianResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MedianResponse)
	err := c.cc.Invoke(ctx, GasPriceEstimatorCommit_Median_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gasPriceEstimatorCommitClient) Deviates(ctx context.Context, in *DeviatesRequest, opts ...grpc.CallOption) (*DeviatesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeviatesResponse)
	err := c.cc.Invoke(ctx, GasPriceEstimatorCommit_Deviates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GasPriceEstimatorCommitServer is the server API for GasPriceEstimatorCommit service.
// All implementations must embed UnimplementedGasPriceEstimatorCommitServer
// for forward compatibility.
//
// GasPriceEstimatorCommit is a gRPC service adapter for the interface
// [github.com/smartcontractkit/chainlink-common/pkg/types/ccip.GasPriceEstimatorCommit]
type GasPriceEstimatorCommitServer interface {
	GetGasPrice(context.Context, *emptypb.Empty) (*GetGasPriceResponse, error)
	DenoteInUSD(context.Context, *DenoteInUSDRequest) (*DenoteInUSDResponse, error)
	// TODO CCIP-1882: reconcile gas price estimator to remove unnecessary interface funcs
	Median(context.Context, *MedianRequest) (*MedianResponse, error)
	Deviates(context.Context, *DeviatesRequest) (*DeviatesResponse, error)
	mustEmbedUnimplementedGasPriceEstimatorCommitServer()
}

// UnimplementedGasPriceEstimatorCommitServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGasPriceEstimatorCommitServer struct{}

func (UnimplementedGasPriceEstimatorCommitServer) GetGasPrice(context.Context, *emptypb.Empty) (*GetGasPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGasPrice not implemented")
}
func (UnimplementedGasPriceEstimatorCommitServer) DenoteInUSD(context.Context, *DenoteInUSDRequest) (*DenoteInUSDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenoteInUSD not implemented")
}
func (UnimplementedGasPriceEstimatorCommitServer) Median(context.Context, *MedianRequest) (*MedianResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Median not implemented")
}
func (UnimplementedGasPriceEstimatorCommitServer) Deviates(context.Context, *DeviatesRequest) (*DeviatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deviates not implemented")
}
func (UnimplementedGasPriceEstimatorCommitServer) mustEmbedUnimplementedGasPriceEstimatorCommitServer() {
}
func (UnimplementedGasPriceEstimatorCommitServer) testEmbeddedByValue() {}

// UnsafeGasPriceEstimatorCommitServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GasPriceEstimatorCommitServer will
// result in compilation errors.
type UnsafeGasPriceEstimatorCommitServer interface {
	mustEmbedUnimplementedGasPriceEstimatorCommitServer()
}

func RegisterGasPriceEstimatorCommitServer(s grpc.ServiceRegistrar, srv GasPriceEstimatorCommitServer) {
	// If the following call pancis, it indicates UnimplementedGasPriceEstimatorCommitServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GasPriceEstimatorCommit_ServiceDesc, srv)
}

func _GasPriceEstimatorCommit_GetGasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasPriceEstimatorCommitServer).GetGasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GasPriceEstimatorCommit_GetGasPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasPriceEstimatorCommitServer).GetGasPrice(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasPriceEstimatorCommit_DenoteInUSD_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DenoteInUSDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasPriceEstimatorCommitServer).DenoteInUSD(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GasPriceEstimatorCommit_DenoteInUSD_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasPriceEstimatorCommitServer).DenoteInUSD(ctx, req.(*DenoteInUSDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasPriceEstimatorCommit_Median_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MedianRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasPriceEstimatorCommitServer).Median(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GasPriceEstimatorCommit_Median_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasPriceEstimatorCommitServer).Median(ctx, req.(*MedianRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GasPriceEstimatorCommit_Deviates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GasPriceEstimatorCommitServer).Deviates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GasPriceEstimatorCommit_Deviates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GasPriceEstimatorCommitServer).Deviates(ctx, req.(*DeviatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GasPriceEstimatorCommit_ServiceDesc is the grpc.ServiceDesc for GasPriceEstimatorCommit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GasPriceEstimatorCommit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.internal.pb.ccip.GasPriceEstimatorCommit",
	HandlerType: (*GasPriceEstimatorCommitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGasPrice",
			Handler:    _GasPriceEstimatorCommit_GetGasPrice_Handler,
		},
		{
			MethodName: "DenoteInUSD",
			Handler:    _GasPriceEstimatorCommit_DenoteInUSD_Handler,
		},
		{
			MethodName: "Median",
			Handler:    _GasPriceEstimatorCommit_Median_Handler,
		},
		{
			MethodName: "Deviates",
			Handler:    _GasPriceEstimatorCommit_Deviates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gaspriceestimator.proto",
}
