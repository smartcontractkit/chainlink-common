// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	types "github.com/smartcontractkit/chainlink-common/pkg/nodeauth/types"
)

// JWTAuthenticator is an autogenerated mock type for the JWTAuthenticator type
type JWTAuthenticator struct {
	mock.Mock
}

type JWTAuthenticator_Expecter struct {
	mock *mock.Mock
}

func (_m *JWTAuthenticator) EXPECT() *JWTAuthenticator_Expecter {
	return &JWTAuthenticator_Expecter{mock: &_m.Mock}
}

// AuthenticateJWT provides a mock function with given fields: ctx, tokenString, originalRequest
func (_m *JWTAuthenticator) AuthenticateJWT(ctx context.Context, tokenString string, originalRequest interface{}) (bool, *types.NodeJWTClaims, error) {
	ret := _m.Called(ctx, tokenString, originalRequest)

	if len(ret) == 0 {
		panic("no return value specified for AuthenticateJWT")
	}

	var r0 bool
	var r1 *types.NodeJWTClaims
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) (bool, *types.NodeJWTClaims, error)); ok {
		return rf(ctx, tokenString, originalRequest)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) bool); ok {
		r0 = rf(ctx, tokenString, originalRequest)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) *types.NodeJWTClaims); ok {
		r1 = rf(ctx, tokenString, originalRequest)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*types.NodeJWTClaims)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, interface{}) error); ok {
		r2 = rf(ctx, tokenString, originalRequest)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// JWTAuthenticator_AuthenticateJWT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthenticateJWT'
type JWTAuthenticator_AuthenticateJWT_Call struct {
	*mock.Call
}

// AuthenticateJWT is a helper method to define mock.On call
//   - ctx context.Context
//   - tokenString string
//   - originalRequest interface{}
func (_e *JWTAuthenticator_Expecter) AuthenticateJWT(ctx interface{}, tokenString interface{}, originalRequest interface{}) *JWTAuthenticator_AuthenticateJWT_Call {
	return &JWTAuthenticator_AuthenticateJWT_Call{Call: _e.mock.On("AuthenticateJWT", ctx, tokenString, originalRequest)}
}

func (_c *JWTAuthenticator_AuthenticateJWT_Call) Run(run func(ctx context.Context, tokenString string, originalRequest interface{})) *JWTAuthenticator_AuthenticateJWT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *JWTAuthenticator_AuthenticateJWT_Call) Return(_a0 bool, _a1 *types.NodeJWTClaims, _a2 error) *JWTAuthenticator_AuthenticateJWT_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *JWTAuthenticator_AuthenticateJWT_Call) RunAndReturn(run func(context.Context, string, interface{}) (bool, *types.NodeJWTClaims, error)) *JWTAuthenticator_AuthenticateJWT_Call {
	_c.Call.Return(run)
	return _c
}

// NewJWTAuthenticator creates a new instance of JWTAuthenticator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJWTAuthenticator(t interface {
	mock.TestingT
	Cleanup(func())
}) *JWTAuthenticator {
	mock := &JWTAuthenticator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
