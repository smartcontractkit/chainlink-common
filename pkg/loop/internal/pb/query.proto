syntax = "proto3";

option go_package = "github.com/smartcontractkit/chainlink-common/pkg/loop/internal/pb";

package loop;
import "codec.proto";

// Expression encapsulates a single unit of filtering logic, which can be a common blockchain primitive or a composite of boolean expressions. 
// This allows for both simple and more complex nested expressions.
message Expression {
  oneof evaluator {
    Primitive primitive = 1;
    BooleanExpression boolean_expression = 2;
  }
}

enum ComparisonOperator {
  Eq = 0;
  Neq = 1;
  Gt = 2;
  Lt = 3;
  Gte = 4;
  Lte = 5;
}

enum BooleanOperator {
  AND = 0;
  OR = 1;
}

message BooleanExpression {
  BooleanOperator boolean_operator = 1;
  repeated Expression expression = 2;
}

message And {
  repeated Expression expr = 1;
}

message Or {
  repeated Expression expr = 1;
}

message ValueComparator  {
  VersionedBytes value = 1;
  ComparisonOperator operator = 2;
}

message Comparator  {
  string name = 1;
  repeated ValueComparator value_comparators = 2;
}

message Block{
  string block_number = 1;
  ComparisonOperator operator = 2;
}

enum Confidence {
  Unconfirmed = 0;
  Finalized = 1;
}

message Timestamp{
  uint64 timestamp = 1;
  ComparisonOperator operator = 2;
}

message TxHash{
  string tx_hash = 1;
}

// Primitive defines the basic building blocks for filter conditions based around fundamental blockchain concepts.
message Primitive {
  oneof primitive {
    Comparator comparator = 1;
    Block block = 2;
    Confidence confidence = 3;
    Timestamp timestamp = 4;
    TxHash tx_hash = 5;
  }
}

// CursorDirection defines the direction for cursor-based data fetching.
enum CursorDirection {
  Preceding = 0;
  Following = 1;
}

// Limit defines a structure for limiting the results of a query, including optional cursor-based pagination.
message Limit {
  optional string cursor = 1;
  optional CursorDirection direction = 2;
  uint64 count = 3;
}

enum SortDirection {
  Asc = 0;
  Desc = 1;
}

enum SortType {
  SortTimestamp = 0;
  SortBlock = 1;
  SortSequence = 2;
}

message SortBy {
  SortType sort_type = 1;
  SortDirection direction = 2;
}

// LimitAndSort combines sorting criteria with pagination limits.
message LimitAndSort {
  repeated SortBy sort_by = 1; // A list of sorting criteria.
  Limit limit = 2; // Pagination limit and direction.
}



