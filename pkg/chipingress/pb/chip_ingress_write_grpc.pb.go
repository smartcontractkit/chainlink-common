// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: pkg/beholder/pb/chip_ingress_write.proto

package pb

import (
	context "context"
	pb "github.com/cloudevents/sdk-go/binding/format/protobuf/v2/pb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChipIngress_Publish_FullMethodName      = "/pb.ChipIngress/Publish"
	ChipIngress_PublishBatch_FullMethodName = "/pb.ChipIngress/PublishBatch"
	ChipIngress_Ping_FullMethodName         = "/pb.ChipIngress/Ping"
)

// ChipIngressClient is the client API for ChipIngress service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ChipIngress service provides a way for senders to produce CloudEvents messages to Kafka
type ChipIngressClient interface {
	Publish(ctx context.Context, in *pb.CloudEvent, opts ...grpc.CallOption) (*PublishResponse, error)
	PublishBatch(ctx context.Context, in *CloudEventBatch, opts ...grpc.CallOption) (*PublishResponse, error)
	Ping(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type chipIngressClient struct {
	cc grpc.ClientConnInterface
}

func NewChipIngressClient(cc grpc.ClientConnInterface) ChipIngressClient {
	return &chipIngressClient{cc}
}

func (c *chipIngressClient) Publish(ctx context.Context, in *pb.CloudEvent, opts ...grpc.CallOption) (*PublishResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, ChipIngress_Publish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chipIngressClient) PublishBatch(ctx context.Context, in *CloudEventBatch, opts ...grpc.CallOption) (*PublishResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, ChipIngress_PublishBatch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chipIngressClient) Ping(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, ChipIngress_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChipIngressServer is the server API for ChipIngress service.
// All implementations must embed UnimplementedChipIngressServer
// for forward compatibility.
//
// ChipIngress service provides a way for senders to produce CloudEvents messages to Kafka
type ChipIngressServer interface {
	Publish(context.Context, *pb.CloudEvent) (*PublishResponse, error)
	PublishBatch(context.Context, *CloudEventBatch) (*PublishResponse, error)
	Ping(context.Context, *EmptyRequest) (*PingResponse, error)
	mustEmbedUnimplementedChipIngressServer()
}

// UnimplementedChipIngressServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChipIngressServer struct{}

func (UnimplementedChipIngressServer) Publish(context.Context, *pb.CloudEvent) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedChipIngressServer) PublishBatch(context.Context, *CloudEventBatch) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishBatch not implemented")
}
func (UnimplementedChipIngressServer) Ping(context.Context, *EmptyRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedChipIngressServer) mustEmbedUnimplementedChipIngressServer() {}
func (UnimplementedChipIngressServer) testEmbeddedByValue()                     {}

// UnsafeChipIngressServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChipIngressServer will
// result in compilation errors.
type UnsafeChipIngressServer interface {
	mustEmbedUnimplementedChipIngressServer()
}

func RegisterChipIngressServer(s grpc.ServiceRegistrar, srv ChipIngressServer) {
	// If the following call pancis, it indicates UnimplementedChipIngressServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChipIngress_ServiceDesc, srv)
}

func _ChipIngress_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.CloudEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChipIngressServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChipIngress_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChipIngressServer).Publish(ctx, req.(*pb.CloudEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChipIngress_PublishBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudEventBatch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChipIngressServer).PublishBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChipIngress_PublishBatch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChipIngressServer).PublishBatch(ctx, req.(*CloudEventBatch))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChipIngress_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChipIngressServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChipIngress_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChipIngressServer).Ping(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChipIngress_ServiceDesc is the grpc.ServiceDesc for ChipIngress service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChipIngress_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ChipIngress",
	HandlerType: (*ChipIngressServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _ChipIngress_Publish_Handler,
		},
		{
			MethodName: "PublishBatch",
			Handler:    _ChipIngress_PublishBatch_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _ChipIngress_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/beholder/pb/chip_ingress_write.proto",
}
