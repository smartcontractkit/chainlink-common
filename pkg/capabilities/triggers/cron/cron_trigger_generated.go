// Code generated by github.com/smartcontractkit/chainlink-common/pkg/capabilities/cli, DO NOT EDIT.

package cron

import (
	"encoding/json"
	"fmt"
)

type Config struct {
	// Schedule corresponds to the JSON schema field "schedule".
	Schedule string `json:"schedule" yaml:"schedule" mapstructure:"schedule"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Config) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["schedule"]; raw != nil && !ok {
		return fmt.Errorf("field schedule in Config: required")
	}
	type Plain Config
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Config(plain)
	return nil
}

type Payload struct {
	// Time that cron trigger's task execution occurred (RFC3339Nano formatted)
	ActualExecutionTime string `json:"ActualExecutionTime" yaml:"ActualExecutionTime" mapstructure:"ActualExecutionTime"`

	// Time that cron trigger's task execution had been scheduled to occur
	// (RFC3339Nano formatted)
	ScheduledExecutionTime string `json:"ScheduledExecutionTime" yaml:"ScheduledExecutionTime" mapstructure:"ScheduledExecutionTime"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Payload) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["ActualExecutionTime"]; raw != nil && !ok {
		return fmt.Errorf("field ActualExecutionTime in Payload: required")
	}
	if _, ok := raw["ScheduledExecutionTime"]; raw != nil && !ok {
		return fmt.Errorf("field ScheduledExecutionTime in Payload: required")
	}
	type Plain Payload
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Payload(plain)
	return nil
}

// A trigger that uses a cron schedule to run periodically at fixed times, dates,
// or intervals.
type Trigger struct {
	// Config corresponds to the JSON schema field "config".
	Config Config `json:"config" yaml:"config" mapstructure:"config"`

	// Outputs corresponds to the JSON schema field "outputs".
	Outputs Payload `json:"outputs" yaml:"outputs" mapstructure:"outputs"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Trigger) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if _, ok := raw["config"]; raw != nil && !ok {
		return fmt.Errorf("field config in Trigger: required")
	}
	if _, ok := raw["outputs"]; raw != nil && !ok {
		return fmt.Errorf("field outputs in Trigger: required")
	}
	type Plain Trigger
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Trigger(plain)
	return nil
}
