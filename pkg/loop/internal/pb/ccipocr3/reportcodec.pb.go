// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: reportcodec.proto

package ccipocr3pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EncodeCommitPluginReportInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Report        *CommitPluginReport    `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncodeCommitPluginReportInput) Reset() {
	*x = EncodeCommitPluginReportInput{}
	mi := &file_reportcodec_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncodeCommitPluginReportInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodeCommitPluginReportInput) ProtoMessage() {}

func (x *EncodeCommitPluginReportInput) ProtoReflect() protoreflect.Message {
	mi := &file_reportcodec_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodeCommitPluginReportInput.ProtoReflect.Descriptor instead.
func (*EncodeCommitPluginReportInput) Descriptor() ([]byte, []int) {
	return file_reportcodec_proto_rawDescGZIP(), []int{0}
}

func (x *EncodeCommitPluginReportInput) GetReport() *CommitPluginReport {
	if x != nil {
		return x.Report
	}
	return nil
}

type EncodeCommitPluginReportOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EncodedReport []byte                 `protobuf:"bytes,1,opt,name=encoded_report,json=encodedReport,proto3" json:"encoded_report,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncodeCommitPluginReportOutput) Reset() {
	*x = EncodeCommitPluginReportOutput{}
	mi := &file_reportcodec_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncodeCommitPluginReportOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodeCommitPluginReportOutput) ProtoMessage() {}

func (x *EncodeCommitPluginReportOutput) ProtoReflect() protoreflect.Message {
	mi := &file_reportcodec_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodeCommitPluginReportOutput.ProtoReflect.Descriptor instead.
func (*EncodeCommitPluginReportOutput) Descriptor() ([]byte, []int) {
	return file_reportcodec_proto_rawDescGZIP(), []int{1}
}

func (x *EncodeCommitPluginReportOutput) GetEncodedReport() []byte {
	if x != nil {
		return x.EncodedReport
	}
	return nil
}

type DecodeCommitPluginReportInput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EncodedReport []byte                 `protobuf:"bytes,1,opt,name=encoded_report,json=encodedReport,proto3" json:"encoded_report,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecodeCommitPluginReportInput) Reset() {
	*x = DecodeCommitPluginReportInput{}
	mi := &file_reportcodec_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecodeCommitPluginReportInput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeCommitPluginReportInput) ProtoMessage() {}

func (x *DecodeCommitPluginReportInput) ProtoReflect() protoreflect.Message {
	mi := &file_reportcodec_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeCommitPluginReportInput.ProtoReflect.Descriptor instead.
func (*DecodeCommitPluginReportInput) Descriptor() ([]byte, []int) {
	return file_reportcodec_proto_rawDescGZIP(), []int{2}
}

func (x *DecodeCommitPluginReportInput) GetEncodedReport() []byte {
	if x != nil {
		return x.EncodedReport
	}
	return nil
}

type DecodeCommitPluginReportOutput struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Report        *CommitPluginReport    `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecodeCommitPluginReportOutput) Reset() {
	*x = DecodeCommitPluginReportOutput{}
	mi := &file_reportcodec_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecodeCommitPluginReportOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeCommitPluginReportOutput) ProtoMessage() {}

func (x *DecodeCommitPluginReportOutput) ProtoReflect() protoreflect.Message {
	mi := &file_reportcodec_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeCommitPluginReportOutput.ProtoReflect.Descriptor instead.
func (*DecodeCommitPluginReportOutput) Descriptor() ([]byte, []int) {
	return file_reportcodec_proto_rawDescGZIP(), []int{3}
}

func (x *DecodeCommitPluginReportOutput) GetReport() *CommitPluginReport {
	if x != nil {
		return x.Report
	}
	return nil
}

var File_reportcodec_proto protoreflect.FileDescriptor

const file_reportcodec_proto_rawDesc = "" +
	"\n" +
	"\x11reportcodec.proto\x12\x19loop.internal.pb.ccipocr3\x1a\fmodels.proto\"f\n" +
	"\x1dEncodeCommitPluginReportInput\x12E\n" +
	"\x06report\x18\x01 \x01(\v2-.loop.internal.pb.ccipocr3.CommitPluginReportR\x06report\"G\n" +
	"\x1eEncodeCommitPluginReportOutput\x12%\n" +
	"\x0eencoded_report\x18\x01 \x01(\fR\rencodedReport\"F\n" +
	"\x1dDecodeCommitPluginReportInput\x12%\n" +
	"\x0eencoded_report\x18\x01 \x01(\fR\rencodedReport\"g\n" +
	"\x1eDecodeCommitPluginReportOutput\x12E\n" +
	"\x06report\x18\x01 \x01(\v2-.loop.internal.pb.ccipocr3.CommitPluginReportR\x06report2\x95\x02\n" +
	"\x11CommitPluginCodec\x12\x7f\n" +
	"\x06Encode\x128.loop.internal.pb.ccipocr3.EncodeCommitPluginReportInput\x1a9.loop.internal.pb.ccipocr3.EncodeCommitPluginReportOutput\"\x00\x12\x7f\n" +
	"\x06Decode\x128.loop.internal.pb.ccipocr3.DecodeCommitPluginReportInput\x1a9.loop.internal.pb.ccipocr3.EncodeCommitPluginReportOutput\"\x00BWZUgithub.com/smartcontractkit/chainlink-common/pkg/loop/internal/pb/ccipocr3;ccipocr3pbb\x06proto3"

var (
	file_reportcodec_proto_rawDescOnce sync.Once
	file_reportcodec_proto_rawDescData []byte
)

func file_reportcodec_proto_rawDescGZIP() []byte {
	file_reportcodec_proto_rawDescOnce.Do(func() {
		file_reportcodec_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_reportcodec_proto_rawDesc), len(file_reportcodec_proto_rawDesc)))
	})
	return file_reportcodec_proto_rawDescData
}

var file_reportcodec_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_reportcodec_proto_goTypes = []any{
	(*EncodeCommitPluginReportInput)(nil),  // 0: loop.internal.pb.ccipocr3.EncodeCommitPluginReportInput
	(*EncodeCommitPluginReportOutput)(nil), // 1: loop.internal.pb.ccipocr3.EncodeCommitPluginReportOutput
	(*DecodeCommitPluginReportInput)(nil),  // 2: loop.internal.pb.ccipocr3.DecodeCommitPluginReportInput
	(*DecodeCommitPluginReportOutput)(nil), // 3: loop.internal.pb.ccipocr3.DecodeCommitPluginReportOutput
	(*CommitPluginReport)(nil),             // 4: loop.internal.pb.ccipocr3.CommitPluginReport
}
var file_reportcodec_proto_depIdxs = []int32{
	4, // 0: loop.internal.pb.ccipocr3.EncodeCommitPluginReportInput.report:type_name -> loop.internal.pb.ccipocr3.CommitPluginReport
	4, // 1: loop.internal.pb.ccipocr3.DecodeCommitPluginReportOutput.report:type_name -> loop.internal.pb.ccipocr3.CommitPluginReport
	0, // 2: loop.internal.pb.ccipocr3.CommitPluginCodec.Encode:input_type -> loop.internal.pb.ccipocr3.EncodeCommitPluginReportInput
	2, // 3: loop.internal.pb.ccipocr3.CommitPluginCodec.Decode:input_type -> loop.internal.pb.ccipocr3.DecodeCommitPluginReportInput
	1, // 4: loop.internal.pb.ccipocr3.CommitPluginCodec.Encode:output_type -> loop.internal.pb.ccipocr3.EncodeCommitPluginReportOutput
	1, // 5: loop.internal.pb.ccipocr3.CommitPluginCodec.Decode:output_type -> loop.internal.pb.ccipocr3.EncodeCommitPluginReportOutput
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_reportcodec_proto_init() }
func file_reportcodec_proto_init() {
	if File_reportcodec_proto != nil {
		return
	}
	file_models_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_reportcodec_proto_rawDesc), len(file_reportcodec_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_reportcodec_proto_goTypes,
		DependencyIndexes: file_reportcodec_proto_depIdxs,
		MessageInfos:      file_reportcodec_proto_msgTypes,
	}.Build()
	File_reportcodec_proto = out.File
	file_reportcodec_proto_goTypes = nil
	file_reportcodec_proto_depIdxs = nil
}
