syntax = "proto3";

option go_package = "github.com/smartcontractkit/chainlink-common/pkg/loop/chain-capabilities/evm;evm";

package loop.chain_capabilities.evm;

import "google/protobuf/empty.proto";
import "capabilities/v2/protoc/pkg/pb/cre_metadata.proto";
import "loop/internal/pb/evm/evm.proto";

service EVM {
  option (cre.metadata.capability) = {
    mode: DON
    capability_id: "mainnet-evm@1.0.0"
  };
  rpc CallContract(loop.evm.CallContractRequest) returns (loop.evm.CallContractReply);
  rpc FilterLogs(loop.evm.FilterLogsRequest) returns (loop.evm.FilterLogsReply);
  rpc BalanceAt(loop.evm.BalanceAtRequest) returns (loop.evm.BalanceAtReply);
  rpc EstimateGas(loop.evm.EstimateGasRequest) returns (loop.evm.EstimateGasReply);
  rpc GetTransactionByHash(loop.evm.GetTransactionByHashRequest) returns (loop.evm.GetTransactionByHashReply);
  rpc GetTransactionReceipt(loop.evm.GetTransactionReceiptRequest) returns (loop.evm.GetTransactionReceiptReply);
  rpc LatestAndFinalizedHead(google.protobuf.Empty) returns (loop.evm.LatestAndFinalizedHeadReply);
  rpc QueryTrackedLogs(loop.evm.QueryTrackedLogsRequest) returns (loop.evm.QueryTrackedLogsReply);
  rpc RegisterLogTracking(loop.evm.RegisterLogTrackingRequest) returns (google.protobuf.Empty);
  rpc UnregisterLogTracking(loop.evm.UnregisterLogTrackingRequest) returns (google.protobuf.Empty);
}
