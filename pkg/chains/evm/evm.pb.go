// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: evm.proto

package evm

import (
	chain_common "github.com/smartcontractkit/chainlink-common/pkg/loop/chain-common"
	pb "github.com/smartcontractkit/chainlink-common/pkg/values/pb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TxStatus int32

const (
	TxStatus_TX_FATAL    TxStatus = 0
	TxStatus_TX_REVERTED TxStatus = 1
	TxStatus_TX_SUCCESS  TxStatus = 2
)

// Enum value maps for TxStatus.
var (
	TxStatus_name = map[int32]string{
		0: "TX_FATAL",
		1: "TX_REVERTED",
		2: "TX_SUCCESS",
	}
	TxStatus_value = map[string]int32{
		"TX_FATAL":    0,
		"TX_REVERTED": 1,
		"TX_SUCCESS":  2,
	}
)

func (x TxStatus) Enum() *TxStatus {
	p := new(TxStatus)
	*p = x
	return p
}

func (x TxStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_evm_proto_enumTypes[0].Descriptor()
}

func (TxStatus) Type() protoreflect.EnumType {
	return &file_evm_proto_enumTypes[0]
}

func (x TxStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxStatus.Descriptor instead.
func (TxStatus) EnumDescriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{0}
}

// TransactionStatus is an enum for the status of a transaction.
// This should always be a 1-1 mapping to: [github.com/smartcontractkit/chainlink-common/pkg/types.TransactionStatus].
type TransactionStatus int32

const (
	TransactionStatus_TRANSACTION_STATUS_UNKNOWN     TransactionStatus = 0
	TransactionStatus_TRANSACTION_STATUS_PENDING     TransactionStatus = 1
	TransactionStatus_TRANSACTION_STATUS_UNCONFIRMED TransactionStatus = 2
	TransactionStatus_TRANSACTION_STATUS_FINALIZED   TransactionStatus = 3
	TransactionStatus_TRANSACTION_STATUS_FAILED      TransactionStatus = 4
	TransactionStatus_TRANSACTION_STATUS_FATAL       TransactionStatus = 5
)

// Enum value maps for TransactionStatus.
var (
	TransactionStatus_name = map[int32]string{
		0: "TRANSACTION_STATUS_UNKNOWN",
		1: "TRANSACTION_STATUS_PENDING",
		2: "TRANSACTION_STATUS_UNCONFIRMED",
		3: "TRANSACTION_STATUS_FINALIZED",
		4: "TRANSACTION_STATUS_FAILED",
		5: "TRANSACTION_STATUS_FATAL",
	}
	TransactionStatus_value = map[string]int32{
		"TRANSACTION_STATUS_UNKNOWN":     0,
		"TRANSACTION_STATUS_PENDING":     1,
		"TRANSACTION_STATUS_UNCONFIRMED": 2,
		"TRANSACTION_STATUS_FINALIZED":   3,
		"TRANSACTION_STATUS_FAILED":      4,
		"TRANSACTION_STATUS_FATAL":       5,
	}
)

func (x TransactionStatus) Enum() *TransactionStatus {
	p := new(TransactionStatus)
	*p = x
	return p
}

func (x TransactionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_evm_proto_enumTypes[1].Descriptor()
}

func (TransactionStatus) Type() protoreflect.EnumType {
	return &file_evm_proto_enumTypes[1]
}

func (x TransactionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionStatus.Descriptor instead.
func (TransactionStatus) EnumDescriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{1}
}

// represents simplified evm-style CallMsg
type CallMsg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	From          []byte                 `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"` // sender address in evm address [20]byte fix-sized array format
	To            []byte                 `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`     // contract address in evm address [20]byte fix-sized array format
	Data          []byte                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"` // solidity-spec abi encoded bytes
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CallMsg) Reset() {
	*x = CallMsg{}
	mi := &file_evm_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallMsg) ProtoMessage() {}

func (x *CallMsg) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallMsg.ProtoReflect.Descriptor instead.
func (*CallMsg) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{0}
}

func (x *CallMsg) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *CallMsg) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *CallMsg) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Topics struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Topic         [][]byte               `protobuf:"bytes,1,rep,name=topic,proto3" json:"topic,omitempty"` // in [32]byte fix-sized array format
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Topics) Reset() {
	*x = Topics{}
	mi := &file_evm_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Topics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topics) ProtoMessage() {}

func (x *Topics) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topics.ProtoReflect.Descriptor instead.
func (*Topics) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{1}
}

func (x *Topics) GetTopic() [][]byte {
	if x != nil {
		return x.Topic
	}
	return nil
}

// represents evm-style log
type Log struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       []byte                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`                            // address of the contract emitted the log in evm address [20]byte fix-sized array format
	Topics        [][]byte               `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`                              // indexed log fields, in [32]byte fix-sized array format
	TxHash        []byte                 `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`                // hash of the transaction containing the log, in [32]byte fix-sized array format
	BlockHash     []byte                 `protobuf:"bytes,4,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`       // hash of the block containing the log, in [32]byte fix-sized array format
	Data          []byte                 `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`                                  // solidity-spec abi encoded log Data
	EventSig      []byte                 `protobuf:"bytes,6,opt,name=eventSig,proto3" json:"eventSig,omitempty"`                          // keccak256 of event signature, in [32]byte fix-sized array format
	BlockNumber   *pb.BigInt             `protobuf:"bytes,7,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"` // block number containing the log
	TxIndex       uint32                 `protobuf:"varint,8,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`            // index of transaction emmited the log
	Index         uint32                 `protobuf:"varint,9,opt,name=index,proto3" json:"index,omitempty"`                               // index of the Log within the intire block
	Removed       bool                   `protobuf:"varint,10,opt,name=removed,proto3" json:"removed,omitempty"`                          // flag if the log was removed during reorg
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Log) Reset() {
	*x = Log{}
	mi := &file_evm_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{2}
}

func (x *Log) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Log) GetTopics() [][]byte {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *Log) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *Log) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *Log) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Log) GetEventSig() []byte {
	if x != nil {
		return x.EventSig
	}
	return nil
}

func (x *Log) GetBlockNumber() *pb.BigInt {
	if x != nil {
		return x.BlockNumber
	}
	return nil
}

func (x *Log) GetTxIndex() uint32 {
	if x != nil {
		return x.TxIndex
	}
	return 0
}

func (x *Log) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Log) GetRemoved() bool {
	if x != nil {
		return x.Removed
	}
	return false
}

// represents evm-style filter query
type FilterQuery struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockHash     []byte                 `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"` // exact block (cant use from/to), in [32]byte fix-sized array format
	FromBlock     *pb.BigInt             `protobuf:"bytes,2,opt,name=fromBlock,proto3" json:"fromBlock,omitempty"`                  // start block range
	ToBlock       *pb.BigInt             `protobuf:"bytes,3,opt,name=toBlock,proto3" json:"toBlock,omitempty"`                      // end block range
	Addresses     [][]byte               `protobuf:"bytes,4,rep,name=addresses,proto3" json:"addresses,omitempty"`                  // contract(s) to filter logs from in evm address [20]byte fix-sized array format
	Topics        []*Topics              `protobuf:"bytes,5,rep,name=topics,proto3" json:"topics,omitempty"`                        // filter log by event signature and indexed args
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilterQuery) Reset() {
	*x = FilterQuery{}
	mi := &file_evm_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterQuery) ProtoMessage() {}

func (x *FilterQuery) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterQuery.ProtoReflect.Descriptor instead.
func (*FilterQuery) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{3}
}

func (x *FilterQuery) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *FilterQuery) GetFromBlock() *pb.BigInt {
	if x != nil {
		return x.FromBlock
	}
	return nil
}

func (x *FilterQuery) GetToBlock() *pb.BigInt {
	if x != nil {
		return x.ToBlock
	}
	return nil
}

func (x *FilterQuery) GetAddresses() [][]byte {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *FilterQuery) GetTopics() []*Topics {
	if x != nil {
		return x.Topics
	}
	return nil
}

// represents evm-style transaction
type Transaction struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nonce         uint64                 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`                      // number of txs sent from sender
	Gas           uint64                 `protobuf:"varint,2,opt,name=gas,proto3" json:"gas,omitempty"`                          // max gas allowed per execution (in gas units)
	To            []byte                 `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`                             // recipient address in evm address [20]byte fix-sized array format
	Data          []byte                 `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`                         // solidity-spec abi encoded input data for function call payload
	Hash          []byte                 `protobuf:"bytes,5,opt,name=hash,proto3" json:"hash,omitempty"`                         // transaction hash, in [32]byte fix-sized array format
	Value         *pb.BigInt             `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`                       // amount of eth sent in wei
	GasPrice      *pb.BigInt             `protobuf:"bytes,7,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"` // price for a single gas unit in wei
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	mi := &file_evm_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{4}
}

func (x *Transaction) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *Transaction) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *Transaction) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *Transaction) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Transaction) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Transaction) GetValue() *pb.BigInt {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Transaction) GetGasPrice() *pb.BigInt {
	if x != nil {
		return x.GasPrice
	}
	return nil
}

// represents evm-style receipt
type Receipt struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Status            uint64                 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`                                                 // 1 for success 0 for failure
	GasUsed           uint64                 `protobuf:"varint,2,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`                                // gas used by this transaction (in gas units)
	TxIndex           uint64                 `protobuf:"varint,3,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`                                // index of the transaction inside of the block
	BlockHash         []byte                 `protobuf:"bytes,4,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`                           // block hash containing the transaction
	Logs              []*Log                 `protobuf:"bytes,6,rep,name=logs,proto3" json:"logs,omitempty"`                                                      // logs emitted by this transaction
	TxHash            []byte                 `protobuf:"bytes,7,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`                                    // hash of the transaction this receipt is for, in [32]byte fix-sized array format
	EffectiveGasPrice *pb.BigInt             `protobuf:"bytes,8,opt,name=effective_gas_price,json=effectiveGasPrice,proto3" json:"effective_gas_price,omitempty"` // actual gas price paid in wei (include after EIP-1559)
	BlockNumber       *pb.BigInt             `protobuf:"bytes,9,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`                     // block number containing the transaction
	ContractAddress   []byte                 `protobuf:"bytes,10,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`        // address of the contract if this transaction created one in evm address [20]byte fix-sized array format
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Receipt) Reset() {
	*x = Receipt{}
	mi := &file_evm_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Receipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Receipt) ProtoMessage() {}

func (x *Receipt) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Receipt.ProtoReflect.Descriptor instead.
func (*Receipt) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{5}
}

func (x *Receipt) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Receipt) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *Receipt) GetTxIndex() uint64 {
	if x != nil {
		return x.TxIndex
	}
	return 0
}

func (x *Receipt) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *Receipt) GetLogs() []*Log {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *Receipt) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *Receipt) GetEffectiveGasPrice() *pb.BigInt {
	if x != nil {
		return x.EffectiveGasPrice
	}
	return nil
}

func (x *Receipt) GetBlockNumber() *pb.BigInt {
	if x != nil {
		return x.BlockNumber
	}
	return nil
}

func (x *Receipt) GetContractAddress() []byte {
	if x != nil {
		return x.ContractAddress
	}
	return nil
}

// represents filter for polling and caching logs
type LPFilter struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MaxLogsKept   uint64                 `protobuf:"varint,1,opt,name=max_logs_kept,json=maxLogsKept,proto3" json:"max_logs_kept,omitempty"`     // maximum number of logs to retain ( 0 = unlimited )
	RetentionTime int64                  `protobuf:"varint,2,opt,name=retention_time,json=retentionTime,proto3" json:"retention_time,omitempty"` // maximum amount of time to retain logs in seconds
	LogsPerBlock  uint64                 `protobuf:"varint,3,opt,name=logs_per_block,json=logsPerBlock,proto3" json:"logs_per_block,omitempty"`  // rate limit ( maximum # of logs per block, 0 = unlimited )
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                                         // filter name, has to persist for removing filter
	Addresses     [][]byte               `protobuf:"bytes,5,rep,name=addresses,proto3" json:"addresses,omitempty"`                               // list of addresses to include in evm address [20]byte fix-sized array format
	EventSigs     [][]byte               `protobuf:"bytes,6,rep,name=event_sigs,json=eventSigs,proto3" json:"event_sigs,omitempty"`              // list of possible signatures (aka topic1), in [32]byte fix-sized array format
	Topic2        [][]byte               `protobuf:"bytes,7,rep,name=topic2,proto3" json:"topic2,omitempty"`                                     // list of possible values for topic2, in [32]byte fix-sized array format
	Topic3        [][]byte               `protobuf:"bytes,8,rep,name=topic3,proto3" json:"topic3,omitempty"`                                     // list of possible values for topic3, in [32]byte fix-sized array format
	Topic4        [][]byte               `protobuf:"bytes,9,rep,name=topic4,proto3" json:"topic4,omitempty"`                                     // list of possible values for topic4, in [32]byte fix-sized array format
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LPFilter) Reset() {
	*x = LPFilter{}
	mi := &file_evm_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LPFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LPFilter) ProtoMessage() {}

func (x *LPFilter) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LPFilter.ProtoReflect.Descriptor instead.
func (*LPFilter) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{6}
}

func (x *LPFilter) GetMaxLogsKept() uint64 {
	if x != nil {
		return x.MaxLogsKept
	}
	return 0
}

func (x *LPFilter) GetRetentionTime() int64 {
	if x != nil {
		return x.RetentionTime
	}
	return 0
}

func (x *LPFilter) GetLogsPerBlock() uint64 {
	if x != nil {
		return x.LogsPerBlock
	}
	return 0
}

func (x *LPFilter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LPFilter) GetAddresses() [][]byte {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *LPFilter) GetEventSigs() [][]byte {
	if x != nil {
		return x.EventSigs
	}
	return nil
}

func (x *LPFilter) GetTopic2() [][]byte {
	if x != nil {
		return x.Topic2
	}
	return nil
}

func (x *LPFilter) GetTopic3() [][]byte {
	if x != nil {
		return x.Topic3
	}
	return nil
}

func (x *LPFilter) GetTopic4() [][]byte {
	if x != nil {
		return x.Topic4
	}
	return nil
}

type Head struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     uint64                 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // unix timestamp
	BlockNumber   *pb.BigInt             `protobuf:"bytes,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Hash          []byte                 `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`                               // in [32]byte fix-sized array format
	ParentHash    []byte                 `protobuf:"bytes,4,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"` // in [32]byte fix-sized array format
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Head) Reset() {
	*x = Head{}
	mi := &file_evm_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Head) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Head) ProtoMessage() {}

func (x *Head) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Head.ProtoReflect.Descriptor instead.
func (*Head) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{7}
}

func (x *Head) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Head) GetBlockNumber() *pb.BigInt {
	if x != nil {
		return x.BlockNumber
	}
	return nil
}

func (x *Head) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Head) GetParentHash() []byte {
	if x != nil {
		return x.ParentHash
	}
	return nil
}

type Expression struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Evaluator:
	//
	//	*Expression_Primitive
	//	*Expression_BooleanExpression
	Evaluator     isExpression_Evaluator `protobuf_oneof:"evaluator"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Expression) Reset() {
	*x = Expression{}
	mi := &file_evm_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Expression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression) ProtoMessage() {}

func (x *Expression) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression.ProtoReflect.Descriptor instead.
func (*Expression) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{8}
}

func (x *Expression) GetEvaluator() isExpression_Evaluator {
	if x != nil {
		return x.Evaluator
	}
	return nil
}

func (x *Expression) GetPrimitive() *Primitive {
	if x != nil {
		if x, ok := x.Evaluator.(*Expression_Primitive); ok {
			return x.Primitive
		}
	}
	return nil
}

func (x *Expression) GetBooleanExpression() *BooleanExpression {
	if x != nil {
		if x, ok := x.Evaluator.(*Expression_BooleanExpression); ok {
			return x.BooleanExpression
		}
	}
	return nil
}

type isExpression_Evaluator interface {
	isExpression_Evaluator()
}

type Expression_Primitive struct {
	Primitive *Primitive `protobuf:"bytes,1,opt,name=primitive,proto3,oneof"`
}

type Expression_BooleanExpression struct {
	BooleanExpression *BooleanExpression `protobuf:"bytes,2,opt,name=boolean_expression,json=booleanExpression,proto3,oneof"`
}

func (*Expression_Primitive) isExpression_Evaluator() {}

func (*Expression_BooleanExpression) isExpression_Evaluator() {}

type BooleanExpression struct {
	state           protoimpl.MessageState       `protogen:"open.v1"`
	BooleanOperator chain_common.BooleanOperator `protobuf:"varint,1,opt,name=boolean_operator,json=booleanOperator,proto3,enum=loop.chain.common.BooleanOperator" json:"boolean_operator,omitempty"`
	Expression      []*Expression                `protobuf:"bytes,2,rep,name=expression,proto3" json:"expression,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BooleanExpression) Reset() {
	*x = BooleanExpression{}
	mi := &file_evm_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BooleanExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanExpression) ProtoMessage() {}

func (x *BooleanExpression) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooleanExpression.ProtoReflect.Descriptor instead.
func (*BooleanExpression) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{9}
}

func (x *BooleanExpression) GetBooleanOperator() chain_common.BooleanOperator {
	if x != nil {
		return x.BooleanOperator
	}
	return chain_common.BooleanOperator(0)
}

func (x *BooleanExpression) GetExpression() []*Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

type And struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Expr          []*Expression          `protobuf:"bytes,1,rep,name=expr,proto3" json:"expr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *And) Reset() {
	*x = And{}
	mi := &file_evm_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *And) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*And) ProtoMessage() {}

func (x *And) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use And.ProtoReflect.Descriptor instead.
func (*And) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{10}
}

func (x *And) GetExpr() []*Expression {
	if x != nil {
		return x.Expr
	}
	return nil
}

type Or struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Expr          []*Expression          `protobuf:"bytes,1,rep,name=expr,proto3" json:"expr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Or) Reset() {
	*x = Or{}
	mi := &file_evm_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Or) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Or) ProtoMessage() {}

func (x *Or) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Or.ProtoReflect.Descriptor instead.
func (*Or) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{11}
}

func (x *Or) GetExpr() []*Expression {
	if x != nil {
		return x.Expr
	}
	return nil
}

type HashValueComparator struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Values        [][]byte                        `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"` // in [32]byte fix-sized array format
	Operator      chain_common.ComparisonOperator `protobuf:"varint,2,opt,name=operator,proto3,enum=loop.chain.common.ComparisonOperator" json:"operator,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HashValueComparator) Reset() {
	*x = HashValueComparator{}
	mi := &file_evm_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HashValueComparator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashValueComparator) ProtoMessage() {}

func (x *HashValueComparator) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashValueComparator.ProtoReflect.Descriptor instead.
func (*HashValueComparator) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{12}
}

func (x *HashValueComparator) GetValues() [][]byte {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *HashValueComparator) GetOperator() chain_common.ComparisonOperator {
	if x != nil {
		return x.Operator
	}
	return chain_common.ComparisonOperator(0)
}

type EventByWord struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	WordIndex            uint32                 `protobuf:"varint,1,opt,name=word_index,json=wordIndex,proto3" json:"word_index,omitempty"`
	HashedValueComparers []*HashValueComparator `protobuf:"bytes,2,rep,name=hashed_value_comparers,json=hashedValueComparers,proto3" json:"hashed_value_comparers,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *EventByWord) Reset() {
	*x = EventByWord{}
	mi := &file_evm_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventByWord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventByWord) ProtoMessage() {}

func (x *EventByWord) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventByWord.ProtoReflect.Descriptor instead.
func (*EventByWord) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{13}
}

func (x *EventByWord) GetWordIndex() uint32 {
	if x != nil {
		return x.WordIndex
	}
	return 0
}

func (x *EventByWord) GetHashedValueComparers() []*HashValueComparator {
	if x != nil {
		return x.HashedValueComparers
	}
	return nil
}

type EventByTopic struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Topic                uint64                 `protobuf:"varint,1,opt,name=topic,proto3" json:"topic,omitempty"`
	HashedValueComparers []*HashValueComparator `protobuf:"bytes,2,rep,name=hashed_value_comparers,json=hashedValueComparers,proto3" json:"hashed_value_comparers,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *EventByTopic) Reset() {
	*x = EventByTopic{}
	mi := &file_evm_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventByTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventByTopic) ProtoMessage() {}

func (x *EventByTopic) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventByTopic.ProtoReflect.Descriptor instead.
func (*EventByTopic) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{14}
}

func (x *EventByTopic) GetTopic() uint64 {
	if x != nil {
		return x.Topic
	}
	return 0
}

func (x *EventByTopic) GetHashedValueComparers() []*HashValueComparator {
	if x != nil {
		return x.HashedValueComparers
	}
	return nil
}

// evm-style primitives
// can be used in combination with general primitives for querying tracked logs
type Primitive struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Primitive:
	//
	//	*Primitive_GeneralPrimitive
	//	*Primitive_ContractAddress
	//	*Primitive_EventSig
	//	*Primitive_EventByWord
	//	*Primitive_EventByTopic
	Primitive     isPrimitive_Primitive `protobuf_oneof:"primitive"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Primitive) Reset() {
	*x = Primitive{}
	mi := &file_evm_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Primitive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Primitive) ProtoMessage() {}

func (x *Primitive) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Primitive.ProtoReflect.Descriptor instead.
func (*Primitive) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{15}
}

func (x *Primitive) GetPrimitive() isPrimitive_Primitive {
	if x != nil {
		return x.Primitive
	}
	return nil
}

func (x *Primitive) GetGeneralPrimitive() *chain_common.Primitive {
	if x != nil {
		if x, ok := x.Primitive.(*Primitive_GeneralPrimitive); ok {
			return x.GeneralPrimitive
		}
	}
	return nil
}

func (x *Primitive) GetContractAddress() []byte {
	if x != nil {
		if x, ok := x.Primitive.(*Primitive_ContractAddress); ok {
			return x.ContractAddress
		}
	}
	return nil
}

func (x *Primitive) GetEventSig() []byte {
	if x != nil {
		if x, ok := x.Primitive.(*Primitive_EventSig); ok {
			return x.EventSig
		}
	}
	return nil
}

func (x *Primitive) GetEventByWord() *EventByWord {
	if x != nil {
		if x, ok := x.Primitive.(*Primitive_EventByWord); ok {
			return x.EventByWord
		}
	}
	return nil
}

func (x *Primitive) GetEventByTopic() *EventByTopic {
	if x != nil {
		if x, ok := x.Primitive.(*Primitive_EventByTopic); ok {
			return x.EventByTopic
		}
	}
	return nil
}

type isPrimitive_Primitive interface {
	isPrimitive_Primitive()
}

type Primitive_GeneralPrimitive struct {
	GeneralPrimitive *chain_common.Primitive `protobuf:"bytes,1,opt,name=general_primitive,json=generalPrimitive,proto3,oneof"`
}

type Primitive_ContractAddress struct {
	ContractAddress []byte `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3,oneof"` // in evm address [20]byte fix-sized array format
}

type Primitive_EventSig struct {
	EventSig []byte `protobuf:"bytes,3,opt,name=event_sig,json=eventSig,proto3,oneof"` // // in [32]byte fix-sized array format
}

type Primitive_EventByWord struct {
	EventByWord *EventByWord `protobuf:"bytes,4,opt,name=event_by_word,json=eventByWord,proto3,oneof"`
}

type Primitive_EventByTopic struct {
	EventByTopic *EventByTopic `protobuf:"bytes,5,opt,name=event_by_topic,json=eventByTopic,proto3,oneof"`
}

func (*Primitive_GeneralPrimitive) isPrimitive_Primitive() {}

func (*Primitive_ContractAddress) isPrimitive_Primitive() {}

func (*Primitive_EventSig) isPrimitive_Primitive() {}

func (*Primitive_EventByWord) isPrimitive_Primitive() {}

func (*Primitive_EventByTopic) isPrimitive_Primitive() {}

// ----- Request/Reply Wrappers -----
type LatestAndFinalizedHeadReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Latest        *Head                  `protobuf:"bytes,1,opt,name=latest,proto3" json:"latest,omitempty"`
	Finalized     *Head                  `protobuf:"bytes,2,opt,name=finalized,proto3" json:"finalized,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LatestAndFinalizedHeadReply) Reset() {
	*x = LatestAndFinalizedHeadReply{}
	mi := &file_evm_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LatestAndFinalizedHeadReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestAndFinalizedHeadReply) ProtoMessage() {}

func (x *LatestAndFinalizedHeadReply) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestAndFinalizedHeadReply.ProtoReflect.Descriptor instead.
func (*LatestAndFinalizedHeadReply) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{16}
}

func (x *LatestAndFinalizedHeadReply) GetLatest() *Head {
	if x != nil {
		return x.Latest
	}
	return nil
}

func (x *LatestAndFinalizedHeadReply) GetFinalized() *Head {
	if x != nil {
		return x.Finalized
	}
	return nil
}

// CallContractRequest has arguments for reading a contract as specified in the call message at a block height defined by blockNumber where:
// blockNumber :
//
//	nil (default) or (-2) → use the latest mined block (“latest”)
//	FinalizedBlockNumber(-3) → last finalized block (“finalized”)
//
// Any positive value is treated as an explicit block height.
type CallContractRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Call          *CallMsg               `protobuf:"bytes,1,opt,name=call,proto3" json:"call,omitempty"`
	BlockNumber   *pb.BigInt             `protobuf:"bytes,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CallContractRequest) Reset() {
	*x = CallContractRequest{}
	mi := &file_evm_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallContractRequest) ProtoMessage() {}

func (x *CallContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallContractRequest.ProtoReflect.Descriptor instead.
func (*CallContractRequest) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{17}
}

func (x *CallContractRequest) GetCall() *CallMsg {
	if x != nil {
		return x.Call
	}
	return nil
}

func (x *CallContractRequest) GetBlockNumber() *pb.BigInt {
	if x != nil {
		return x.BlockNumber
	}
	return nil
}

type CallContractReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` // solidity-spec abi encoded bytes
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CallContractReply) Reset() {
	*x = CallContractReply{}
	mi := &file_evm_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CallContractReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallContractReply) ProtoMessage() {}

func (x *CallContractReply) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallContractReply.ProtoReflect.Descriptor instead.
func (*CallContractReply) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{18}
}

func (x *CallContractReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// GetTransactionFeeRequest has arguments for [github.com/smartcontractkit/chainlink-common/pkg/types.EVMService.GetTransactionFee].
type GetTransactionFeeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransactionId string                 `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"` // idempotency key used when transaction was submitted
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTransactionFeeRequest) Reset() {
	*x = GetTransactionFeeRequest{}
	mi := &file_evm_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionFeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionFeeRequest) ProtoMessage() {}

func (x *GetTransactionFeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionFeeRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionFeeRequest) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{19}
}

func (x *GetTransactionFeeRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

// GetTransactionFeeReply has return arguments for [github.com/smartcontractkit/chainlink-common/pkg/types.EVMService.GetTransactionFee].
type GetTransactionFeeReply struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TransactionFee *pb.BigInt             `protobuf:"bytes,1,opt,name=transaction_fee,json=transactionFee,proto3" json:"transaction_fee,omitempty"` // transaction fee is the cost of transaction execution in Wei
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetTransactionFeeReply) Reset() {
	*x = GetTransactionFeeReply{}
	mi := &file_evm_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionFeeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionFeeReply) ProtoMessage() {}

func (x *GetTransactionFeeReply) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionFeeReply.ProtoReflect.Descriptor instead.
func (*GetTransactionFeeReply) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{20}
}

func (x *GetTransactionFeeReply) GetTransactionFee() *pb.BigInt {
	if x != nil {
		return x.TransactionFee
	}
	return nil
}

type FilterLogsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FilterQuery   *FilterQuery           `protobuf:"bytes,1,opt,name=filter_query,json=filterQuery,proto3" json:"filter_query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilterLogsRequest) Reset() {
	*x = FilterLogsRequest{}
	mi := &file_evm_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterLogsRequest) ProtoMessage() {}

func (x *FilterLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterLogsRequest.ProtoReflect.Descriptor instead.
func (*FilterLogsRequest) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{21}
}

func (x *FilterLogsRequest) GetFilterQuery() *FilterQuery {
	if x != nil {
		return x.FilterQuery
	}
	return nil
}

type FilterLogsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Logs          []*Log                 `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilterLogsReply) Reset() {
	*x = FilterLogsReply{}
	mi := &file_evm_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilterLogsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterLogsReply) ProtoMessage() {}

func (x *FilterLogsReply) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterLogsReply.ProtoReflect.Descriptor instead.
func (*FilterLogsReply) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{22}
}

func (x *FilterLogsReply) GetLogs() []*Log {
	if x != nil {
		return x.Logs
	}
	return nil
}

type BalanceAtRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Account       []byte                 `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"` // in evm address [20]byte fix-sized array format
	BlockNumber   *pb.BigInt             `protobuf:"bytes,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BalanceAtRequest) Reset() {
	*x = BalanceAtRequest{}
	mi := &file_evm_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BalanceAtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceAtRequest) ProtoMessage() {}

func (x *BalanceAtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceAtRequest.ProtoReflect.Descriptor instead.
func (*BalanceAtRequest) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{23}
}

func (x *BalanceAtRequest) GetAccount() []byte {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *BalanceAtRequest) GetBlockNumber() *pb.BigInt {
	if x != nil {
		return x.BlockNumber
	}
	return nil
}

type BalanceAtReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Balance       *pb.BigInt             `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"` // Balance of the account in wei (10^-18 eth)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BalanceAtReply) Reset() {
	*x = BalanceAtReply{}
	mi := &file_evm_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BalanceAtReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceAtReply) ProtoMessage() {}

func (x *BalanceAtReply) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceAtReply.ProtoReflect.Descriptor instead.
func (*BalanceAtReply) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{24}
}

func (x *BalanceAtReply) GetBalance() *pb.BigInt {
	if x != nil {
		return x.Balance
	}
	return nil
}

type EstimateGasRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Msg           *CallMsg               `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"` // simulates tx execution returns approximate amount of gas units needed
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EstimateGasRequest) Reset() {
	*x = EstimateGasRequest{}
	mi := &file_evm_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EstimateGasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateGasRequest) ProtoMessage() {}

func (x *EstimateGasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateGasRequest.ProtoReflect.Descriptor instead.
func (*EstimateGasRequest) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{25}
}

func (x *EstimateGasRequest) GetMsg() *CallMsg {
	if x != nil {
		return x.Msg
	}
	return nil
}

type EstimateGasReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Gas           uint64                 `protobuf:"varint,1,opt,name=gas,proto3" json:"gas,omitempty"` // estimated amount of gas in gas units, needed for tx execution
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EstimateGasReply) Reset() {
	*x = EstimateGasReply{}
	mi := &file_evm_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EstimateGasReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateGasReply) ProtoMessage() {}

func (x *EstimateGasReply) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateGasReply.ProtoReflect.Descriptor instead.
func (*EstimateGasReply) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{26}
}

func (x *EstimateGasReply) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

type GetTransactionByHashRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          []byte                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"` // in [32]byte fix-sized array format
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTransactionByHashRequest) Reset() {
	*x = GetTransactionByHashRequest{}
	mi := &file_evm_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionByHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionByHashRequest) ProtoMessage() {}

func (x *GetTransactionByHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionByHashRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionByHashRequest) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{27}
}

func (x *GetTransactionByHashRequest) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type GetTransactionByHashReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Transaction   *Transaction           `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTransactionByHashReply) Reset() {
	*x = GetTransactionByHashReply{}
	mi := &file_evm_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionByHashReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionByHashReply) ProtoMessage() {}

func (x *GetTransactionByHashReply) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionByHashReply.ProtoReflect.Descriptor instead.
func (*GetTransactionByHashReply) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{28}
}

func (x *GetTransactionByHashReply) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type GetTransactionReceiptRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Hash          []byte                 `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"` // in [32]byte fix-sized array format
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTransactionReceiptRequest) Reset() {
	*x = GetTransactionReceiptRequest{}
	mi := &file_evm_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionReceiptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionReceiptRequest) ProtoMessage() {}

func (x *GetTransactionReceiptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionReceiptRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionReceiptRequest) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{29}
}

func (x *GetTransactionReceiptRequest) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type GetTransactionReceiptReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Receipt       *Receipt               `protobuf:"bytes,1,opt,name=receipt,proto3" json:"receipt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTransactionReceiptReply) Reset() {
	*x = GetTransactionReceiptReply{}
	mi := &file_evm_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionReceiptReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionReceiptReply) ProtoMessage() {}

func (x *GetTransactionReceiptReply) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionReceiptReply.ProtoReflect.Descriptor instead.
func (*GetTransactionReceiptReply) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{30}
}

func (x *GetTransactionReceiptReply) GetReceipt() *Receipt {
	if x != nil {
		return x.Receipt
	}
	return nil
}

type RegisterLogTrackingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filter        *LPFilter              `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisterLogTrackingRequest) Reset() {
	*x = RegisterLogTrackingRequest{}
	mi := &file_evm_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisterLogTrackingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterLogTrackingRequest) ProtoMessage() {}

func (x *RegisterLogTrackingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterLogTrackingRequest.ProtoReflect.Descriptor instead.
func (*RegisterLogTrackingRequest) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{31}
}

func (x *RegisterLogTrackingRequest) GetFilter() *LPFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type UnregisterLogTrackingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FilterName    string                 `protobuf:"bytes,1,opt,name=filter_name,json=filterName,proto3" json:"filter_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnregisterLogTrackingRequest) Reset() {
	*x = UnregisterLogTrackingRequest{}
	mi := &file_evm_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnregisterLogTrackingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnregisterLogTrackingRequest) ProtoMessage() {}

func (x *UnregisterLogTrackingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnregisterLogTrackingRequest.ProtoReflect.Descriptor instead.
func (*UnregisterLogTrackingRequest) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{32}
}

func (x *UnregisterLogTrackingRequest) GetFilterName() string {
	if x != nil {
		return x.FilterName
	}
	return ""
}

type QueryTrackedLogsRequest struct {
	state           protoimpl.MessageState     `protogen:"open.v1"`
	Expression      []*Expression              `protobuf:"bytes,1,rep,name=expression,proto3" json:"expression,omitempty"`
	LimitAndSort    *chain_common.LimitAndSort `protobuf:"bytes,2,opt,name=limit_and_sort,json=limitAndSort,proto3" json:"limit_and_sort,omitempty"`
	ConfidenceLevel chain_common.Confidence    `protobuf:"varint,3,opt,name=confidence_level,json=confidenceLevel,proto3,enum=loop.chain.common.Confidence" json:"confidence_level,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *QueryTrackedLogsRequest) Reset() {
	*x = QueryTrackedLogsRequest{}
	mi := &file_evm_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTrackedLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTrackedLogsRequest) ProtoMessage() {}

func (x *QueryTrackedLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTrackedLogsRequest.ProtoReflect.Descriptor instead.
func (*QueryTrackedLogsRequest) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{33}
}

func (x *QueryTrackedLogsRequest) GetExpression() []*Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *QueryTrackedLogsRequest) GetLimitAndSort() *chain_common.LimitAndSort {
	if x != nil {
		return x.LimitAndSort
	}
	return nil
}

func (x *QueryTrackedLogsRequest) GetConfidenceLevel() chain_common.Confidence {
	if x != nil {
		return x.ConfidenceLevel
	}
	return chain_common.Confidence(0)
}

type QueryTrackedLogsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Logs          []*Log                 `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryTrackedLogsReply) Reset() {
	*x = QueryTrackedLogsReply{}
	mi := &file_evm_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryTrackedLogsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTrackedLogsReply) ProtoMessage() {}

func (x *QueryTrackedLogsReply) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTrackedLogsReply.ProtoReflect.Descriptor instead.
func (*QueryTrackedLogsReply) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{34}
}

func (x *QueryTrackedLogsReply) GetLogs() []*Log {
	if x != nil {
		return x.Logs
	}
	return nil
}

type GasConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GasLimit      uint64                 `protobuf:"varint,1,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GasConfig) Reset() {
	*x = GasConfig{}
	mi := &file_evm_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GasConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GasConfig) ProtoMessage() {}

func (x *GasConfig) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GasConfig.ProtoReflect.Descriptor instead.
func (*GasConfig) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{35}
}

func (x *GasConfig) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

type CalculateTransactionFeeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GasInfo       *ReceiptGasInfo        `protobuf:"bytes,1,opt,name=gas_info,json=gasInfo,proto3" json:"gas_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CalculateTransactionFeeRequest) Reset() {
	*x = CalculateTransactionFeeRequest{}
	mi := &file_evm_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalculateTransactionFeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateTransactionFeeRequest) ProtoMessage() {}

func (x *CalculateTransactionFeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateTransactionFeeRequest.ProtoReflect.Descriptor instead.
func (*CalculateTransactionFeeRequest) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{36}
}

func (x *CalculateTransactionFeeRequest) GetGasInfo() *ReceiptGasInfo {
	if x != nil {
		return x.GasInfo
	}
	return nil
}

// represents evm-style receipt
type ReceiptGasInfo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	GasUsed           uint64                 `protobuf:"varint,1,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`                                // gas used by this transaction (in gas units)
	EffectiveGasPrice *pb.BigInt             `protobuf:"bytes,2,opt,name=effective_gas_price,json=effectiveGasPrice,proto3" json:"effective_gas_price,omitempty"` // actual gas price paid in wei (include after EIP-1559)
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ReceiptGasInfo) Reset() {
	*x = ReceiptGasInfo{}
	mi := &file_evm_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceiptGasInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiptGasInfo) ProtoMessage() {}

func (x *ReceiptGasInfo) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiptGasInfo.ProtoReflect.Descriptor instead.
func (*ReceiptGasInfo) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{37}
}

func (x *ReceiptGasInfo) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *ReceiptGasInfo) GetEffectiveGasPrice() *pb.BigInt {
	if x != nil {
		return x.EffectiveGasPrice
	}
	return nil
}

type CalculateTransactionFeeReply struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	TransactionFee *pb.BigInt             `protobuf:"bytes,1,opt,name=transaction_fee,json=transactionFee,proto3" json:"transaction_fee,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CalculateTransactionFeeReply) Reset() {
	*x = CalculateTransactionFeeReply{}
	mi := &file_evm_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalculateTransactionFeeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateTransactionFeeReply) ProtoMessage() {}

func (x *CalculateTransactionFeeReply) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateTransactionFeeReply.ProtoReflect.Descriptor instead.
func (*CalculateTransactionFeeReply) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{38}
}

func (x *CalculateTransactionFeeReply) GetTransactionFee() *pb.BigInt {
	if x != nil {
		return x.TransactionFee
	}
	return nil
}

type SubmitTransactionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	To            []byte                 `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	Data          []byte                 `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	GasConfig     *GasConfig             `protobuf:"bytes,3,opt,name=gas_config,json=gasConfig,proto3,oneof" json:"gas_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitTransactionRequest) Reset() {
	*x = SubmitTransactionRequest{}
	mi := &file_evm_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTransactionRequest) ProtoMessage() {}

func (x *SubmitTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTransactionRequest.ProtoReflect.Descriptor instead.
func (*SubmitTransactionRequest) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{39}
}

func (x *SubmitTransactionRequest) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *SubmitTransactionRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SubmitTransactionRequest) GetGasConfig() *GasConfig {
	if x != nil {
		return x.GasConfig
	}
	return nil
}

type SubmitTransactionReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TxHash        []byte                 `protobuf:"bytes,1,opt,name=txHash,proto3" json:"txHash,omitempty"`
	TxStatus      TxStatus               `protobuf:"varint,2,opt,name=txStatus,proto3,enum=loop.evm.TxStatus" json:"txStatus,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitTransactionReply) Reset() {
	*x = SubmitTransactionReply{}
	mi := &file_evm_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitTransactionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTransactionReply) ProtoMessage() {}

func (x *SubmitTransactionReply) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTransactionReply.ProtoReflect.Descriptor instead.
func (*SubmitTransactionReply) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{40}
}

func (x *SubmitTransactionReply) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *SubmitTransactionReply) GetTxStatus() TxStatus {
	if x != nil {
		return x.TxStatus
	}
	return TxStatus_TX_FATAL
}

type GetTransactionStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TransactionId string                 `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTransactionStatusRequest) Reset() {
	*x = GetTransactionStatusRequest{}
	mi := &file_evm_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionStatusRequest) ProtoMessage() {}

func (x *GetTransactionStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionStatusRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionStatusRequest) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{41}
}

func (x *GetTransactionStatusRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type GetTransactionStatusReply struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	TransactionStatus TransactionStatus      `protobuf:"varint,1,opt,name=transaction_status,json=transactionStatus,proto3,enum=loop.evm.TransactionStatus" json:"transaction_status,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetTransactionStatusReply) Reset() {
	*x = GetTransactionStatusReply{}
	mi := &file_evm_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionStatusReply) ProtoMessage() {}

func (x *GetTransactionStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionStatusReply.ProtoReflect.Descriptor instead.
func (*GetTransactionStatusReply) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{42}
}

func (x *GetTransactionStatusReply) GetTransactionStatus() TransactionStatus {
	if x != nil {
		return x.TransactionStatus
	}
	return TransactionStatus_TRANSACTION_STATUS_UNKNOWN
}

type GetForwarderForEOARequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Addr          []byte                 `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`                               // eoa address in evm address [20]byte fix-sized array format. Required.
	Aggr          []byte                 `protobuf:"bytes,2,opt,name=aggr,proto3" json:"aggr,omitempty"`                               // aggregator address in evm address [20]byte fix-sized array format. Can be empty; if set, forwarder is searched among ocr2 aggregators based on the plugin_type.
	PluginType    string                 `protobuf:"bytes,3,opt,name=plugin_type,json=pluginType,proto3" json:"plugin_type,omitempty"` // type of plugin to be used when searching for a forwarder. Can be empty; suggested values to use - pkg/types.OCR2PluginType.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetForwarderForEOARequest) Reset() {
	*x = GetForwarderForEOARequest{}
	mi := &file_evm_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetForwarderForEOARequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForwarderForEOARequest) ProtoMessage() {}

func (x *GetForwarderForEOARequest) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForwarderForEOARequest.ProtoReflect.Descriptor instead.
func (*GetForwarderForEOARequest) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{43}
}

func (x *GetForwarderForEOARequest) GetAddr() []byte {
	if x != nil {
		return x.Addr
	}
	return nil
}

func (x *GetForwarderForEOARequest) GetAggr() []byte {
	if x != nil {
		return x.Aggr
	}
	return nil
}

func (x *GetForwarderForEOARequest) GetPluginType() string {
	if x != nil {
		return x.PluginType
	}
	return ""
}

type GetForwarderForEOAReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Addr          []byte                 `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"` // forwarder address in evm address [20]byte fix-sized array format.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetForwarderForEOAReply) Reset() {
	*x = GetForwarderForEOAReply{}
	mi := &file_evm_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetForwarderForEOAReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetForwarderForEOAReply) ProtoMessage() {}

func (x *GetForwarderForEOAReply) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetForwarderForEOAReply.ProtoReflect.Descriptor instead.
func (*GetForwarderForEOAReply) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{44}
}

func (x *GetForwarderForEOAReply) GetAddr() []byte {
	if x != nil {
		return x.Addr
	}
	return nil
}

var File_evm_proto protoreflect.FileDescriptor

const file_evm_proto_rawDesc = "" +
	"\n" +
	"\tevm.proto\x12\bloop.evm\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1dloop/chain-common/query.proto\x1a\x16values/v1/values.proto\"A\n" +
	"\aCallMsg\x12\x12\n" +
	"\x04from\x18\x01 \x01(\fR\x04from\x12\x0e\n" +
	"\x02to\x18\x02 \x01(\fR\x02to\x12\x12\n" +
	"\x04data\x18\x03 \x01(\fR\x04data\"\x1e\n" +
	"\x06Topics\x12\x14\n" +
	"\x05topic\x18\x01 \x03(\fR\x05topic\"\xa0\x02\n" +
	"\x03Log\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\fR\aaddress\x12\x16\n" +
	"\x06topics\x18\x02 \x03(\fR\x06topics\x12\x17\n" +
	"\atx_hash\x18\x03 \x01(\fR\x06txHash\x12\x1d\n" +
	"\n" +
	"block_hash\x18\x04 \x01(\fR\tblockHash\x12\x12\n" +
	"\x04data\x18\x05 \x01(\fR\x04data\x12\x1a\n" +
	"\beventSig\x18\x06 \x01(\fR\beventSig\x124\n" +
	"\fblock_number\x18\a \x01(\v2\x11.values.v1.BigIntR\vblockNumber\x12\x19\n" +
	"\btx_index\x18\b \x01(\rR\atxIndex\x12\x14\n" +
	"\x05index\x18\t \x01(\rR\x05index\x12\x18\n" +
	"\aremoved\x18\n" +
	" \x01(\bR\aremoved\"\xd2\x01\n" +
	"\vFilterQuery\x12\x1d\n" +
	"\n" +
	"block_hash\x18\x01 \x01(\fR\tblockHash\x12/\n" +
	"\tfromBlock\x18\x02 \x01(\v2\x11.values.v1.BigIntR\tfromBlock\x12+\n" +
	"\atoBlock\x18\x03 \x01(\v2\x11.values.v1.BigIntR\atoBlock\x12\x1c\n" +
	"\taddresses\x18\x04 \x03(\fR\taddresses\x12(\n" +
	"\x06topics\x18\x05 \x03(\v2\x10.loop.evm.TopicsR\x06topics\"\xc6\x01\n" +
	"\vTransaction\x12\x14\n" +
	"\x05nonce\x18\x01 \x01(\x04R\x05nonce\x12\x10\n" +
	"\x03gas\x18\x02 \x01(\x04R\x03gas\x12\x0e\n" +
	"\x02to\x18\x03 \x01(\fR\x02to\x12\x12\n" +
	"\x04data\x18\x04 \x01(\fR\x04data\x12\x12\n" +
	"\x04hash\x18\x05 \x01(\fR\x04hash\x12'\n" +
	"\x05value\x18\x06 \x01(\v2\x11.values.v1.BigIntR\x05value\x12.\n" +
	"\tgas_price\x18\a \x01(\v2\x11.values.v1.BigIntR\bgasPrice\"\xd6\x02\n" +
	"\aReceipt\x12\x16\n" +
	"\x06status\x18\x01 \x01(\x04R\x06status\x12\x19\n" +
	"\bgas_used\x18\x02 \x01(\x04R\agasUsed\x12\x19\n" +
	"\btx_index\x18\x03 \x01(\x04R\atxIndex\x12\x1d\n" +
	"\n" +
	"block_hash\x18\x04 \x01(\fR\tblockHash\x12!\n" +
	"\x04logs\x18\x06 \x03(\v2\r.loop.evm.LogR\x04logs\x12\x17\n" +
	"\atx_hash\x18\a \x01(\fR\x06txHash\x12A\n" +
	"\x13effective_gas_price\x18\b \x01(\v2\x11.values.v1.BigIntR\x11effectiveGasPrice\x124\n" +
	"\fblock_number\x18\t \x01(\v2\x11.values.v1.BigIntR\vblockNumber\x12)\n" +
	"\x10contract_address\x18\n" +
	" \x01(\fR\x0fcontractAddress\"\x94\x02\n" +
	"\bLPFilter\x12\"\n" +
	"\rmax_logs_kept\x18\x01 \x01(\x04R\vmaxLogsKept\x12%\n" +
	"\x0eretention_time\x18\x02 \x01(\x03R\rretentionTime\x12$\n" +
	"\x0elogs_per_block\x18\x03 \x01(\x04R\flogsPerBlock\x12\x12\n" +
	"\x04name\x18\x04 \x01(\tR\x04name\x12\x1c\n" +
	"\taddresses\x18\x05 \x03(\fR\taddresses\x12\x1d\n" +
	"\n" +
	"event_sigs\x18\x06 \x03(\fR\teventSigs\x12\x16\n" +
	"\x06topic2\x18\a \x03(\fR\x06topic2\x12\x16\n" +
	"\x06topic3\x18\b \x03(\fR\x06topic3\x12\x16\n" +
	"\x06topic4\x18\t \x03(\fR\x06topic4\"\x8f\x01\n" +
	"\x04Head\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\x04R\ttimestamp\x124\n" +
	"\fblock_number\x18\x02 \x01(\v2\x11.values.v1.BigIntR\vblockNumber\x12\x12\n" +
	"\x04hash\x18\x03 \x01(\fR\x04hash\x12\x1f\n" +
	"\vparent_hash\x18\x04 \x01(\fR\n" +
	"parentHash\"\x9c\x01\n" +
	"\n" +
	"Expression\x123\n" +
	"\tprimitive\x18\x01 \x01(\v2\x13.loop.evm.PrimitiveH\x00R\tprimitive\x12L\n" +
	"\x12boolean_expression\x18\x02 \x01(\v2\x1b.loop.evm.BooleanExpressionH\x00R\x11booleanExpressionB\v\n" +
	"\tevaluator\"\x98\x01\n" +
	"\x11BooleanExpression\x12M\n" +
	"\x10boolean_operator\x18\x01 \x01(\x0e2\".loop.chain.common.BooleanOperatorR\x0fbooleanOperator\x124\n" +
	"\n" +
	"expression\x18\x02 \x03(\v2\x14.loop.evm.ExpressionR\n" +
	"expression\"/\n" +
	"\x03And\x12(\n" +
	"\x04expr\x18\x01 \x03(\v2\x14.loop.evm.ExpressionR\x04expr\".\n" +
	"\x02Or\x12(\n" +
	"\x04expr\x18\x01 \x03(\v2\x14.loop.evm.ExpressionR\x04expr\"p\n" +
	"\x13HashValueComparator\x12\x16\n" +
	"\x06values\x18\x01 \x03(\fR\x06values\x12A\n" +
	"\boperator\x18\x02 \x01(\x0e2%.loop.chain.common.ComparisonOperatorR\boperator\"\x81\x01\n" +
	"\vEventByWord\x12\x1d\n" +
	"\n" +
	"word_index\x18\x01 \x01(\rR\twordIndex\x12S\n" +
	"\x16hashed_value_comparers\x18\x02 \x03(\v2\x1d.loop.evm.HashValueComparatorR\x14hashedValueComparers\"y\n" +
	"\fEventByTopic\x12\x14\n" +
	"\x05topic\x18\x01 \x01(\x04R\x05topic\x12S\n" +
	"\x16hashed_value_comparers\x18\x02 \x03(\v2\x1d.loop.evm.HashValueComparatorR\x14hashedValueComparers\"\xae\x02\n" +
	"\tPrimitive\x12K\n" +
	"\x11general_primitive\x18\x01 \x01(\v2\x1c.loop.chain.common.PrimitiveH\x00R\x10generalPrimitive\x12+\n" +
	"\x10contract_address\x18\x02 \x01(\fH\x00R\x0fcontractAddress\x12\x1d\n" +
	"\tevent_sig\x18\x03 \x01(\fH\x00R\beventSig\x12;\n" +
	"\revent_by_word\x18\x04 \x01(\v2\x15.loop.evm.EventByWordH\x00R\veventByWord\x12>\n" +
	"\x0eevent_by_topic\x18\x05 \x01(\v2\x16.loop.evm.EventByTopicH\x00R\feventByTopicB\v\n" +
	"\tprimitive\"s\n" +
	"\x1bLatestAndFinalizedHeadReply\x12&\n" +
	"\x06latest\x18\x01 \x01(\v2\x0e.loop.evm.HeadR\x06latest\x12,\n" +
	"\tfinalized\x18\x02 \x01(\v2\x0e.loop.evm.HeadR\tfinalized\"r\n" +
	"\x13CallContractRequest\x12%\n" +
	"\x04call\x18\x01 \x01(\v2\x11.loop.evm.CallMsgR\x04call\x124\n" +
	"\fblock_number\x18\x02 \x01(\v2\x11.values.v1.BigIntR\vblockNumber\"'\n" +
	"\x11CallContractReply\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\"A\n" +
	"\x18GetTransactionFeeRequest\x12%\n" +
	"\x0etransaction_id\x18\x01 \x01(\tR\rtransactionId\"T\n" +
	"\x16GetTransactionFeeReply\x12:\n" +
	"\x0ftransaction_fee\x18\x01 \x01(\v2\x11.values.v1.BigIntR\x0etransactionFee\"M\n" +
	"\x11FilterLogsRequest\x128\n" +
	"\ffilter_query\x18\x01 \x01(\v2\x15.loop.evm.FilterQueryR\vfilterQuery\"4\n" +
	"\x0fFilterLogsReply\x12!\n" +
	"\x04logs\x18\x01 \x03(\v2\r.loop.evm.LogR\x04logs\"b\n" +
	"\x10BalanceAtRequest\x12\x18\n" +
	"\aaccount\x18\x01 \x01(\fR\aaccount\x124\n" +
	"\fblock_number\x18\x02 \x01(\v2\x11.values.v1.BigIntR\vblockNumber\"=\n" +
	"\x0eBalanceAtReply\x12+\n" +
	"\abalance\x18\x01 \x01(\v2\x11.values.v1.BigIntR\abalance\"9\n" +
	"\x12EstimateGasRequest\x12#\n" +
	"\x03msg\x18\x01 \x01(\v2\x11.loop.evm.CallMsgR\x03msg\"$\n" +
	"\x10EstimateGasReply\x12\x10\n" +
	"\x03gas\x18\x01 \x01(\x04R\x03gas\"1\n" +
	"\x1bGetTransactionByHashRequest\x12\x12\n" +
	"\x04hash\x18\x01 \x01(\fR\x04hash\"T\n" +
	"\x19GetTransactionByHashReply\x127\n" +
	"\vtransaction\x18\x01 \x01(\v2\x15.loop.evm.TransactionR\vtransaction\"2\n" +
	"\x1cGetTransactionReceiptRequest\x12\x12\n" +
	"\x04hash\x18\x01 \x01(\fR\x04hash\"I\n" +
	"\x1aGetTransactionReceiptReply\x12+\n" +
	"\areceipt\x18\x01 \x01(\v2\x11.loop.evm.ReceiptR\areceipt\"H\n" +
	"\x1aRegisterLogTrackingRequest\x12*\n" +
	"\x06filter\x18\x01 \x01(\v2\x12.loop.evm.LPFilterR\x06filter\"?\n" +
	"\x1cUnregisterLogTrackingRequest\x12\x1f\n" +
	"\vfilter_name\x18\x01 \x01(\tR\n" +
	"filterName\"\xe0\x01\n" +
	"\x17QueryTrackedLogsRequest\x124\n" +
	"\n" +
	"expression\x18\x01 \x03(\v2\x14.loop.evm.ExpressionR\n" +
	"expression\x12E\n" +
	"\x0elimit_and_sort\x18\x02 \x01(\v2\x1f.loop.chain.common.LimitAndSortR\flimitAndSort\x12H\n" +
	"\x10confidence_level\x18\x03 \x01(\x0e2\x1d.loop.chain.common.ConfidenceR\x0fconfidenceLevel\":\n" +
	"\x15QueryTrackedLogsReply\x12!\n" +
	"\x04logs\x18\x01 \x03(\v2\r.loop.evm.LogR\x04logs\"(\n" +
	"\tGasConfig\x12\x1b\n" +
	"\tgas_limit\x18\x01 \x01(\x04R\bgasLimit\"U\n" +
	"\x1eCalculateTransactionFeeRequest\x123\n" +
	"\bgas_info\x18\x01 \x01(\v2\x18.loop.evm.ReceiptGasInfoR\agasInfo\"n\n" +
	"\x0eReceiptGasInfo\x12\x19\n" +
	"\bgas_used\x18\x01 \x01(\x04R\agasUsed\x12A\n" +
	"\x13effective_gas_price\x18\x02 \x01(\v2\x11.values.v1.BigIntR\x11effectiveGasPrice\"Z\n" +
	"\x1cCalculateTransactionFeeReply\x12:\n" +
	"\x0ftransaction_fee\x18\x01 \x01(\v2\x11.values.v1.BigIntR\x0etransactionFee\"\x86\x01\n" +
	"\x18SubmitTransactionRequest\x12\x0e\n" +
	"\x02to\x18\x01 \x01(\fR\x02to\x12\x12\n" +
	"\x04data\x18\x02 \x01(\fR\x04data\x127\n" +
	"\n" +
	"gas_config\x18\x03 \x01(\v2\x13.loop.evm.GasConfigH\x00R\tgasConfig\x88\x01\x01B\r\n" +
	"\v_gas_config\"`\n" +
	"\x16SubmitTransactionReply\x12\x16\n" +
	"\x06txHash\x18\x01 \x01(\fR\x06txHash\x12.\n" +
	"\btxStatus\x18\x02 \x01(\x0e2\x12.loop.evm.TxStatusR\btxStatus\"D\n" +
	"\x1bGetTransactionStatusRequest\x12%\n" +
	"\x0etransaction_id\x18\x01 \x01(\tR\rtransactionId\"g\n" +
	"\x19GetTransactionStatusReply\x12J\n" +
	"\x12transaction_status\x18\x01 \x01(\x0e2\x1b.loop.evm.TransactionStatusR\x11transactionStatus\"d\n" +
	"\x19GetForwarderForEOARequest\x12\x12\n" +
	"\x04addr\x18\x01 \x01(\fR\x04addr\x12\x12\n" +
	"\x04aggr\x18\x02 \x01(\fR\x04aggr\x12\x1f\n" +
	"\vplugin_type\x18\x03 \x01(\tR\n" +
	"pluginType\"-\n" +
	"\x17GetForwarderForEOAReply\x12\x12\n" +
	"\x04addr\x18\x01 \x01(\fR\x04addr*9\n" +
	"\bTxStatus\x12\f\n" +
	"\bTX_FATAL\x10\x00\x12\x0f\n" +
	"\vTX_REVERTED\x10\x01\x12\x0e\n" +
	"\n" +
	"TX_SUCCESS\x10\x02*\xd6\x01\n" +
	"\x11TransactionStatus\x12\x1e\n" +
	"\x1aTRANSACTION_STATUS_UNKNOWN\x10\x00\x12\x1e\n" +
	"\x1aTRANSACTION_STATUS_PENDING\x10\x01\x12\"\n" +
	"\x1eTRANSACTION_STATUS_UNCONFIRMED\x10\x02\x12 \n" +
	"\x1cTRANSACTION_STATUS_FINALIZED\x10\x03\x12\x1d\n" +
	"\x19TRANSACTION_STATUS_FAILED\x10\x04\x12\x1c\n" +
	"\x18TRANSACTION_STATUS_FATAL\x10\x052\xb4\n" +
	"\n" +
	"\x03EVM\x12[\n" +
	"\x11GetTransactionFee\x12\".loop.evm.GetTransactionFeeRequest\x1a .loop.evm.GetTransactionFeeReply\"\x00\x12J\n" +
	"\fCallContract\x12\x1d.loop.evm.CallContractRequest\x1a\x1b.loop.evm.CallContractReply\x12D\n" +
	"\n" +
	"FilterLogs\x12\x1b.loop.evm.FilterLogsRequest\x1a\x19.loop.evm.FilterLogsReply\x12A\n" +
	"\tBalanceAt\x12\x1a.loop.evm.BalanceAtRequest\x1a\x18.loop.evm.BalanceAtReply\x12G\n" +
	"\vEstimateGas\x12\x1c.loop.evm.EstimateGasRequest\x1a\x1a.loop.evm.EstimateGasReply\x12b\n" +
	"\x14GetTransactionByHash\x12%.loop.evm.GetTransactionByHashRequest\x1a#.loop.evm.GetTransactionByHashReply\x12e\n" +
	"\x15GetTransactionReceipt\x12&.loop.evm.GetTransactionReceiptRequest\x1a$.loop.evm.GetTransactionReceiptReply\x12W\n" +
	"\x16LatestAndFinalizedHead\x12\x16.google.protobuf.Empty\x1a%.loop.evm.LatestAndFinalizedHeadReply\x12V\n" +
	"\x10QueryTrackedLogs\x12!.loop.evm.QueryTrackedLogsRequest\x1a\x1f.loop.evm.QueryTrackedLogsReply\x12S\n" +
	"\x13RegisterLogTracking\x12$.loop.evm.RegisterLogTrackingRequest\x1a\x16.google.protobuf.Empty\x12W\n" +
	"\x15UnregisterLogTracking\x12&.loop.evm.UnregisterLogTrackingRequest\x1a\x16.google.protobuf.Empty\x12b\n" +
	"\x14GetTransactionStatus\x12%.loop.evm.GetTransactionStatusRequest\x1a#.loop.evm.GetTransactionStatusReply\x12Y\n" +
	"\x11SubmitTransaction\x12\".loop.evm.SubmitTransactionRequest\x1a .loop.evm.SubmitTransactionReply\x12k\n" +
	"\x17CalculateTransactionFee\x12(.loop.evm.CalculateTransactionFeeRequest\x1a&.loop.evm.CalculateTransactionFeeReply\x12\\\n" +
	"\x12GetForwarderForEOA\x12#.loop.evm.GetForwarderForEOARequest\x1a!.loop.evm.GetForwarderForEOAReplyB=Z;github.com/smartcontractkit/chainlink-common/pkg/chains/evmb\x06proto3"

var (
	file_evm_proto_rawDescOnce sync.Once
	file_evm_proto_rawDescData []byte
)

func file_evm_proto_rawDescGZIP() []byte {
	file_evm_proto_rawDescOnce.Do(func() {
		file_evm_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_evm_proto_rawDesc), len(file_evm_proto_rawDesc)))
	})
	return file_evm_proto_rawDescData
}

var file_evm_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_evm_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_evm_proto_goTypes = []any{
	(TxStatus)(0),                          // 0: loop.evm.TxStatus
	(TransactionStatus)(0),                 // 1: loop.evm.TransactionStatus
	(*CallMsg)(nil),                        // 2: loop.evm.CallMsg
	(*Topics)(nil),                         // 3: loop.evm.Topics
	(*Log)(nil),                            // 4: loop.evm.Log
	(*FilterQuery)(nil),                    // 5: loop.evm.FilterQuery
	(*Transaction)(nil),                    // 6: loop.evm.Transaction
	(*Receipt)(nil),                        // 7: loop.evm.Receipt
	(*LPFilter)(nil),                       // 8: loop.evm.LPFilter
	(*Head)(nil),                           // 9: loop.evm.Head
	(*Expression)(nil),                     // 10: loop.evm.Expression
	(*BooleanExpression)(nil),              // 11: loop.evm.BooleanExpression
	(*And)(nil),                            // 12: loop.evm.And
	(*Or)(nil),                             // 13: loop.evm.Or
	(*HashValueComparator)(nil),            // 14: loop.evm.HashValueComparator
	(*EventByWord)(nil),                    // 15: loop.evm.EventByWord
	(*EventByTopic)(nil),                   // 16: loop.evm.EventByTopic
	(*Primitive)(nil),                      // 17: loop.evm.Primitive
	(*LatestAndFinalizedHeadReply)(nil),    // 18: loop.evm.LatestAndFinalizedHeadReply
	(*CallContractRequest)(nil),            // 19: loop.evm.CallContractRequest
	(*CallContractReply)(nil),              // 20: loop.evm.CallContractReply
	(*GetTransactionFeeRequest)(nil),       // 21: loop.evm.GetTransactionFeeRequest
	(*GetTransactionFeeReply)(nil),         // 22: loop.evm.GetTransactionFeeReply
	(*FilterLogsRequest)(nil),              // 23: loop.evm.FilterLogsRequest
	(*FilterLogsReply)(nil),                // 24: loop.evm.FilterLogsReply
	(*BalanceAtRequest)(nil),               // 25: loop.evm.BalanceAtRequest
	(*BalanceAtReply)(nil),                 // 26: loop.evm.BalanceAtReply
	(*EstimateGasRequest)(nil),             // 27: loop.evm.EstimateGasRequest
	(*EstimateGasReply)(nil),               // 28: loop.evm.EstimateGasReply
	(*GetTransactionByHashRequest)(nil),    // 29: loop.evm.GetTransactionByHashRequest
	(*GetTransactionByHashReply)(nil),      // 30: loop.evm.GetTransactionByHashReply
	(*GetTransactionReceiptRequest)(nil),   // 31: loop.evm.GetTransactionReceiptRequest
	(*GetTransactionReceiptReply)(nil),     // 32: loop.evm.GetTransactionReceiptReply
	(*RegisterLogTrackingRequest)(nil),     // 33: loop.evm.RegisterLogTrackingRequest
	(*UnregisterLogTrackingRequest)(nil),   // 34: loop.evm.UnregisterLogTrackingRequest
	(*QueryTrackedLogsRequest)(nil),        // 35: loop.evm.QueryTrackedLogsRequest
	(*QueryTrackedLogsReply)(nil),          // 36: loop.evm.QueryTrackedLogsReply
	(*GasConfig)(nil),                      // 37: loop.evm.GasConfig
	(*CalculateTransactionFeeRequest)(nil), // 38: loop.evm.CalculateTransactionFeeRequest
	(*ReceiptGasInfo)(nil),                 // 39: loop.evm.ReceiptGasInfo
	(*CalculateTransactionFeeReply)(nil),   // 40: loop.evm.CalculateTransactionFeeReply
	(*SubmitTransactionRequest)(nil),       // 41: loop.evm.SubmitTransactionRequest
	(*SubmitTransactionReply)(nil),         // 42: loop.evm.SubmitTransactionReply
	(*GetTransactionStatusRequest)(nil),    // 43: loop.evm.GetTransactionStatusRequest
	(*GetTransactionStatusReply)(nil),      // 44: loop.evm.GetTransactionStatusReply
	(*GetForwarderForEOARequest)(nil),      // 45: loop.evm.GetForwarderForEOARequest
	(*GetForwarderForEOAReply)(nil),        // 46: loop.evm.GetForwarderForEOAReply
	(*pb.BigInt)(nil),                      // 47: values.v1.BigInt
	(chain_common.BooleanOperator)(0),      // 48: loop.chain.common.BooleanOperator
	(chain_common.ComparisonOperator)(0),   // 49: loop.chain.common.ComparisonOperator
	(*chain_common.Primitive)(nil),         // 50: loop.chain.common.Primitive
	(*chain_common.LimitAndSort)(nil),      // 51: loop.chain.common.LimitAndSort
	(chain_common.Confidence)(0),           // 52: loop.chain.common.Confidence
	(*emptypb.Empty)(nil),                  // 53: google.protobuf.Empty
}
var file_evm_proto_depIdxs = []int32{
	47, // 0: loop.evm.Log.block_number:type_name -> values.v1.BigInt
	47, // 1: loop.evm.FilterQuery.fromBlock:type_name -> values.v1.BigInt
	47, // 2: loop.evm.FilterQuery.toBlock:type_name -> values.v1.BigInt
	3,  // 3: loop.evm.FilterQuery.topics:type_name -> loop.evm.Topics
	47, // 4: loop.evm.Transaction.value:type_name -> values.v1.BigInt
	47, // 5: loop.evm.Transaction.gas_price:type_name -> values.v1.BigInt
	4,  // 6: loop.evm.Receipt.logs:type_name -> loop.evm.Log
	47, // 7: loop.evm.Receipt.effective_gas_price:type_name -> values.v1.BigInt
	47, // 8: loop.evm.Receipt.block_number:type_name -> values.v1.BigInt
	47, // 9: loop.evm.Head.block_number:type_name -> values.v1.BigInt
	17, // 10: loop.evm.Expression.primitive:type_name -> loop.evm.Primitive
	11, // 11: loop.evm.Expression.boolean_expression:type_name -> loop.evm.BooleanExpression
	48, // 12: loop.evm.BooleanExpression.boolean_operator:type_name -> loop.chain.common.BooleanOperator
	10, // 13: loop.evm.BooleanExpression.expression:type_name -> loop.evm.Expression
	10, // 14: loop.evm.And.expr:type_name -> loop.evm.Expression
	10, // 15: loop.evm.Or.expr:type_name -> loop.evm.Expression
	49, // 16: loop.evm.HashValueComparator.operator:type_name -> loop.chain.common.ComparisonOperator
	14, // 17: loop.evm.EventByWord.hashed_value_comparers:type_name -> loop.evm.HashValueComparator
	14, // 18: loop.evm.EventByTopic.hashed_value_comparers:type_name -> loop.evm.HashValueComparator
	50, // 19: loop.evm.Primitive.general_primitive:type_name -> loop.chain.common.Primitive
	15, // 20: loop.evm.Primitive.event_by_word:type_name -> loop.evm.EventByWord
	16, // 21: loop.evm.Primitive.event_by_topic:type_name -> loop.evm.EventByTopic
	9,  // 22: loop.evm.LatestAndFinalizedHeadReply.latest:type_name -> loop.evm.Head
	9,  // 23: loop.evm.LatestAndFinalizedHeadReply.finalized:type_name -> loop.evm.Head
	2,  // 24: loop.evm.CallContractRequest.call:type_name -> loop.evm.CallMsg
	47, // 25: loop.evm.CallContractRequest.block_number:type_name -> values.v1.BigInt
	47, // 26: loop.evm.GetTransactionFeeReply.transaction_fee:type_name -> values.v1.BigInt
	5,  // 27: loop.evm.FilterLogsRequest.filter_query:type_name -> loop.evm.FilterQuery
	4,  // 28: loop.evm.FilterLogsReply.logs:type_name -> loop.evm.Log
	47, // 29: loop.evm.BalanceAtRequest.block_number:type_name -> values.v1.BigInt
	47, // 30: loop.evm.BalanceAtReply.balance:type_name -> values.v1.BigInt
	2,  // 31: loop.evm.EstimateGasRequest.msg:type_name -> loop.evm.CallMsg
	6,  // 32: loop.evm.GetTransactionByHashReply.transaction:type_name -> loop.evm.Transaction
	7,  // 33: loop.evm.GetTransactionReceiptReply.receipt:type_name -> loop.evm.Receipt
	8,  // 34: loop.evm.RegisterLogTrackingRequest.filter:type_name -> loop.evm.LPFilter
	10, // 35: loop.evm.QueryTrackedLogsRequest.expression:type_name -> loop.evm.Expression
	51, // 36: loop.evm.QueryTrackedLogsRequest.limit_and_sort:type_name -> loop.chain.common.LimitAndSort
	52, // 37: loop.evm.QueryTrackedLogsRequest.confidence_level:type_name -> loop.chain.common.Confidence
	4,  // 38: loop.evm.QueryTrackedLogsReply.logs:type_name -> loop.evm.Log
	39, // 39: loop.evm.CalculateTransactionFeeRequest.gas_info:type_name -> loop.evm.ReceiptGasInfo
	47, // 40: loop.evm.ReceiptGasInfo.effective_gas_price:type_name -> values.v1.BigInt
	47, // 41: loop.evm.CalculateTransactionFeeReply.transaction_fee:type_name -> values.v1.BigInt
	37, // 42: loop.evm.SubmitTransactionRequest.gas_config:type_name -> loop.evm.GasConfig
	0,  // 43: loop.evm.SubmitTransactionReply.txStatus:type_name -> loop.evm.TxStatus
	1,  // 44: loop.evm.GetTransactionStatusReply.transaction_status:type_name -> loop.evm.TransactionStatus
	21, // 45: loop.evm.EVM.GetTransactionFee:input_type -> loop.evm.GetTransactionFeeRequest
	19, // 46: loop.evm.EVM.CallContract:input_type -> loop.evm.CallContractRequest
	23, // 47: loop.evm.EVM.FilterLogs:input_type -> loop.evm.FilterLogsRequest
	25, // 48: loop.evm.EVM.BalanceAt:input_type -> loop.evm.BalanceAtRequest
	27, // 49: loop.evm.EVM.EstimateGas:input_type -> loop.evm.EstimateGasRequest
	29, // 50: loop.evm.EVM.GetTransactionByHash:input_type -> loop.evm.GetTransactionByHashRequest
	31, // 51: loop.evm.EVM.GetTransactionReceipt:input_type -> loop.evm.GetTransactionReceiptRequest
	53, // 52: loop.evm.EVM.LatestAndFinalizedHead:input_type -> google.protobuf.Empty
	35, // 53: loop.evm.EVM.QueryTrackedLogs:input_type -> loop.evm.QueryTrackedLogsRequest
	33, // 54: loop.evm.EVM.RegisterLogTracking:input_type -> loop.evm.RegisterLogTrackingRequest
	34, // 55: loop.evm.EVM.UnregisterLogTracking:input_type -> loop.evm.UnregisterLogTrackingRequest
	43, // 56: loop.evm.EVM.GetTransactionStatus:input_type -> loop.evm.GetTransactionStatusRequest
	41, // 57: loop.evm.EVM.SubmitTransaction:input_type -> loop.evm.SubmitTransactionRequest
	38, // 58: loop.evm.EVM.CalculateTransactionFee:input_type -> loop.evm.CalculateTransactionFeeRequest
	45, // 59: loop.evm.EVM.GetForwarderForEOA:input_type -> loop.evm.GetForwarderForEOARequest
	22, // 60: loop.evm.EVM.GetTransactionFee:output_type -> loop.evm.GetTransactionFeeReply
	20, // 61: loop.evm.EVM.CallContract:output_type -> loop.evm.CallContractReply
	24, // 62: loop.evm.EVM.FilterLogs:output_type -> loop.evm.FilterLogsReply
	26, // 63: loop.evm.EVM.BalanceAt:output_type -> loop.evm.BalanceAtReply
	28, // 64: loop.evm.EVM.EstimateGas:output_type -> loop.evm.EstimateGasReply
	30, // 65: loop.evm.EVM.GetTransactionByHash:output_type -> loop.evm.GetTransactionByHashReply
	32, // 66: loop.evm.EVM.GetTransactionReceipt:output_type -> loop.evm.GetTransactionReceiptReply
	18, // 67: loop.evm.EVM.LatestAndFinalizedHead:output_type -> loop.evm.LatestAndFinalizedHeadReply
	36, // 68: loop.evm.EVM.QueryTrackedLogs:output_type -> loop.evm.QueryTrackedLogsReply
	53, // 69: loop.evm.EVM.RegisterLogTracking:output_type -> google.protobuf.Empty
	53, // 70: loop.evm.EVM.UnregisterLogTracking:output_type -> google.protobuf.Empty
	44, // 71: loop.evm.EVM.GetTransactionStatus:output_type -> loop.evm.GetTransactionStatusReply
	42, // 72: loop.evm.EVM.SubmitTransaction:output_type -> loop.evm.SubmitTransactionReply
	40, // 73: loop.evm.EVM.CalculateTransactionFee:output_type -> loop.evm.CalculateTransactionFeeReply
	46, // 74: loop.evm.EVM.GetForwarderForEOA:output_type -> loop.evm.GetForwarderForEOAReply
	60, // [60:75] is the sub-list for method output_type
	45, // [45:60] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_evm_proto_init() }
func file_evm_proto_init() {
	if File_evm_proto != nil {
		return
	}
	file_evm_proto_msgTypes[8].OneofWrappers = []any{
		(*Expression_Primitive)(nil),
		(*Expression_BooleanExpression)(nil),
	}
	file_evm_proto_msgTypes[15].OneofWrappers = []any{
		(*Primitive_GeneralPrimitive)(nil),
		(*Primitive_ContractAddress)(nil),
		(*Primitive_EventSig)(nil),
		(*Primitive_EventByWord)(nil),
		(*Primitive_EventByTopic)(nil),
	}
	file_evm_proto_msgTypes[39].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_evm_proto_rawDesc), len(file_evm_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_evm_proto_goTypes,
		DependencyIndexes: file_evm_proto_depIdxs,
		EnumInfos:         file_evm_proto_enumTypes,
		MessageInfos:      file_evm_proto_msgTypes,
	}.Build()
	File_evm_proto = out.File
	file_evm_proto_goTypes = nil
	file_evm_proto_depIdxs = nil
}
