// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v4.25.1
// source: evm.proto

package evm

import (
	_ "github.com/smartcontractkit/chainlink-common/pkg/capabilities/protoc/pkg/pb"
	crosschain "github.com/smartcontractkit/chainlink-common/pkg/capabilities/stubs/don/crosschain"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConfidenceLevel int32

const (
	ConfidenceLevel_CONFIDENCE_LEVEL_UNSPECIFIED ConfidenceLevel = 0
	ConfidenceLevel_LOW                          ConfidenceLevel = 1
	ConfidenceLevel_MEDIUM                       ConfidenceLevel = 2
	ConfidenceLevel_HIGH                         ConfidenceLevel = 3
	ConfidenceLevel_FINALITY                     ConfidenceLevel = 4
)

// Enum value maps for ConfidenceLevel.
var (
	ConfidenceLevel_name = map[int32]string{
		0: "CONFIDENCE_LEVEL_UNSPECIFIED",
		1: "LOW",
		2: "MEDIUM",
		3: "HIGH",
		4: "FINALITY",
	}
	ConfidenceLevel_value = map[string]int32{
		"CONFIDENCE_LEVEL_UNSPECIFIED": 0,
		"LOW":                          1,
		"MEDIUM":                       2,
		"HIGH":                         3,
		"FINALITY":                     4,
	}
)

func (x ConfidenceLevel) Enum() *ConfidenceLevel {
	p := new(ConfidenceLevel)
	*p = x
	return p
}

func (x ConfidenceLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfidenceLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_evm_proto_enumTypes[0].Descriptor()
}

func (ConfidenceLevel) Type() protoreflect.EnumType {
	return &file_evm_proto_enumTypes[0]
}

func (x ConfidenceLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfidenceLevel.Descriptor instead.
func (ConfidenceLevel) EnumDescriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{0}
}

type TxStatus int32

const (
	TxStatus_CONFIRMED TxStatus = 0
	TxStatus_FINALIZED TxStatus = 1
	TxStatus_FAILED    TxStatus = 2
)

// Enum value maps for TxStatus.
var (
	TxStatus_name = map[int32]string{
		0: "CONFIRMED",
		1: "FINALIZED",
		2: "FAILED",
	}
	TxStatus_value = map[string]int32{
		"CONFIRMED": 0,
		"FINALIZED": 1,
		"FAILED":    2,
	}
)

func (x TxStatus) Enum() *TxStatus {
	p := new(TxStatus)
	*p = x
	return p
}

func (x TxStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_evm_proto_enumTypes[1].Descriptor()
}

func (TxStatus) Type() protoreflect.EnumType {
	return &file_evm_proto_enumTypes[1]
}

func (x TxStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxStatus.Descriptor instead.
func (TxStatus) EnumDescriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{1}
}

type ReceiverContractExecutionStatus int32

const (
	ReceiverContractExecutionStatus_SUCCESS ReceiverContractExecutionStatus = 0
	ReceiverContractExecutionStatus_FAILURE ReceiverContractExecutionStatus = 1
)

// Enum value maps for ReceiverContractExecutionStatus.
var (
	ReceiverContractExecutionStatus_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
	}
	ReceiverContractExecutionStatus_value = map[string]int32{
		"SUCCESS": 0,
		"FAILURE": 1,
	}
)

func (x ReceiverContractExecutionStatus) Enum() *ReceiverContractExecutionStatus {
	p := new(ReceiverContractExecutionStatus)
	*p = x
	return p
}

func (x ReceiverContractExecutionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReceiverContractExecutionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_evm_proto_enumTypes[2].Descriptor()
}

func (ReceiverContractExecutionStatus) Type() protoreflect.EnumType {
	return &file_evm_proto_enumTypes[2]
}

func (x ReceiverContractExecutionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReceiverContractExecutionStatus.Descriptor instead.
func (ReceiverContractExecutionStatus) EnumDescriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{2}
}

type TxID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TxID) Reset() {
	*x = TxID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxID) ProtoMessage() {}

func (x *TxID) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxID.ProtoReflect.Descriptor instead.
func (*TxID) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{0}
}

func (x *TxID) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ReadMethodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address         string          `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Calldata        []byte          `protobuf:"bytes,2,opt,name=calldata,proto3" json:"calldata,omitempty"`
	ConfidenceLevel ConfidenceLevel `protobuf:"varint,3,opt,name=confidence_level,json=confidenceLevel,proto3,enum=don.evm.v1.ConfidenceLevel" json:"confidence_level,omitempty"`
}

func (x *ReadMethodRequest) Reset() {
	*x = ReadMethodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadMethodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadMethodRequest) ProtoMessage() {}

func (x *ReadMethodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadMethodRequest.ProtoReflect.Descriptor instead.
func (*ReadMethodRequest) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{1}
}

func (x *ReadMethodRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ReadMethodRequest) GetCalldata() []byte {
	if x != nil {
		return x.Calldata
	}
	return nil
}

func (x *ReadMethodRequest) GetConfidenceLevel() ConfidenceLevel {
	if x != nil {
		return x.ConfidenceLevel
	}
	return ConfidenceLevel_CONFIDENCE_LEVEL_UNSPECIFIED
}

// Represents a request to query logs
type QueryLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter          *FilterQuery    `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	ConfidenceLevel ConfidenceLevel `protobuf:"varint,2,opt,name=confidence_level,json=confidenceLevel,proto3,enum=don.evm.v1.ConfidenceLevel" json:"confidence_level,omitempty"`
}

func (x *QueryLogsRequest) Reset() {
	*x = QueryLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryLogsRequest) ProtoMessage() {}

func (x *QueryLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryLogsRequest.ProtoReflect.Descriptor instead.
func (*QueryLogsRequest) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{2}
}

func (x *QueryLogsRequest) GetFilter() *FilterQuery {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *QueryLogsRequest) GetConfidenceLevel() ConfidenceLevel {
	if x != nil {
		return x.ConfidenceLevel
	}
	return ConfidenceLevel_CONFIDENCE_LEVEL_UNSPECIFIED
}

type SubmitTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToAddress string     `protobuf:"bytes,1,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty"`
	GasConfig *GasConfig `protobuf:"bytes,2,opt,name=gas_config,json=gasConfig,proto3" json:"gas_config,omitempty"`
	Calldata  []byte     `protobuf:"bytes,3,opt,name=calldata,proto3" json:"calldata,omitempty"` // Optional
}

func (x *SubmitTransactionRequest) Reset() {
	*x = SubmitTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTransactionRequest) ProtoMessage() {}

func (x *SubmitTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTransactionRequest.ProtoReflect.Descriptor instead.
func (*SubmitTransactionRequest) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{3}
}

func (x *SubmitTransactionRequest) GetToAddress() string {
	if x != nil {
		return x.ToAddress
	}
	return ""
}

func (x *SubmitTransactionRequest) GetGasConfig() *GasConfig {
	if x != nil {
		return x.GasConfig
	}
	return nil
}

func (x *SubmitTransactionRequest) GetCalldata() []byte {
	if x != nil {
		return x.Calldata
	}
	return nil
}

type SignedReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Report     []byte   `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
	Context    []byte   `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
	Signatures [][]byte `protobuf:"bytes,3,rep,name=signatures,proto3" json:"signatures,omitempty"`
	Id         []byte   `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SignedReport) Reset() {
	*x = SignedReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedReport) ProtoMessage() {}

func (x *SignedReport) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedReport.ProtoReflect.Descriptor instead.
func (*SignedReport) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{4}
}

func (x *SignedReport) GetReport() []byte {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *SignedReport) GetContext() []byte {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *SignedReport) GetSignatures() [][]byte {
	if x != nil {
		return x.Signatures
	}
	return nil
}

func (x *SignedReport) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

// Represents a request to submit a transaction
type WriteAsReportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Receiver  string     `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty"`
	Data      []byte     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	GasConfig *GasConfig `protobuf:"bytes,3,opt,name=gas_config,json=gasConfig,proto3" json:"gas_config,omitempty"`
}

func (x *WriteAsReportRequest) Reset() {
	*x = WriteAsReportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteAsReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteAsReportRequest) ProtoMessage() {}

func (x *WriteAsReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteAsReportRequest.ProtoReflect.Descriptor instead.
func (*WriteAsReportRequest) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{5}
}

func (x *WriteAsReportRequest) GetReceiver() string {
	if x != nil {
		return x.Receiver
	}
	return ""
}

func (x *WriteAsReportRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *WriteAsReportRequest) GetGasConfig() *GasConfig {
	if x != nil {
		return x.GasConfig
	}
	return nil
}

type WriteAsReportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxStatus                        TxStatus                        `protobuf:"varint,1,opt,name=tx_status,json=txStatus,proto3,enum=don.evm.v1.TxStatus" json:"tx_status,omitempty"`
	ReceiverContractExecutionStatus ReceiverContractExecutionStatus `protobuf:"varint,2,opt,name=receiver_contract_execution_status,json=receiverContractExecutionStatus,proto3,enum=don.evm.v1.ReceiverContractExecutionStatus" json:"receiver_contract_execution_status,omitempty"`
	TxHash                          []byte                          `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (x *WriteAsReportResponse) Reset() {
	*x = WriteAsReportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteAsReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteAsReportResponse) ProtoMessage() {}

func (x *WriteAsReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteAsReportResponse.ProtoReflect.Descriptor instead.
func (*WriteAsReportResponse) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{6}
}

func (x *WriteAsReportResponse) GetTxStatus() TxStatus {
	if x != nil {
		return x.TxStatus
	}
	return TxStatus_CONFIRMED
}

func (x *WriteAsReportResponse) GetReceiverContractExecutionStatus() ReceiverContractExecutionStatus {
	if x != nil {
		return x.ReceiverContractExecutionStatus
	}
	return ReceiverContractExecutionStatus_SUCCESS
}

func (x *WriteAsReportResponse) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address     string   `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`                             // common.Address represented as bytes
	Topics      [][]byte `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`                               // []common.Hash represented as repeated bytes
	Data        []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`                                   // []byte represented as bytes
	BlockNumber uint64   `protobuf:"varint,4,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"` // uint64
	TxHash      string   `protobuf:"bytes,5,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`                 // common.Hash represented as string
	TxIndex     uint32   `protobuf:"varint,6,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`             // uint represented as uint32
	BlockHash   string   `protobuf:"bytes,7,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`        // common.Hash represented as string
	Index       uint32   `protobuf:"varint,8,opt,name=index,proto3" json:"index,omitempty"`                                // uint represented as uint32
	Removed     bool     `protobuf:"varint,9,opt,name=removed,proto3" json:"removed,omitempty"`                            // bool
}

func (x *Log) Reset() {
	*x = Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{7}
}

func (x *Log) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Log) GetTopics() [][]byte {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *Log) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Log) GetBlockNumber() uint64 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *Log) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *Log) GetTxIndex() uint32 {
	if x != nil {
		return x.TxIndex
	}
	return 0
}

func (x *Log) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

func (x *Log) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Log) GetRemoved() bool {
	if x != nil {
		return x.Removed
	}
	return false
}

type FilterQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to FromBlock:
	//
	//	*FilterQuery_FromBlockNumber
	//	*FilterQuery_FromBlockTag
	FromBlock isFilterQuery_FromBlock `protobuf_oneof:"from_block"`
	// Types that are assignable to ToBlock:
	//
	//	*FilterQuery_ToBlockNumber
	//	*FilterQuery_ToBlockTag
	ToBlock   isFilterQuery_ToBlock `protobuf_oneof:"to_block"`
	Address   []string              `protobuf:"bytes,5,rep,name=address,proto3" json:"address,omitempty"`
	Topics    []string              `protobuf:"bytes,6,rep,name=topics,proto3" json:"topics,omitempty"`
	BlockHash string                `protobuf:"bytes,7,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (x *FilterQuery) Reset() {
	*x = FilterQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterQuery) ProtoMessage() {}

func (x *FilterQuery) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterQuery.ProtoReflect.Descriptor instead.
func (*FilterQuery) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{8}
}

func (m *FilterQuery) GetFromBlock() isFilterQuery_FromBlock {
	if m != nil {
		return m.FromBlock
	}
	return nil
}

func (x *FilterQuery) GetFromBlockNumber() uint64 {
	if x, ok := x.GetFromBlock().(*FilterQuery_FromBlockNumber); ok {
		return x.FromBlockNumber
	}
	return 0
}

func (x *FilterQuery) GetFromBlockTag() string {
	if x, ok := x.GetFromBlock().(*FilterQuery_FromBlockTag); ok {
		return x.FromBlockTag
	}
	return ""
}

func (m *FilterQuery) GetToBlock() isFilterQuery_ToBlock {
	if m != nil {
		return m.ToBlock
	}
	return nil
}

func (x *FilterQuery) GetToBlockNumber() uint64 {
	if x, ok := x.GetToBlock().(*FilterQuery_ToBlockNumber); ok {
		return x.ToBlockNumber
	}
	return 0
}

func (x *FilterQuery) GetToBlockTag() string {
	if x, ok := x.GetToBlock().(*FilterQuery_ToBlockTag); ok {
		return x.ToBlockTag
	}
	return ""
}

func (x *FilterQuery) GetAddress() []string {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *FilterQuery) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *FilterQuery) GetBlockHash() string {
	if x != nil {
		return x.BlockHash
	}
	return ""
}

type isFilterQuery_FromBlock interface {
	isFilterQuery_FromBlock()
}

type FilterQuery_FromBlockNumber struct {
	FromBlockNumber uint64 `protobuf:"varint,1,opt,name=from_block_number,json=fromBlockNumber,proto3,oneof"`
}

type FilterQuery_FromBlockTag struct {
	FromBlockTag string `protobuf:"bytes,2,opt,name=from_block_tag,json=fromBlockTag,proto3,oneof"` // e.g., "latest"
}

func (*FilterQuery_FromBlockNumber) isFilterQuery_FromBlock() {}

func (*FilterQuery_FromBlockTag) isFilterQuery_FromBlock() {}

type isFilterQuery_ToBlock interface {
	isFilterQuery_ToBlock()
}

type FilterQuery_ToBlockNumber struct {
	ToBlockNumber uint64 `protobuf:"varint,3,opt,name=to_block_number,json=toBlockNumber,proto3,oneof"`
}

type FilterQuery_ToBlockTag struct {
	ToBlockTag string `protobuf:"bytes,4,opt,name=to_block_tag,json=toBlockTag,proto3,oneof"` // e.g., "latest"
}

func (*FilterQuery_ToBlockNumber) isFilterQuery_ToBlock() {}

func (*FilterQuery_ToBlockTag) isFilterQuery_ToBlock() {}

type LogTriggerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterQuery *FilterQuery `protobuf:"bytes,1,opt,name=filterQuery,proto3" json:"filterQuery,omitempty"`
}

func (x *LogTriggerRequest) Reset() {
	*x = LogTriggerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogTriggerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogTriggerRequest) ProtoMessage() {}

func (x *LogTriggerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogTriggerRequest.ProtoReflect.Descriptor instead.
func (*LogTriggerRequest) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{9}
}

func (x *LogTriggerRequest) GetFilterQuery() *FilterQuery {
	if x != nil {
		return x.FilterQuery
	}
	return nil
}

type EvmReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowExecutionId      string `protobuf:"bytes,1,opt,name=workflowExecutionId,proto3" json:"workflowExecutionId,omitempty"`
	WorkflowId               string `protobuf:"bytes,2,opt,name=workflowId,proto3" json:"workflowId,omitempty"`
	WorkflowOwner            string `protobuf:"bytes,3,opt,name=workflowOwner,proto3" json:"workflowOwner,omitempty"`
	WorkflowName             string `protobuf:"bytes,4,opt,name=workflowName,proto3" json:"workflowName,omitempty"`
	ReportId                 string `protobuf:"bytes,6,opt,name=reportId,proto3" json:"reportId,omitempty"`
	WorkflowDonId            uint32 `protobuf:"varint,7,opt,name=workflowDonId,proto3" json:"workflowDonId,omitempty"`
	WorkflowDonConfigVersion uint32 `protobuf:"varint,8,opt,name=workflowDonConfigVersion,proto3" json:"workflowDonConfigVersion,omitempty"`
	KeyId                    string `protobuf:"bytes,9,opt,name=keyId,proto3" json:"keyId,omitempty"`
	Calldata                 []byte `protobuf:"bytes,10,opt,name=calldata,proto3" json:"calldata,omitempty"`
}

func (x *EvmReport) Reset() {
	*x = EvmReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvmReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvmReport) ProtoMessage() {}

func (x *EvmReport) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvmReport.ProtoReflect.Descriptor instead.
func (*EvmReport) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{10}
}

func (x *EvmReport) GetWorkflowExecutionId() string {
	if x != nil {
		return x.WorkflowExecutionId
	}
	return ""
}

func (x *EvmReport) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *EvmReport) GetWorkflowOwner() string {
	if x != nil {
		return x.WorkflowOwner
	}
	return ""
}

func (x *EvmReport) GetWorkflowName() string {
	if x != nil {
		return x.WorkflowName
	}
	return ""
}

func (x *EvmReport) GetReportId() string {
	if x != nil {
		return x.ReportId
	}
	return ""
}

func (x *EvmReport) GetWorkflowDonId() uint32 {
	if x != nil {
		return x.WorkflowDonId
	}
	return 0
}

func (x *EvmReport) GetWorkflowDonConfigVersion() uint32 {
	if x != nil {
		return x.WorkflowDonConfigVersion
	}
	return 0
}

func (x *EvmReport) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *EvmReport) GetCalldata() []byte {
	if x != nil {
		return x.Calldata
	}
	return nil
}

// Placeholder messages for types defined elsewhere
type GasConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GasConfig) Reset() {
	*x = GasConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GasConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GasConfig) ProtoMessage() {}

func (x *GasConfig) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GasConfig.ProtoReflect.Descriptor instead.
func (*GasConfig) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{11}
}

type LogList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs []*Log `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (x *LogList) Reset() {
	*x = LogList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evm_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogList) ProtoMessage() {}

func (x *LogList) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogList.ProtoReflect.Descriptor instead.
func (*LogList) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{12}
}

func (x *LogList) GetLogs() []*Log {
	if x != nil {
		return x.Logs
	}
	return nil
}

// represents filter for polling and caching logs
type LPFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxLogsKept   uint64   `protobuf:"varint,1,opt,name=max_logs_kept,json=maxLogsKept,proto3" json:"max_logs_kept,omitempty"`     // maximum number of logs to retain ( 0 = unlimited )
	RetentionTime int64    `protobuf:"varint,2,opt,name=retention_time,json=retentionTime,proto3" json:"retention_time,omitempty"` // maximum amount of time to retain logs in seconds
	LogsPerBlock  uint64   `protobuf:"varint,3,opt,name=logs_per_block,json=logsPerBlock,proto3" json:"logs_per_block,omitempty"`  // rate limit ( maximum # of logs per block, 0 = unlimited )
	Name          string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                                         // filter name, has to persist for removing filter
	Addresses     []string `protobuf:"bytes,5,rep,name=addresses,proto3" json:"addresses,omitempty"`                               // list of addresses to include
	EventSigs     []string `protobuf:"bytes,6,rep,name=event_sigs,json=eventSigs,proto3" json:"event_sigs,omitempty"`              // list of possible signatures (aka topic1)
	Topic2        []*Hash  `protobuf:"bytes,7,rep,name=topic2,proto3" json:"topic2,omitempty"`                                     // list of possible values for topic2
	Topic3        []*Hash  `protobuf:"bytes,8,rep,name=topic3,proto3" json:"topic3,omitempty"`                                     // list of possible values for topic3
	Topic4        []*Hash  `protobuf:"bytes,9,rep,name=topic4,proto3" json:"topic4,omitempty"`                                     // list of possible values for topic4
}

func (x *LPFilter) Reset() {
	*x = LPFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evm_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LPFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LPFilter) ProtoMessage() {}

func (x *LPFilter) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LPFilter.ProtoReflect.Descriptor instead.
func (*LPFilter) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{13}
}

func (x *LPFilter) GetMaxLogsKept() uint64 {
	if x != nil {
		return x.MaxLogsKept
	}
	return 0
}

func (x *LPFilter) GetRetentionTime() int64 {
	if x != nil {
		return x.RetentionTime
	}
	return 0
}

func (x *LPFilter) GetLogsPerBlock() uint64 {
	if x != nil {
		return x.LogsPerBlock
	}
	return 0
}

func (x *LPFilter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LPFilter) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *LPFilter) GetEventSigs() []string {
	if x != nil {
		return x.EventSigs
	}
	return nil
}

func (x *LPFilter) GetTopic2() []*Hash {
	if x != nil {
		return x.Topic2
	}
	return nil
}

func (x *LPFilter) GetTopic3() []*Hash {
	if x != nil {
		return x.Topic3
	}
	return nil
}

func (x *LPFilter) GetTopic4() []*Hash {
	if x != nil {
		return x.Topic4
	}
	return nil
}

// ----- Message Types -----
// represents evm-style Address
// [20]byte fix-sized array
type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address []byte `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evm_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{14}
}

func (x *Address) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

// represents evm-style hash
// [32]byte fix-sized array
type Hash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *Hash) Reset() {
	*x = Hash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evm_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hash) ProtoMessage() {}

func (x *Hash) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hash.ProtoReflect.Descriptor instead.
func (*Hash) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{15}
}

func (x *Hash) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

// represents solidity-spec abi encoded bytes
type ABIPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Abi []byte `protobuf:"bytes,1,opt,name=abi,proto3" json:"abi,omitempty"`
}

func (x *ABIPayload) Reset() {
	*x = ABIPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evm_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ABIPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ABIPayload) ProtoMessage() {}

func (x *ABIPayload) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ABIPayload.ProtoReflect.Descriptor instead.
func (*ABIPayload) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{16}
}

func (x *ABIPayload) GetAbi() []byte {
	if x != nil {
		return x.Abi
	}
	return nil
}

type RegisterLogTrackingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *LPFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *RegisterLogTrackingRequest) Reset() {
	*x = RegisterLogTrackingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evm_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterLogTrackingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterLogTrackingRequest) ProtoMessage() {}

func (x *RegisterLogTrackingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterLogTrackingRequest.ProtoReflect.Descriptor instead.
func (*RegisterLogTrackingRequest) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{17}
}

func (x *RegisterLogTrackingRequest) GetFilter() *LPFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type UnregisterLogTrackingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterName string `protobuf:"bytes,1,opt,name=filter_name,json=filterName,proto3" json:"filter_name,omitempty"`
}

func (x *UnregisterLogTrackingRequest) Reset() {
	*x = UnregisterLogTrackingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_evm_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnregisterLogTrackingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnregisterLogTrackingRequest) ProtoMessage() {}

func (x *UnregisterLogTrackingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_evm_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnregisterLogTrackingRequest.ProtoReflect.Descriptor instead.
func (*UnregisterLogTrackingRequest) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{18}
}

func (x *UnregisterLogTrackingRequest) GetFilterName() string {
	if x != nil {
		return x.FilterName
	}
	return ""
}

var File_evm_proto protoreflect.FileDescriptor

var file_evm_proto_rawDesc = []byte{
	0x0a, 0x09, 0x65, 0x76, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x64, 0x6f, 0x6e,
	0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1c, 0x0a, 0x04, 0x54, 0x78, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x46, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x6e,
	0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x8b, 0x01, 0x0a, 0x10, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x64, 0x6f, 0x6e, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x46,
	0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x64, 0x6f, 0x6e, 0x2e, 0x65,
	0x76, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x8b, 0x01, 0x0a, 0x18, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x34, 0x0a, 0x0a, 0x67, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x6f, 0x6e, 0x2e, 0x65, 0x76, 0x6d,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x67,
	0x61, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x70, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x22, 0x7c, 0x0a, 0x14, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41,
	0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x34,
	0x0a, 0x0a, 0x67, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x6f, 0x6e, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x09, 0x67, 0x61, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0xdd, 0x01, 0x0a, 0x15, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x73,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x09, 0x74, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x64, 0x6f, 0x6e, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x74, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x78, 0x0a, 0x22, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e,
	0x64, 0x6f, 0x6e, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x1f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74,
	0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x78,
	0x48, 0x61, 0x73, 0x68, 0x22, 0xf1, 0x01, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x74, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x22, 0x9c, 0x02, 0x0a, 0x0b, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x67, 0x12, 0x28,
	0x0a, 0x0f, 0x74, 0x6f, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x48, 0x01, 0x52, 0x0d, 0x74, 0x6f, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x0a, 0x74, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x42, 0x0c, 0x0a,
	0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x0a, 0x0a, 0x08, 0x74,
	0x6f, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x4e, 0x0a, 0x11, 0x4c, 0x6f, 0x67, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0b,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x64, 0x6f, 0x6e, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0xdd, 0x02, 0x0a, 0x09, 0x45, 0x76, 0x6d, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x22, 0x0a,
	0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x44, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x44, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x44,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x44,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x64, 0x61, 0x74,
	0x61, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x22, 0x0b, 0x0a, 0x09, 0x47, 0x61, 0x73, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x2e, 0x0a, 0x07, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x64, 0x6f, 0x6e, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x52, 0x04,
	0x6c, 0x6f, 0x67, 0x73, 0x22, 0xca, 0x02, 0x0a, 0x08, 0x4c, 0x50, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x6b, 0x65,
	0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4c, 0x6f, 0x67,
	0x73, 0x4b, 0x65, 0x70, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x73, 0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69,
	0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53,
	0x69, 0x67, 0x73, 0x12, 0x28, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x32, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x6e, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x32, 0x12, 0x28, 0x0a,
	0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x33, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x64, 0x6f, 0x6e, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x33, 0x12, 0x28, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x34, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x6f, 0x6e, 0x2e, 0x65, 0x76,
	0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x34, 0x22, 0x23, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x1a, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12,
	0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61,
	0x73, 0x68, 0x22, 0x1e, 0x0a, 0x0a, 0x41, 0x42, 0x49, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x62, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x61,
	0x62, 0x69, 0x22, 0x4a, 0x0a, 0x1a, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2c, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x64, 0x6f, 0x6e, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x50,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x3f,
	0x0a, 0x1c, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x2a,
	0x60, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x57, 0x10, 0x01, 0x12, 0x0a, 0x0a,
	0x06, 0x4d, 0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x49, 0x47,
	0x48, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x10,
	0x04, 0x2a, 0x34, 0x0a, 0x08, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a,
	0x09, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x3b, 0x0a, 0x1f, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55,
	0x52, 0x45, 0x10, 0x01, 0x32, 0xbe, 0x05, 0x0a, 0x06, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12,
	0x3c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10,
	0x2e, 0x64, 0x6f, 0x6e, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x49, 0x44,
	0x1a, 0x1b, 0x2e, 0x64, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x78, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x49, 0x0a,
	0x0a, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1d, 0x2e, 0x64, 0x6f,
	0x6e, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x64, 0x6f, 0x6e,
	0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x79, 0x74, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x3e, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x1c, 0x2e, 0x64, 0x6f, 0x6e, 0x2e, 0x65, 0x76, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x64, 0x6f, 0x6e, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x6f, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x13, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12,
	0x26, 0x2e, 0x64, 0x6f, 0x6e, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x59, 0x0a, 0x15, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x28, 0x2e, 0x64, 0x6f, 0x6e, 0x2e, 0x65,
	0x76, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x11, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x24, 0x2e, 0x64, 0x6f, 0x6e, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x64, 0x6f, 0x6e, 0x2e, 0x65, 0x76, 0x6d, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x78, 0x49, 0x44, 0x12, 0x54, 0x0a, 0x0d, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x41, 0x73, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x2e, 0x64, 0x6f, 0x6e, 0x2e, 0x65,
	0x76, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x73, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x64, 0x6f, 0x6e,
	0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x73, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a,
	0x0a, 0x4c, 0x6f, 0x67, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x64, 0x6f,
	0x6e, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x64, 0x6f, 0x6e,
	0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x22, 0x04, 0xd8, 0xb5, 0x18,
	0x01, 0x12, 0x52, 0x0a, 0x13, 0x4f, 0x6e, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x56,
	0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1d, 0x2e, 0x64, 0x6f, 0x6e, 0x2e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x22,
	0x04, 0xd8, 0xb5, 0x18, 0x01, 0x42, 0x4d, 0x5a, 0x4b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x6b, 0x69, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2f, 0x73, 0x74, 0x75, 0x62, 0x73, 0x2f, 0x64, 0x6f, 0x6e,
	0x2f, 0x65, 0x76, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_evm_proto_rawDescOnce sync.Once
	file_evm_proto_rawDescData = file_evm_proto_rawDesc
)

func file_evm_proto_rawDescGZIP() []byte {
	file_evm_proto_rawDescOnce.Do(func() {
		file_evm_proto_rawDescData = protoimpl.X.CompressGZIP(file_evm_proto_rawDescData)
	})
	return file_evm_proto_rawDescData
}

var file_evm_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_evm_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_evm_proto_goTypes = []any{
	(ConfidenceLevel)(0),                 // 0: don.evm.v1.ConfidenceLevel
	(TxStatus)(0),                        // 1: don.evm.v1.TxStatus
	(ReceiverContractExecutionStatus)(0), // 2: don.evm.v1.ReceiverContractExecutionStatus
	(*TxID)(nil),                         // 3: don.evm.v1.TxID
	(*ReadMethodRequest)(nil),            // 4: don.evm.v1.ReadMethodRequest
	(*QueryLogsRequest)(nil),             // 5: don.evm.v1.QueryLogsRequest
	(*SubmitTransactionRequest)(nil),     // 6: don.evm.v1.SubmitTransactionRequest
	(*SignedReport)(nil),                 // 7: don.evm.v1.SignedReport
	(*WriteAsReportRequest)(nil),         // 8: don.evm.v1.WriteAsReportRequest
	(*WriteAsReportResponse)(nil),        // 9: don.evm.v1.WriteAsReportResponse
	(*Log)(nil),                          // 10: don.evm.v1.Log
	(*FilterQuery)(nil),                  // 11: don.evm.v1.FilterQuery
	(*LogTriggerRequest)(nil),            // 12: don.evm.v1.LogTriggerRequest
	(*EvmReport)(nil),                    // 13: don.evm.v1.EvmReport
	(*GasConfig)(nil),                    // 14: don.evm.v1.GasConfig
	(*LogList)(nil),                      // 15: don.evm.v1.LogList
	(*LPFilter)(nil),                     // 16: don.evm.v1.LPFilter
	(*Address)(nil),                      // 17: don.evm.v1.Address
	(*Hash)(nil),                         // 18: don.evm.v1.Hash
	(*ABIPayload)(nil),                   // 19: don.evm.v1.ABIPayload
	(*RegisterLogTrackingRequest)(nil),   // 20: don.evm.v1.RegisterLogTrackingRequest
	(*UnregisterLogTrackingRequest)(nil), // 21: don.evm.v1.UnregisterLogTrackingRequest
	(*emptypb.Empty)(nil),                // 22: google.protobuf.Empty
	(*crosschain.TxResult)(nil),          // 23: don.crosschain.v1.TxResult
	(*crosschain.ByteArray)(nil),         // 24: don.crosschain.v1.ByteArray
	(*crosschain.BlockRange)(nil),        // 25: don.crosschain.v1.BlockRange
}
var file_evm_proto_depIdxs = []int32{
	0,  // 0: don.evm.v1.ReadMethodRequest.confidence_level:type_name -> don.evm.v1.ConfidenceLevel
	11, // 1: don.evm.v1.QueryLogsRequest.filter:type_name -> don.evm.v1.FilterQuery
	0,  // 2: don.evm.v1.QueryLogsRequest.confidence_level:type_name -> don.evm.v1.ConfidenceLevel
	14, // 3: don.evm.v1.SubmitTransactionRequest.gas_config:type_name -> don.evm.v1.GasConfig
	14, // 4: don.evm.v1.WriteAsReportRequest.gas_config:type_name -> don.evm.v1.GasConfig
	1,  // 5: don.evm.v1.WriteAsReportResponse.tx_status:type_name -> don.evm.v1.TxStatus
	2,  // 6: don.evm.v1.WriteAsReportResponse.receiver_contract_execution_status:type_name -> don.evm.v1.ReceiverContractExecutionStatus
	11, // 7: don.evm.v1.LogTriggerRequest.filterQuery:type_name -> don.evm.v1.FilterQuery
	10, // 8: don.evm.v1.LogList.logs:type_name -> don.evm.v1.Log
	18, // 9: don.evm.v1.LPFilter.topic2:type_name -> don.evm.v1.Hash
	18, // 10: don.evm.v1.LPFilter.topic3:type_name -> don.evm.v1.Hash
	18, // 11: don.evm.v1.LPFilter.topic4:type_name -> don.evm.v1.Hash
	16, // 12: don.evm.v1.RegisterLogTrackingRequest.filter:type_name -> don.evm.v1.LPFilter
	3,  // 13: don.evm.v1.Client.GetTxResult:input_type -> don.evm.v1.TxID
	4,  // 14: don.evm.v1.Client.ReadMethod:input_type -> don.evm.v1.ReadMethodRequest
	5,  // 15: don.evm.v1.Client.QueryLogs:input_type -> don.evm.v1.QueryLogsRequest
	20, // 16: don.evm.v1.Client.RegisterLogTracking:input_type -> don.evm.v1.RegisterLogTrackingRequest
	21, // 17: don.evm.v1.Client.UnregisterLogTracking:input_type -> don.evm.v1.UnregisterLogTrackingRequest
	6,  // 18: don.evm.v1.Client.SubmitTransaction:input_type -> don.evm.v1.SubmitTransactionRequest
	8,  // 19: don.evm.v1.Client.WriteAsReport:input_type -> don.evm.v1.WriteAsReportRequest
	12, // 20: don.evm.v1.Client.LogTrigger:input_type -> don.evm.v1.LogTriggerRequest
	22, // 21: don.evm.v1.Client.OnFinalityViolation:input_type -> google.protobuf.Empty
	23, // 22: don.evm.v1.Client.GetTxResult:output_type -> don.crosschain.v1.TxResult
	24, // 23: don.evm.v1.Client.ReadMethod:output_type -> don.crosschain.v1.ByteArray
	15, // 24: don.evm.v1.Client.QueryLogs:output_type -> don.evm.v1.LogList
	22, // 25: don.evm.v1.Client.RegisterLogTracking:output_type -> google.protobuf.Empty
	22, // 26: don.evm.v1.Client.UnregisterLogTracking:output_type -> google.protobuf.Empty
	3,  // 27: don.evm.v1.Client.SubmitTransaction:output_type -> don.evm.v1.TxID
	9,  // 28: don.evm.v1.Client.WriteAsReport:output_type -> don.evm.v1.WriteAsReportResponse
	10, // 29: don.evm.v1.Client.LogTrigger:output_type -> don.evm.v1.Log
	25, // 30: don.evm.v1.Client.OnFinalityViolation:output_type -> don.crosschain.v1.BlockRange
	22, // [22:31] is the sub-list for method output_type
	13, // [13:22] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_evm_proto_init() }
func file_evm_proto_init() {
	if File_evm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_evm_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*TxID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evm_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ReadMethodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evm_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*QueryLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evm_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*SubmitTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evm_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*SignedReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evm_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*WriteAsReportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evm_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*WriteAsReportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evm_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evm_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*FilterQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evm_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*LogTriggerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evm_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*EvmReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evm_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*GasConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evm_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*LogList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evm_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*LPFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evm_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evm_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*Hash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evm_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*ABIPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evm_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*RegisterLogTrackingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_evm_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*UnregisterLogTrackingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_evm_proto_msgTypes[8].OneofWrappers = []any{
		(*FilterQuery_FromBlockNumber)(nil),
		(*FilterQuery_FromBlockTag)(nil),
		(*FilterQuery_ToBlockNumber)(nil),
		(*FilterQuery_ToBlockTag)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_evm_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_evm_proto_goTypes,
		DependencyIndexes: file_evm_proto_depIdxs,
		EnumInfos:         file_evm_proto_enumTypes,
		MessageInfos:      file_evm_proto_msgTypes,
	}.Build()
	File_evm_proto = out.File
	file_evm_proto_rawDesc = nil
	file_evm_proto_goTypes = nil
	file_evm_proto_depIdxs = nil
}
