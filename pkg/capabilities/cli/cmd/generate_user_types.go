package cmd

import (
	"errors"
	"os"
	"path"
	"strings"
)

func GenerateUserTypes(info UserGenerationInfo) error {
	dir, err := os.ReadDir(info.Dir)
	if err != nil {
		return err
	}

	generatedInfo := GeneratedInfo{}
	err = errors.Join()
	for i, file := range dir {
		fileName := file.Name()
		if file.IsDir() || !strings.HasSuffix(fileName, ".go") {
			continue
		}

		rawContent, err2 := os.ReadFile(path.Join(info.Dir, fileName))
		if err2 != nil {
			err = errors.Join(err, err2)
		}

		content := string(rawContent)
		if strings.HasPrefix(content, "// Code generated by github.com/smartcontractkit/chainlink-common/pkg/capabilities/cli, DO NOT EDIT.") {
			continue
		}

		typeInfo := TypeInfo{CapabilityType: "common"}

		fileGeneratedInfo, err2 := generatedInfoFromSrc(content, "", getCapID(typeInfo), typeInfo, info.GenForStruct)

		if err2 != nil {
			err = errors.Join(err, err2)
			continue
		}

		if i == 0 {
			generatedInfo = fileGeneratedInfo
		} else {
			for name, strct := range fileGeneratedInfo.Types {
				generatedInfo.Types[name] = strct
			}
		}
	}

	if err != nil {
		return errors.Join(err)
	}

	return generateFromGoSrc(generatedInfo, info.Dir, info.LocalPrefix, info.Helpers, map[string]string{})
}

type UserGenerationInfo struct {
	Dir          string
	LocalPrefix  string
	Helpers      []WorkflowHelperGenerator
	GenForStruct func(string) bool
}
