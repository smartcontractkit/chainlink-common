// Code generated by github.com/smartcontractkit/chainlink-common/pkg/capabilities/protoc, DO NOT EDIT.

package basicaction

import (
	"errors"

	"google.golang.org/protobuf/types/known/anypb"

	"github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk"
	"github.com/smartcontractkit/chainlink-common/pkg/workflows/wasm/pb"
)

type BasicAction struct {
	// TODO config types (optional)
	// TODO capability interfaces.
	// Is this required if we're not doing chain abstraction?
	// KV store could use it if we have different kinds...
}

func (c *BasicAction) PerformAction(runtime sdk.DonRuntime, input *Inputs) sdk.Promise[*Outputs] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*Outputs](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&pb.CapabilityRequest{
		Id:      "basic-test-action@1.0.0",
		Payload: wrapped,
		Method:  "PerformAction",
	}), func(i *pb.CapabilityResponse) (*Outputs, error) {
		switch payload := i.Response.(type) {
		case *pb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *pb.CapabilityResponse_Payload:
			var output *Outputs
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}
