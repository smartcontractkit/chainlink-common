syntax = "proto3";

import "github.com/cloudevents/sdk-go/binding/format/protobuf/v2/pb/cloudevent.proto";

package chipingress.pb;

option go_package = "./pb";

// ChipIngress service provides a way for senders to produce CloudEvents messages to Kafka
service ChipIngress {
    // Publish sends a single CloudEvent to the ChipIngress service.
    rpc Publish (io.cloudevents.v1.CloudEvent) returns (PublishResponse) {}
// PublishBatch sends a batch of CloudEvents to the ChipIngress service.
// This method is atomic, meaning it will either succeed or fail for the entire batch.
// When the server receives a batch of events, it will open a kafka transaction, and begin producing each event sequentially in order received.
// If any 1 message fails, all previous messages in the same batch that were already produced won't be marked as committed,
// and the server will respond with an error.
// Consumers can set isolation.level=read_committed to only read committed records
    rpc PublishBatch (CloudEventBatch) returns (PublishResponse) {}
// Ping sends a request to the ChipIngress service to check if it is alive.
    rpc Ping(EmptyRequest) returns (PingResponse);
// StreamEvents; EXPERIMENTAL ~ allows clients to stream CloudEvents to the server.
// This API is experimental and may change in the future.
    rpc StreamEvents (stream StreamEventsRequest) returns (stream StreamEventsResponse) {} // New streaming endpoint
}

// CloudEventBatch is used to send many ChipIngress
message CloudEventBatch{
    repeated io.cloudevents.v1.CloudEvent events = 1;
}

message PublishResponse {
  repeated PublishResult results = 1;
}

message PublishResult {
  string eventId = 1;
}

// EmptyRequest is just an empty request
message EmptyRequest{}

// PingResponse responds to pings
message PingResponse {
	string message = 1;
}

// Define request and response messages for the new streaming endpoint
message StreamEventsRequest {
    io.cloudevents.v1.CloudEvent event = 1;
}

message StreamEventsResponse {
    string eventId = 1;
    string status = 2; // e.g., "success", "error"
}
