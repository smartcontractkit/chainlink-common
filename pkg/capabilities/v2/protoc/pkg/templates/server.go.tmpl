package server

import (
    "fmt"
    "context"
    "time"

    "google.golang.org/protobuf/types/known/emptypb"

    {{- range .Services }}
        {{- range .Methods }}
            {{- addImport .Input.GoIdent.GoImportPath "" }}
            {{- addImport .Output.GoIdent.GoImportPath "" }}
        {{- end }}
    {{- end }}

    {{- range allimports }}
    {{.}}
    {{- end }}

    "github.com/smartcontractkit/chainlink-common/pkg/types/core"
    "github.com/smartcontractkit/chainlink-common/pkg/capabilities"
    "github.com/smartcontractkit/chainlink-common/pkg/loop"
)

// Avoid unused imports if there is configuration type
var _ = emptypb.Empty{}

{{- range .Services}}
{{ $hasTriggers := false }}
{{ $hasActions := false }}
{{ $service := . }}
type {{.GoName}}Capability interface {
    {{- range .Methods}}
        {{- if isTrigger . }}
            {{ $hasTriggers = true }}
    Register{{.GoName}}(ctx context.Context, triggerID string, metadata capabilities.RequestMetadata, input *{{name .Input.GoIdent ""}}) (<- chan capabilities.TriggerAndId[*{{name .Output.GoIdent ""}}], error)
    Unregister{{.GoName}}(ctx context.Context, triggerID string, metadata capabilities.RequestMetadata, input *{{name .Input.GoIdent ""}}) error
        {{- else }}
            {{ $hasActions = true }}
    {{.GoName}}(ctx context.Context, metadata capabilities.RequestMetadata, input *{{name .Input.GoIdent ""}} {{if ne "emptypb.Empty" (ConfigType $service)}}, {{(ConfigType $service)}}{{ end }}) (*{{name .Output.GoIdent ""}}, error)
        {{- end }}
    {{- end }}


    Start(ctx context.Context) error
    Close() error
    HealthReport() map[string]error
    Name() string
    Description() string
    Ready() error
    Initialise(ctx context.Context, config string, telemetryService core.TelemetryService, store core.KeyValueStore, errorLog core.ErrorLog, pipelineRunner core.PipelineRunnerService, relayerSet core.RelayerSet, oracleFactory core.OracleFactory) error
}

func New{{.GoName}}Server(capability {{.GoName}}Capability) *{{.GoName}}Server {
    stopCh := make(chan struct{})
    return &{{.GoName}}Server{
        {{.GoName|LowerFirst}}Capability:   {{.GoName|LowerFirst}}Capability{ {{.GoName}}Capability: capability, stopCh: stopCh},
        stopCh: stopCh,
    }
}

type {{.GoName}}Server struct {
    {{.GoName|LowerFirst}}Capability
    capabilityRegistry core.CapabilitiesRegistry
    stopCh chan struct{}
}


func (cs *{{.GoName}}Server) Initialise(ctx context.Context, config string, telemetryService core.TelemetryService, store core.KeyValueStore, capabilityRegistry core.CapabilitiesRegistry, errorLog core.ErrorLog, pipelineRunner core.PipelineRunnerService, relayerSet core.RelayerSet, oracleFactory core.OracleFactory) error {
    if err := cs.{{.GoName}}Capability.Initialise(ctx, config, telemetryService, store, errorLog, pipelineRunner, relayerSet, oracleFactory); err != nil {
        return fmt.Errorf("error when initializing capability: %w", err)
    }

    cs.capabilityRegistry = capabilityRegistry

	if err := capabilityRegistry.Add(ctx, &{{.GoName|LowerFirst}}Capability{
	    {{.GoName}}Capability: cs.{{.GoName}}Capability,
	}); err != nil {
		return fmt.Errorf("error when adding kv store action to the registry: %w", err)
	}

	return nil
}

func (cs *{{.GoName}}Server) Close() error{
    ctx, cancel := context.WithTimeout(context.Background(), time.Second)
	defer cancel()

    if cs.capabilityRegistry != nil {
        if err := cs.capabilityRegistry.Remove(ctx, "{{(CapabilityId $service)}}"); err != nil {
            return err
        }
    }

    if cs.stopCh != nil {
        close(cs.stopCh)
    }

	return cs.{{.GoName|LowerFirst}}Capability.Close()
}


func (cs *{{.GoName}}Server) Infos(ctx context.Context) ([]capabilities.CapabilityInfo, error) {
    info, err := cs.{{.GoName|LowerFirst}}Capability.Info(ctx)
    if err != nil {
        return nil, err
    }
    return []capabilities.CapabilityInfo{info}, nil
}

type {{.GoName|LowerFirst}}Capability struct {
    {{.GoName}}Capability
    stopCh chan struct{}
}

func (c *{{.GoName|LowerFirst}}Capability) Info(ctx context.Context) (capabilities.CapabilityInfo, error) {
    // Maybe we do need to split it out, even if the user doesn't see it
	return capabilities.NewCapabilityInfo("{{(CapabilityId $service)}}", capabilities.CapabilityTypeCombined, c.{{.GoName}}Capability.Description())
}


var _ capabilities.ExecutableAndTriggerCapability = (*{{.GoName|LowerFirst}}Capability)(nil)

func (c *{{.GoName|LowerFirst}}Capability) RegisterTrigger(ctx context.Context, request capabilities.TriggerRegistrationRequest) (<-chan capabilities.TriggerResponse, error) {
{{- if $hasTriggers }}
    switch request.Method {
        {{- range .Methods}}
        {{- if (isTrigger .) }}
            case "{{.GoName}}":
                input := &{{name .Input.GoIdent ""}}{}
                return capabilities.RegisterTrigger(ctx, c.stopCh, "{{(CapabilityId $service)}}", request, input, c.{{$service.GoName}}Capability.Register{{.GoName}})
        {{- end }}
        {{- if (MapToUntypedAPI .) }}
            case "":
                input := &{{name .Input.GoIdent ""}}{}
                return capabilities.RegisterTrigger(ctx, c.stopCh, "{{(CapabilityId $service)}}", request, input, c.{{$service.GoName}}Capability.Register{{.GoName}})
        {{- end }}
        {{- end }}
        	default:
        	    return nil, fmt.Errorf("trigger %s not found", request.Method)
        }
{{- else }}
    return nil, fmt.Errorf("trigger %s not found", request.Method)
{{- end }}
}

func (c *{{.GoName|LowerFirst}}Capability) UnregisterTrigger(ctx context.Context, request capabilities.TriggerRegistrationRequest) error {
{{- if $hasTriggers	  }}
	    switch request.Method {
            {{- range .Methods}}
            {{- if (isTrigger .) }}
                case "{{.GoName}}":
                    input := &{{name .Input.GoIdent ""}}{}
                    _, err := capabilities.FromValueOrAny(request.Config, request.Payload, input)
                    if err != nil {
                        return err
                    }
                    return c.{{$service.GoName}}Capability.Unregister{{.GoName}}(ctx, request.TriggerID, request.Metadata, input)
            {{- end }}
            {{- if (MapToUntypedAPI .) }}
                case "":
                    input := &{{name .Input.GoIdent ""}}{}
                    _, err := capabilities.FromValueOrAny(request.Config, request.Payload, input)
                    if err != nil {
                        return err
                    }
                    return c.{{$service.GoName}}Capability.Unregister{{.GoName}}(ctx, request.TriggerID, request.Metadata, input)
            {{- end }}
            {{- end }}
            	default:
            	    return fmt.Errorf("method %s not found", request.Method)
            }
{{- else }}
    return fmt.Errorf("trigger %s not found", request.Method)
{{- end }}
}

func (c *{{.GoName|LowerFirst}}Capability) RegisterToWorkflow(ctx context.Context, request capabilities.RegisterToWorkflowRequest) error {
	return nil
}

func (c *{{.GoName|LowerFirst}}Capability) UnregisterFromWorkflow(ctx context.Context, request capabilities.UnregisterFromWorkflowRequest) error {
	return nil
}

func (c *{{.GoName|LowerFirst}}Capability) Execute(ctx context.Context, request capabilities.CapabilityRequest) (capabilities.CapabilityResponse, error) {
{{- if $hasActions }}
    response := capabilities.CapabilityResponse{}
	switch request.Method {
    {{- range .Methods}}
    {{- if  not (isTrigger .) }}
        case "{{.GoName}}":
            input := &{{name .Input.GoIdent ""}}{}
            config := &{{ConfigType $service}}{}
            {{- if eq "emptypb.Empty" (ConfigType $service) }}
            wrapped := func(ctx context.Context, metadata capabilities.RequestMetadata, input *{{name .Input.GoIdent ""}}, _ *emptypb.Empty) (*{{name .Output.GoIdent ""}}, error) {
                return c.{{$service.GoName}}Capability.{{.GoName}}(ctx, metadata, input)
            }
            return capabilities.Execute(ctx, request, input, config, wrapped)
            {{- else }}
            return capabilities.Execute(ctx, request, input, config, c.{{.GoName}}Capability.{{.GoName}})
            {{- end }}
          {{- if (MapToUntypedAPI .) }}
         case "":
             input := &{{name .Input.GoIdent ""}}{}
             config := &{{ConfigType $service}}{}
             {{- if eq "emptypb.Empty" (ConfigType $service) }}
             wrapped := func(ctx context.Context, metadata capabilities.RequestMetadata, input *{{name .Input.GoIdent ""}}, _ *emptypb.Empty) (*{{name .Output.GoIdent ""}}, error) {
                 return c.{{$service.GoName}}Capability.{{.GoName}}(ctx, metadata, input)
             }
             return capabilities.Execute(ctx, request, input, config, wrapped)
             {{- else }}
             return capabilities.Execute(ctx, request, input, config, c.{{.GoName}}Capability.{{.GoName}})
             {{- end }}
          {{- end }}
    {{- end }}
    {{- end }}
    	default:
    	    return response, fmt.Errorf("method %s not found", request.Method)
    }
{{- else }}
    return capabilities.CapabilityResponse{}, fmt.Errorf("method %s not found", request.Method)
{{- end }}
}

{{- end }}