// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	log "go.opentelemetry.io/otel/sdk/log"

	mock "github.com/stretchr/testify/mock"
)

// OTLPExporter is an autogenerated mock type for the OTLPExporter type
type OTLPExporter struct {
	mock.Mock
}

type OTLPExporter_Expecter struct {
	mock *mock.Mock
}

func (_m *OTLPExporter) EXPECT() *OTLPExporter_Expecter {
	return &OTLPExporter_Expecter{mock: &_m.Mock}
}

// Export provides a mock function with given fields: ctx, records
func (_m *OTLPExporter) Export(ctx context.Context, records []log.Record) error {
	ret := _m.Called(ctx, records)

	if len(ret) == 0 {
		panic("no return value specified for Export")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []log.Record) error); ok {
		r0 = rf(ctx, records)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OTLPExporter_Export_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Export'
type OTLPExporter_Export_Call struct {
	*mock.Call
}

// Export is a helper method to define mock.On call
//   - ctx context.Context
//   - records []log.Record
func (_e *OTLPExporter_Expecter) Export(ctx interface{}, records interface{}) *OTLPExporter_Export_Call {
	return &OTLPExporter_Export_Call{Call: _e.mock.On("Export", ctx, records)}
}

func (_c *OTLPExporter_Export_Call) Run(run func(ctx context.Context, records []log.Record)) *OTLPExporter_Export_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]log.Record))
	})
	return _c
}

func (_c *OTLPExporter_Export_Call) Return(_a0 error) *OTLPExporter_Export_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OTLPExporter_Export_Call) RunAndReturn(run func(context.Context, []log.Record) error) *OTLPExporter_Export_Call {
	_c.Call.Return(run)
	return _c
}

// ForceFlush provides a mock function with given fields: ctx
func (_m *OTLPExporter) ForceFlush(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ForceFlush")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OTLPExporter_ForceFlush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForceFlush'
type OTLPExporter_ForceFlush_Call struct {
	*mock.Call
}

// ForceFlush is a helper method to define mock.On call
//   - ctx context.Context
func (_e *OTLPExporter_Expecter) ForceFlush(ctx interface{}) *OTLPExporter_ForceFlush_Call {
	return &OTLPExporter_ForceFlush_Call{Call: _e.mock.On("ForceFlush", ctx)}
}

func (_c *OTLPExporter_ForceFlush_Call) Run(run func(ctx context.Context)) *OTLPExporter_ForceFlush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *OTLPExporter_ForceFlush_Call) Return(_a0 error) *OTLPExporter_ForceFlush_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OTLPExporter_ForceFlush_Call) RunAndReturn(run func(context.Context) error) *OTLPExporter_ForceFlush_Call {
	_c.Call.Return(run)
	return _c
}

// Shutdown provides a mock function with given fields: ctx
func (_m *OTLPExporter) Shutdown(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OTLPExporter_Shutdown_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Shutdown'
type OTLPExporter_Shutdown_Call struct {
	*mock.Call
}

// Shutdown is a helper method to define mock.On call
//   - ctx context.Context
func (_e *OTLPExporter_Expecter) Shutdown(ctx interface{}) *OTLPExporter_Shutdown_Call {
	return &OTLPExporter_Shutdown_Call{Call: _e.mock.On("Shutdown", ctx)}
}

func (_c *OTLPExporter_Shutdown_Call) Run(run func(ctx context.Context)) *OTLPExporter_Shutdown_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *OTLPExporter_Shutdown_Call) Return(_a0 error) *OTLPExporter_Shutdown_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OTLPExporter_Shutdown_Call) RunAndReturn(run func(context.Context) error) *OTLPExporter_Shutdown_Call {
	_c.Call.Return(run)
	return _c
}

// NewOTLPExporter creates a new instance of OTLPExporter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOTLPExporter(t interface {
	mock.TestingT
	Cleanup(func())
}) *OTLPExporter {
	mock := &OTLPExporter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
