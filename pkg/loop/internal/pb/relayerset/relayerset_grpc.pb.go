// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: relayerset.proto

package relayerset

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RelayerSet_Get_FullMethodName                 = "/loop.relayerset.RelayerSet/Get"
	RelayerSet_List_FullMethodName                = "/loop.relayerset.RelayerSet/List"
	RelayerSet_NewPluginProvider_FullMethodName   = "/loop.relayerset.RelayerSet/NewPluginProvider"
	RelayerSet_NewContractReader_FullMethodName   = "/loop.relayerset.RelayerSet/NewContractReader"
	RelayerSet_NewContractWriter_FullMethodName   = "/loop.relayerset.RelayerSet/NewContractWriter"
	RelayerSet_StartRelayer_FullMethodName        = "/loop.relayerset.RelayerSet/StartRelayer"
	RelayerSet_CloseRelayer_FullMethodName        = "/loop.relayerset.RelayerSet/CloseRelayer"
	RelayerSet_RelayerReady_FullMethodName        = "/loop.relayerset.RelayerSet/RelayerReady"
	RelayerSet_RelayerHealthReport_FullMethodName = "/loop.relayerset.RelayerSet/RelayerHealthReport"
	RelayerSet_RelayerName_FullMethodName         = "/loop.relayerset.RelayerSet/RelayerName"
	RelayerSet_RelayerLatestHead_FullMethodName   = "/loop.relayerset.RelayerSet/RelayerLatestHead"
)

// RelayerSetClient is the client API for RelayerSet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelayerSetClient interface {
	Get(ctx context.Context, in *GetRelayerRequest, opts ...grpc.CallOption) (*GetRelayerResponse, error)
	List(ctx context.Context, in *ListAllRelayersRequest, opts ...grpc.CallOption) (*ListAllRelayersResponse, error)
	NewPluginProvider(ctx context.Context, in *NewPluginProviderRequest, opts ...grpc.CallOption) (*NewPluginProviderResponse, error)
	NewContractReader(ctx context.Context, in *NewContractReaderRequest, opts ...grpc.CallOption) (*NewContractReaderResponse, error)
	NewContractWriter(ctx context.Context, in *NewContractWriterRequest, opts ...grpc.CallOption) (*NewContractWriterResponse, error)
	StartRelayer(ctx context.Context, in *RelayerId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CloseRelayer(ctx context.Context, in *RelayerId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RelayerReady(ctx context.Context, in *RelayerId, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RelayerHealthReport(ctx context.Context, in *RelayerId, opts ...grpc.CallOption) (*RelayerHealthReportResponse, error)
	RelayerName(ctx context.Context, in *RelayerId, opts ...grpc.CallOption) (*RelayerNameResponse, error)
	RelayerLatestHead(ctx context.Context, in *LatestHeadRequest, opts ...grpc.CallOption) (*LatestHeadResponse, error)
}

type relayerSetClient struct {
	cc grpc.ClientConnInterface
}

func NewRelayerSetClient(cc grpc.ClientConnInterface) RelayerSetClient {
	return &relayerSetClient{cc}
}

func (c *relayerSetClient) Get(ctx context.Context, in *GetRelayerRequest, opts ...grpc.CallOption) (*GetRelayerResponse, error) {
	out := new(GetRelayerResponse)
	err := c.cc.Invoke(ctx, RelayerSet_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayerSetClient) List(ctx context.Context, in *ListAllRelayersRequest, opts ...grpc.CallOption) (*ListAllRelayersResponse, error) {
	out := new(ListAllRelayersResponse)
	err := c.cc.Invoke(ctx, RelayerSet_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayerSetClient) NewPluginProvider(ctx context.Context, in *NewPluginProviderRequest, opts ...grpc.CallOption) (*NewPluginProviderResponse, error) {
	out := new(NewPluginProviderResponse)
	err := c.cc.Invoke(ctx, RelayerSet_NewPluginProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayerSetClient) NewContractReader(ctx context.Context, in *NewContractReaderRequest, opts ...grpc.CallOption) (*NewContractReaderResponse, error) {
	out := new(NewContractReaderResponse)
	err := c.cc.Invoke(ctx, RelayerSet_NewContractReader_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayerSetClient) NewContractWriter(ctx context.Context, in *NewContractWriterRequest, opts ...grpc.CallOption) (*NewContractWriterResponse, error) {
	out := new(NewContractWriterResponse)
	err := c.cc.Invoke(ctx, RelayerSet_NewContractWriter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayerSetClient) StartRelayer(ctx context.Context, in *RelayerId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RelayerSet_StartRelayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayerSetClient) CloseRelayer(ctx context.Context, in *RelayerId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RelayerSet_CloseRelayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayerSetClient) RelayerReady(ctx context.Context, in *RelayerId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RelayerSet_RelayerReady_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayerSetClient) RelayerHealthReport(ctx context.Context, in *RelayerId, opts ...grpc.CallOption) (*RelayerHealthReportResponse, error) {
	out := new(RelayerHealthReportResponse)
	err := c.cc.Invoke(ctx, RelayerSet_RelayerHealthReport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayerSetClient) RelayerName(ctx context.Context, in *RelayerId, opts ...grpc.CallOption) (*RelayerNameResponse, error) {
	out := new(RelayerNameResponse)
	err := c.cc.Invoke(ctx, RelayerSet_RelayerName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayerSetClient) RelayerLatestHead(ctx context.Context, in *LatestHeadRequest, opts ...grpc.CallOption) (*LatestHeadResponse, error) {
	out := new(LatestHeadResponse)
	err := c.cc.Invoke(ctx, RelayerSet_RelayerLatestHead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelayerSetServer is the server API for RelayerSet service.
// All implementations must embed UnimplementedRelayerSetServer
// for forward compatibility
type RelayerSetServer interface {
	Get(context.Context, *GetRelayerRequest) (*GetRelayerResponse, error)
	List(context.Context, *ListAllRelayersRequest) (*ListAllRelayersResponse, error)
	NewPluginProvider(context.Context, *NewPluginProviderRequest) (*NewPluginProviderResponse, error)
	NewContractReader(context.Context, *NewContractReaderRequest) (*NewContractReaderResponse, error)
	NewContractWriter(context.Context, *NewContractWriterRequest) (*NewContractWriterResponse, error)
	StartRelayer(context.Context, *RelayerId) (*emptypb.Empty, error)
	CloseRelayer(context.Context, *RelayerId) (*emptypb.Empty, error)
	RelayerReady(context.Context, *RelayerId) (*emptypb.Empty, error)
	RelayerHealthReport(context.Context, *RelayerId) (*RelayerHealthReportResponse, error)
	RelayerName(context.Context, *RelayerId) (*RelayerNameResponse, error)
	RelayerLatestHead(context.Context, *LatestHeadRequest) (*LatestHeadResponse, error)
	mustEmbedUnimplementedRelayerSetServer()
}

// UnimplementedRelayerSetServer must be embedded to have forward compatible implementations.
type UnimplementedRelayerSetServer struct {
}

func (UnimplementedRelayerSetServer) Get(context.Context, *GetRelayerRequest) (*GetRelayerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRelayerSetServer) List(context.Context, *ListAllRelayersRequest) (*ListAllRelayersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRelayerSetServer) NewPluginProvider(context.Context, *NewPluginProviderRequest) (*NewPluginProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewPluginProvider not implemented")
}
func (UnimplementedRelayerSetServer) NewContractReader(context.Context, *NewContractReaderRequest) (*NewContractReaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewContractReader not implemented")
}
func (UnimplementedRelayerSetServer) NewContractWriter(context.Context, *NewContractWriterRequest) (*NewContractWriterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewContractWriter not implemented")
}
func (UnimplementedRelayerSetServer) StartRelayer(context.Context, *RelayerId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRelayer not implemented")
}
func (UnimplementedRelayerSetServer) CloseRelayer(context.Context, *RelayerId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseRelayer not implemented")
}
func (UnimplementedRelayerSetServer) RelayerReady(context.Context, *RelayerId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayerReady not implemented")
}
func (UnimplementedRelayerSetServer) RelayerHealthReport(context.Context, *RelayerId) (*RelayerHealthReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayerHealthReport not implemented")
}
func (UnimplementedRelayerSetServer) RelayerName(context.Context, *RelayerId) (*RelayerNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayerName not implemented")
}
func (UnimplementedRelayerSetServer) RelayerLatestHead(context.Context, *LatestHeadRequest) (*LatestHeadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayerLatestHead not implemented")
}
func (UnimplementedRelayerSetServer) mustEmbedUnimplementedRelayerSetServer() {}

// UnsafeRelayerSetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelayerSetServer will
// result in compilation errors.
type UnsafeRelayerSetServer interface {
	mustEmbedUnimplementedRelayerSetServer()
}

func RegisterRelayerSetServer(s grpc.ServiceRegistrar, srv RelayerSetServer) {
	s.RegisterService(&RelayerSet_ServiceDesc, srv)
}

func _RelayerSet_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRelayerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerSetServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelayerSet_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerSetServer).Get(ctx, req.(*GetRelayerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayerSet_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllRelayersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerSetServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelayerSet_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerSetServer).List(ctx, req.(*ListAllRelayersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayerSet_NewPluginProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewPluginProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerSetServer).NewPluginProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelayerSet_NewPluginProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerSetServer).NewPluginProvider(ctx, req.(*NewPluginProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayerSet_NewContractReader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewContractReaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerSetServer).NewContractReader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelayerSet_NewContractReader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerSetServer).NewContractReader(ctx, req.(*NewContractReaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayerSet_NewContractWriter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewContractWriterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerSetServer).NewContractWriter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelayerSet_NewContractWriter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerSetServer).NewContractWriter(ctx, req.(*NewContractWriterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayerSet_StartRelayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerSetServer).StartRelayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelayerSet_StartRelayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerSetServer).StartRelayer(ctx, req.(*RelayerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayerSet_CloseRelayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerSetServer).CloseRelayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelayerSet_CloseRelayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerSetServer).CloseRelayer(ctx, req.(*RelayerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayerSet_RelayerReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerSetServer).RelayerReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelayerSet_RelayerReady_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerSetServer).RelayerReady(ctx, req.(*RelayerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayerSet_RelayerHealthReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerSetServer).RelayerHealthReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelayerSet_RelayerHealthReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerSetServer).RelayerHealthReport(ctx, req.(*RelayerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayerSet_RelayerName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerSetServer).RelayerName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelayerSet_RelayerName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerSetServer).RelayerName(ctx, req.(*RelayerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayerSet_RelayerLatestHead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LatestHeadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerSetServer).RelayerLatestHead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelayerSet_RelayerLatestHead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerSetServer).RelayerLatestHead(ctx, req.(*LatestHeadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RelayerSet_ServiceDesc is the grpc.ServiceDesc for RelayerSet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelayerSet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.relayerset.RelayerSet",
	HandlerType: (*RelayerSetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _RelayerSet_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _RelayerSet_List_Handler,
		},
		{
			MethodName: "NewPluginProvider",
			Handler:    _RelayerSet_NewPluginProvider_Handler,
		},
		{
			MethodName: "NewContractReader",
			Handler:    _RelayerSet_NewContractReader_Handler,
		},
		{
			MethodName: "NewContractWriter",
			Handler:    _RelayerSet_NewContractWriter_Handler,
		},
		{
			MethodName: "StartRelayer",
			Handler:    _RelayerSet_StartRelayer_Handler,
		},
		{
			MethodName: "CloseRelayer",
			Handler:    _RelayerSet_CloseRelayer_Handler,
		},
		{
			MethodName: "RelayerReady",
			Handler:    _RelayerSet_RelayerReady_Handler,
		},
		{
			MethodName: "RelayerHealthReport",
			Handler:    _RelayerSet_RelayerHealthReport_Handler,
		},
		{
			MethodName: "RelayerName",
			Handler:    _RelayerSet_RelayerName_Handler,
		},
		{
			MethodName: "RelayerLatestHead",
			Handler:    _RelayerSet_RelayerLatestHead_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relayerset.proto",
}
