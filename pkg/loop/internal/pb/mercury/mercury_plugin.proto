syntax = "proto3";

option go_package = "github.com/smartcontractkit/chainlink-common/pkg/loop/internal/pb/mercury;mercurypb";


// note: the generate.go file in this dir specifies the import path of the relative proto files
package loop.internal.pb.mercury; // related to above, seems to need to have loop package
import "google/protobuf/empty.proto";
import "loop/internal/pb/relayer.proto";


service MercuryPluginFactory {
  rpc NewMercuryPlugin (NewMercuryPluginRequest) returns (NewMercuryPluginResponse) {}
}

message NewMercuryPluginRequest {
  MercuryPluginConfig mercuryPluginConfig = 1;
}

message NewMercuryPluginResponse {
  uint32 mercuryPluginID = 1;
  MercuryPluginInfo mercuryPluginInfo = 2;
}

// MercuryPluginConfig represents [github.com/smartcontractkit/libocr/offchainreporting2plus/ocr3types.MercuryPluginConfig]
message MercuryPluginConfig {
  bytes configDigest = 1; // [32]byte
  uint32 oracleID = 2; // uint8
  uint32 n = 3;
  uint32 f = 4;
  bytes onchainConfig = 5;
  bytes offchainConfig = 6;
  int64 estimatedRoundInterval = 7;
  int64 maxDurationObservation = 8;
}

// MercuryPluginLimits represents [github.com/smartcontractkit/libocr/offchainreporting2plus/types.MercuryPluginLimits]
message MercuryPluginLimits {
  uint64 maxObservationLength = 1;
  uint64 maxReportLength = 2;
}

// MercuryPluginInfo represents [github.com/smartcontractkit/libocr/offchainreporting2plus/types.MercuryPluginInfo]
message MercuryPluginInfo {
  string name = 1;
  MercuryPluginLimits mercuryPluginLimits = 3;
}

service MercuryPlugin {
  rpc Observation (ObservationRequest) returns (ObservationResponse) {}
  rpc Report (ReportRequest) returns (ReportResponse) {}
  rpc Close (google.protobuf.Empty) returns (google.protobuf.Empty) {}
}

// ObservationRequest has arguments for [github.com/smartcontractkit/libocr/offchainreporting2plus/types.MercuryPlugin.Observation].
message ObservationRequest {
  ReportTimestamp reportTimestamp = 1;
  bytes previousReport = 2;
}

// ObservationResponse has return arguments for [github.com/smartcontractkit/libocr/offchainreporting2plus/types.MercuryPlugin.Observation].
message ObservationResponse {
  bytes observation = 1;
}

//TODO some definitions are shared with reporting plugin for ocr2. not sure to copy or share. copy for now...
// AttributedObservation represents [github.com/smartcontractkit/libocr/offchainreporting2plus/types.AttributedObservation]
message AttributedObservation {
  bytes observation = 1;
  uint32 observer = 2; // uint8
}

// ReportRequest has arguments for [github.com/smartcontractkit/libocr/offchainreporting2plus/types.MercuryPlugin.Report].
message ReportRequest {
  ReportTimestamp reportTimestamp = 1;
  bytes previousReport = 2;
  repeated AttributedObservation observations = 3;
}

// ReportResponse has return arguments for [github.com/smartcontractkit/libocr/offchainreporting2plus/types.MercuryPlugin.Report].
message ReportResponse {
  bool shouldReport = 1;
  bytes report = 2;
}
