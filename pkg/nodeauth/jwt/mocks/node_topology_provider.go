// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	ed25519 "crypto/ed25519"

	mock "github.com/stretchr/testify/mock"
)

// NodeTopologyProvider is an autogenerated mock type for the NodeTopologyProvider type
type NodeTopologyProvider struct {
	mock.Mock
}

type NodeTopologyProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *NodeTopologyProvider) EXPECT() *NodeTopologyProvider_Expecter {
	return &NodeTopologyProvider_Expecter{mock: &_m.Mock}
}

// IsNodePubKeyTrusted provides a mock function with given fields: ctx, p2pId, publicKey
func (_m *NodeTopologyProvider) IsNodePubKeyTrusted(ctx context.Context, p2pId ed25519.PublicKey, publicKey ed25519.PublicKey) (bool, error) {
	ret := _m.Called(ctx, p2pId, publicKey)

	if len(ret) == 0 {
		panic("no return value specified for IsNodePubKeyTrusted")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ed25519.PublicKey, ed25519.PublicKey) (bool, error)); ok {
		return rf(ctx, p2pId, publicKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ed25519.PublicKey, ed25519.PublicKey) bool); ok {
		r0 = rf(ctx, p2pId, publicKey)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ed25519.PublicKey, ed25519.PublicKey) error); ok {
		r1 = rf(ctx, p2pId, publicKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NodeTopologyProvider_IsNodePubKeyTrusted_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsNodePubKeyTrusted'
type NodeTopologyProvider_IsNodePubKeyTrusted_Call struct {
	*mock.Call
}

// IsNodePubKeyTrusted is a helper method to define mock.On call
//   - ctx context.Context
//   - p2pId ed25519.PublicKey
//   - publicKey ed25519.PublicKey
func (_e *NodeTopologyProvider_Expecter) IsNodePubKeyTrusted(ctx interface{}, p2pId interface{}, publicKey interface{}) *NodeTopologyProvider_IsNodePubKeyTrusted_Call {
	return &NodeTopologyProvider_IsNodePubKeyTrusted_Call{Call: _e.mock.On("IsNodePubKeyTrusted", ctx, p2pId, publicKey)}
}

func (_c *NodeTopologyProvider_IsNodePubKeyTrusted_Call) Run(run func(ctx context.Context, p2pId ed25519.PublicKey, publicKey ed25519.PublicKey)) *NodeTopologyProvider_IsNodePubKeyTrusted_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ed25519.PublicKey), args[2].(ed25519.PublicKey))
	})
	return _c
}

func (_c *NodeTopologyProvider_IsNodePubKeyTrusted_Call) Return(_a0 bool, _a1 error) *NodeTopologyProvider_IsNodePubKeyTrusted_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NodeTopologyProvider_IsNodePubKeyTrusted_Call) RunAndReturn(run func(context.Context, ed25519.PublicKey, ed25519.PublicKey) (bool, error)) *NodeTopologyProvider_IsNodePubKeyTrusted_Call {
	_c.Call.Return(run)
	return _c
}

// NewNodeTopologyProvider creates a new instance of NodeTopologyProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNodeTopologyProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *NodeTopologyProvider {
	mock := &NodeTopologyProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
