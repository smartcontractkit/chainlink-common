// Code generated by github.com/smartcontractkit/chainlink-common/pkg/capabilities/cli, DO NOT EDIT.

// Code generated by github.com/smartcontractkit/chainlink-common/pkg/capabilities/cli, DO NOT EDIT.

package nestedactiontest

import (
	"github.com/smartcontractkit/chainlink-common/pkg/capabilities/cli/cmd/testdata/fixtures/capabilities/nestedaction"
	"github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk/legacy/testutils"
)

// Action registers a new capability mock with the runner
// if another mock is registered for the same capability with for a step, it will take priority for that step.
func Action(runner *testutils.Runner, fn func(input nestedaction.ActionInputs) (nestedaction.ActionOutputs, error)) *testutils.Mock[nestedaction.ActionInputs, nestedaction.ActionOutputs] {
	mock := testutils.MockCapability[nestedaction.ActionInputs, nestedaction.ActionOutputs]("nested-test-action@1.0.0", fn)
	runner.MockCapability("nested-test-action@1.0.0", nil, mock)
	return mock
}

// ActionForStep registers a new capability mock with the runner, but only for a given step.
// if another mock was registered for the same capability without a step, this mock will take priority for that step.
func ActionForStep(runner *testutils.Runner, step string, mockFn func(input nestedaction.ActionInputs) (nestedaction.ActionOutputs, error)) *testutils.Mock[nestedaction.ActionInputs, nestedaction.ActionOutputs] {
	fn := mockFn
	mock := testutils.MockCapability[nestedaction.ActionInputs, nestedaction.ActionOutputs]("nested-test-action@1.0.0", fn)
	runner.MockCapability("nested-test-action@1.0.0", &step, mock)
	return mock
}
