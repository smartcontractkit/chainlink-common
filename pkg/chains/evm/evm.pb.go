// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.29.3
// source: evm.proto

package evm

import (
	chain_common "github.com/smartcontractkit/chainlink-common/pkg/loop/chain-common"
	pb "github.com/smartcontractkit/chainlink-common/pkg/values/pb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TxStatus int32

const (
	TxStatus_TX_SUCCESS  TxStatus = 0
	TxStatus_TX_REVERTED TxStatus = 1
	TxStatus_TX_FATAL    TxStatus = 2
)

// Enum value maps for TxStatus.
var (
	TxStatus_name = map[int32]string{
		0: "TX_SUCCESS",
		1: "TX_REVERTED",
		2: "TX_FATAL",
	}
	TxStatus_value = map[string]int32{
		"TX_SUCCESS":  0,
		"TX_REVERTED": 1,
		"TX_FATAL":    2,
	}
)

func (x TxStatus) Enum() *TxStatus {
	p := new(TxStatus)
	*p = x
	return p
}

func (x TxStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TxStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_chains_evm_evm_proto_enumTypes[0].Descriptor()
}

func (TxStatus) Type() protoreflect.EnumType {
	return &file_chains_evm_evm_proto_enumTypes[0]
}

func (x TxStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TxStatus.Descriptor instead.
func (TxStatus) EnumDescriptor() ([]byte, []int) {
	return file_chains_evm_evm_proto_rawDescGZIP(), []int{0}
}

// TransactionStatus is an enum for the status of a transaction.
// This should always be a 1-1 mapping to: [github.com/smartcontractkit/chainlink-common/pkg/types.TransactionStatus].
type TransactionStatus int32

const (
	TransactionStatus_TRANSACTION_STATUS_UNKNOWN     TransactionStatus = 0
	TransactionStatus_TRANSACTION_STATUS_PENDING     TransactionStatus = 1
	TransactionStatus_TRANSACTION_STATUS_UNCONFIRMED TransactionStatus = 2
	TransactionStatus_TRANSACTION_STATUS_FINALIZED   TransactionStatus = 3
	TransactionStatus_TRANSACTION_STATUS_FAILED      TransactionStatus = 4
	TransactionStatus_TRANSACTION_STATUS_FATAL       TransactionStatus = 5
)

// Enum value maps for TransactionStatus.
var (
	TransactionStatus_name = map[int32]string{
		0: "TRANSACTION_STATUS_UNKNOWN",
		1: "TRANSACTION_STATUS_PENDING",
		2: "TRANSACTION_STATUS_UNCONFIRMED",
		3: "TRANSACTION_STATUS_FINALIZED",
		4: "TRANSACTION_STATUS_FAILED",
		5: "TRANSACTION_STATUS_FATAL",
	}
	TransactionStatus_value = map[string]int32{
		"TRANSACTION_STATUS_UNKNOWN":     0,
		"TRANSACTION_STATUS_PENDING":     1,
		"TRANSACTION_STATUS_UNCONFIRMED": 2,
		"TRANSACTION_STATUS_FINALIZED":   3,
		"TRANSACTION_STATUS_FAILED":      4,
		"TRANSACTION_STATUS_FATAL":       5,
	}
)

func (x TransactionStatus) Enum() *TransactionStatus {
	p := new(TransactionStatus)
	*p = x
	return p
}

func (x TransactionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_chains_evm_evm_proto_enumTypes[1].Descriptor()
}

func (TransactionStatus) Type() protoreflect.EnumType {
	return &file_chains_evm_evm_proto_enumTypes[1]
}

func (x TransactionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionStatus.Descriptor instead.
func (TransactionStatus) EnumDescriptor() ([]byte, []int) {
	return file_chains_evm_evm_proto_rawDescGZIP(), []int{1}
}

// represents simplified evm-style CallMsg
type CallMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From []byte `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"` // sender address in evm address [20]byte fix-sized array format
	To   []byte `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`     // contract address in evm address [20]byte fix-sized array format
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"` // solidity-spec abi encoded bytes
}

func (x *CallMsg) Reset() {
	*x = CallMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallMsg) ProtoMessage() {}

func (x *CallMsg) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallMsg.ProtoReflect.Descriptor instead.
func (*CallMsg) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{0}
}

func (x *CallMsg) GetFrom() []byte {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *CallMsg) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *CallMsg) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type Topics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic [][]byte `protobuf:"bytes,1,rep,name=topic,proto3" json:"topic,omitempty"` // in [32]byte fix-sized array format
}

func (x *Topics) Reset() {
	*x = Topics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Topics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topics) ProtoMessage() {}

func (x *Topics) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topics.ProtoReflect.Descriptor instead.
func (*Topics) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{1}
}

func (x *Topics) GetTopic() [][]byte {
	if x != nil {
		return x.Topic
	}
	return nil
}

// represents evm-style log
type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address     []byte     `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`                            // address of the contract emitted the log in evm address [20]byte fix-sized array format
	Topics      [][]byte   `protobuf:"bytes,2,rep,name=topics,proto3" json:"topics,omitempty"`                              // indexed log fields, in [32]byte fix-sized array format
	TxHash      []byte     `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`                // hash of the transaction containing the log, in [32]byte fix-sized array format
	BlockHash   []byte     `protobuf:"bytes,4,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`       // hash of the block containing the log, in [32]byte fix-sized array format
	Data        []byte     `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`                                  // solidity-spec abi encoded log Data
	EventSig    []byte     `protobuf:"bytes,6,opt,name=eventSig,proto3" json:"eventSig,omitempty"`                          // keccak256 of event signature, in [32]byte fix-sized array format
	BlockNumber *pb.BigInt `protobuf:"bytes,7,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"` // block number containing the log
	TxIndex     uint32     `protobuf:"varint,8,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`            // index of transaction emmited the log
	Index       uint32     `protobuf:"varint,9,opt,name=index,proto3" json:"index,omitempty"`                               // index of the Log within the intire block
	Removed     bool       `protobuf:"varint,10,opt,name=removed,proto3" json:"removed,omitempty"`                          // flag if the log was removed during reorg
}

func (x *Log) Reset() {
	*x = Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{2}
}

func (x *Log) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Log) GetTopics() [][]byte {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *Log) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *Log) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *Log) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Log) GetEventSig() []byte {
	if x != nil {
		return x.EventSig
	}
	return nil
}

func (x *Log) GetBlockNumber() *pb.BigInt {
	if x != nil {
		return x.BlockNumber
	}
	return nil
}

func (x *Log) GetTxIndex() uint32 {
	if x != nil {
		return x.TxIndex
	}
	return 0
}

func (x *Log) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Log) GetRemoved() bool {
	if x != nil {
		return x.Removed
	}
	return false
}

// represents evm-style filter query
type FilterQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockHash []byte     `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"` // exact block (cant use from/to), in [32]byte fix-sized array format
	FromBlock *pb.BigInt `protobuf:"bytes,2,opt,name=fromBlock,proto3" json:"fromBlock,omitempty"`                  // start block range
	ToBlock   *pb.BigInt `protobuf:"bytes,3,opt,name=toBlock,proto3" json:"toBlock,omitempty"`                      // end block range
	Addresses [][]byte   `protobuf:"bytes,4,rep,name=addresses,proto3" json:"addresses,omitempty"`                  // contract(s) to filter logs from in evm address [20]byte fix-sized array format
	Topics    []*Topics  `protobuf:"bytes,5,rep,name=topics,proto3" json:"topics,omitempty"`                        // filter log by event signature and indexed args
}

func (x *FilterQuery) Reset() {
	*x = FilterQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterQuery) ProtoMessage() {}

func (x *FilterQuery) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterQuery.ProtoReflect.Descriptor instead.
func (*FilterQuery) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{3}
}

func (x *FilterQuery) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *FilterQuery) GetFromBlock() *pb.BigInt {
	if x != nil {
		return x.FromBlock
	}
	return nil
}

func (x *FilterQuery) GetToBlock() *pb.BigInt {
	if x != nil {
		return x.ToBlock
	}
	return nil
}

func (x *FilterQuery) GetAddresses() [][]byte {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *FilterQuery) GetTopics() []*Topics {
	if x != nil {
		return x.Topics
	}
	return nil
}

// represents evm-style transaction
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce    uint64     `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`                      // number of txs sent from sender
	Gas      uint64     `protobuf:"varint,2,opt,name=gas,proto3" json:"gas,omitempty"`                          // max gas allowed per execution (in gas units)
	To       []byte     `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`                             // recipient address in evm address [20]byte fix-sized array format
	Data     []byte     `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`                         // solidity-spec abi encoded input data for function call payload
	Hash     []byte     `protobuf:"bytes,5,opt,name=hash,proto3" json:"hash,omitempty"`                         // transaction hash, in [32]byte fix-sized array format
	Value    *pb.BigInt `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`                       // amount of eth sent in wei
	GasPrice *pb.BigInt `protobuf:"bytes,7,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"` // price for a single gas unit in wei
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{4}
}

func (x *Transaction) GetNonce() uint64 {
	if x != nil {
		return x.Nonce
	}
	return 0
}

func (x *Transaction) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *Transaction) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *Transaction) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Transaction) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Transaction) GetValue() *pb.BigInt {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Transaction) GetGasPrice() *pb.BigInt {
	if x != nil {
		return x.GasPrice
	}
	return nil
}

// represents evm-style receipt
type Receipt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status            uint64     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`                                                 // 1 for success 0 for failure
	GasUsed           uint64     `protobuf:"varint,2,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`                                // gas used by this transaction (in gas units)
	TxIndex           uint64     `protobuf:"varint,3,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`                                // index of the transaction inside of the block
	BlockHash         []byte     `protobuf:"bytes,4,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`                           // block hash containing the transaction
	Logs              []*Log     `protobuf:"bytes,6,rep,name=logs,proto3" json:"logs,omitempty"`                                                      // logs emitted by this transaction
	TxHash            []byte     `protobuf:"bytes,7,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`                                    // hash of the transaction this receipt is for, in [32]byte fix-sized array format
	EffectiveGasPrice *pb.BigInt `protobuf:"bytes,8,opt,name=effective_gas_price,json=effectiveGasPrice,proto3" json:"effective_gas_price,omitempty"` // actual gas price paid in wei (include after EIP-1559)
	BlockNumber       *pb.BigInt `protobuf:"bytes,9,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`                     // block number containing the transaction
	ContractAddress   []byte     `protobuf:"bytes,10,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`        // address of the contract if this transaction created one in evm address [20]byte fix-sized array format
}

func (x *Receipt) Reset() {
	*x = Receipt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Receipt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Receipt) ProtoMessage() {}

func (x *Receipt) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Receipt.ProtoReflect.Descriptor instead.
func (*Receipt) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{5}
}

func (x *Receipt) GetStatus() uint64 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Receipt) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *Receipt) GetTxIndex() uint64 {
	if x != nil {
		return x.TxIndex
	}
	return 0
}

func (x *Receipt) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

func (x *Receipt) GetLogs() []*Log {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *Receipt) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *Receipt) GetEffectiveGasPrice() *pb.BigInt {
	if x != nil {
		return x.EffectiveGasPrice
	}
	return nil
}

func (x *Receipt) GetBlockNumber() *pb.BigInt {
	if x != nil {
		return x.BlockNumber
	}
	return nil
}

func (x *Receipt) GetContractAddress() []byte {
	if x != nil {
		return x.ContractAddress
	}
	return nil
}

// represents filter for polling and caching logs
type LPFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxLogsKept   uint64   `protobuf:"varint,1,opt,name=max_logs_kept,json=maxLogsKept,proto3" json:"max_logs_kept,omitempty"`     // maximum number of logs to retain ( 0 = unlimited )
	RetentionTime int64    `protobuf:"varint,2,opt,name=retention_time,json=retentionTime,proto3" json:"retention_time,omitempty"` // maximum amount of time to retain logs in seconds
	LogsPerBlock  uint64   `protobuf:"varint,3,opt,name=logs_per_block,json=logsPerBlock,proto3" json:"logs_per_block,omitempty"`  // rate limit ( maximum # of logs per block, 0 = unlimited )
	Name          string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                                         // filter name, has to persist for removing filter
	Addresses     [][]byte `protobuf:"bytes,5,rep,name=addresses,proto3" json:"addresses,omitempty"`                               // list of addresses to include in evm address [20]byte fix-sized array format
	EventSigs     [][]byte `protobuf:"bytes,6,rep,name=event_sigs,json=eventSigs,proto3" json:"event_sigs,omitempty"`              // list of possible signatures (aka topic1), in [32]byte fix-sized array format
	Topic2        [][]byte `protobuf:"bytes,7,rep,name=topic2,proto3" json:"topic2,omitempty"`                                     // list of possible values for topic2, in [32]byte fix-sized array format
	Topic3        [][]byte `protobuf:"bytes,8,rep,name=topic3,proto3" json:"topic3,omitempty"`                                     // list of possible values for topic3, in [32]byte fix-sized array format
	Topic4        [][]byte `protobuf:"bytes,9,rep,name=topic4,proto3" json:"topic4,omitempty"`                                     // list of possible values for topic4, in [32]byte fix-sized array format
}

func (x *LPFilter) Reset() {
	*x = LPFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LPFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LPFilter) ProtoMessage() {}

func (x *LPFilter) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LPFilter.ProtoReflect.Descriptor instead.
func (*LPFilter) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{6}
}

func (x *LPFilter) GetMaxLogsKept() uint64 {
	if x != nil {
		return x.MaxLogsKept
	}
	return 0
}

func (x *LPFilter) GetRetentionTime() int64 {
	if x != nil {
		return x.RetentionTime
	}
	return 0
}

func (x *LPFilter) GetLogsPerBlock() uint64 {
	if x != nil {
		return x.LogsPerBlock
	}
	return 0
}

func (x *LPFilter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LPFilter) GetAddresses() [][]byte {
	if x != nil {
		return x.Addresses
	}
	return nil
}

func (x *LPFilter) GetEventSigs() [][]byte {
	if x != nil {
		return x.EventSigs
	}
	return nil
}

func (x *LPFilter) GetTopic2() [][]byte {
	if x != nil {
		return x.Topic2
	}
	return nil
}

func (x *LPFilter) GetTopic3() [][]byte {
	if x != nil {
		return x.Topic3
	}
	return nil
}

func (x *LPFilter) GetTopic4() [][]byte {
	if x != nil {
		return x.Topic4
	}
	return nil
}

type Head struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp   uint64     `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // unix timestamp
	BlockNumber *pb.BigInt `protobuf:"bytes,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Hash        []byte     `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`                               // in [32]byte fix-sized array format
	ParentHash  []byte     `protobuf:"bytes,4,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"` // in [32]byte fix-sized array format
}

func (x *Head) Reset() {
	*x = Head{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Head) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Head) ProtoMessage() {}

func (x *Head) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Head.ProtoReflect.Descriptor instead.
func (*Head) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{7}
}

func (x *Head) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Head) GetBlockNumber() *pb.BigInt {
	if x != nil {
		return x.BlockNumber
	}
	return nil
}

func (x *Head) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

func (x *Head) GetParentHash() []byte {
	if x != nil {
		return x.ParentHash
	}
	return nil
}

type Expression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Evaluator:
	//
	//	*Expression_Primitive
	//	*Expression_BooleanExpression
	Evaluator isExpression_Evaluator `protobuf_oneof:"evaluator"`
}

func (x *Expression) Reset() {
	*x = Expression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression) ProtoMessage() {}

func (x *Expression) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression.ProtoReflect.Descriptor instead.
func (*Expression) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{8}
}

func (m *Expression) GetEvaluator() isExpression_Evaluator {
	if m != nil {
		return m.Evaluator
	}
	return nil
}

func (x *Expression) GetPrimitive() *Primitive {
	if x, ok := x.GetEvaluator().(*Expression_Primitive); ok {
		return x.Primitive
	}
	return nil
}

func (x *Expression) GetBooleanExpression() *BooleanExpression {
	if x, ok := x.GetEvaluator().(*Expression_BooleanExpression); ok {
		return x.BooleanExpression
	}
	return nil
}

type isExpression_Evaluator interface {
	isExpression_Evaluator()
}

type Expression_Primitive struct {
	Primitive *Primitive `protobuf:"bytes,1,opt,name=primitive,proto3,oneof"`
}

type Expression_BooleanExpression struct {
	BooleanExpression *BooleanExpression `protobuf:"bytes,2,opt,name=boolean_expression,json=booleanExpression,proto3,oneof"`
}

func (*Expression_Primitive) isExpression_Evaluator() {}

func (*Expression_BooleanExpression) isExpression_Evaluator() {}

type BooleanExpression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BooleanOperator chain_common.BooleanOperator `protobuf:"varint,1,opt,name=boolean_operator,json=booleanOperator,proto3,enum=loop.chain.common.BooleanOperator" json:"boolean_operator,omitempty"`
	Expression      []*Expression                `protobuf:"bytes,2,rep,name=expression,proto3" json:"expression,omitempty"`
}

func (x *BooleanExpression) Reset() {
	*x = BooleanExpression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BooleanExpression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BooleanExpression) ProtoMessage() {}

func (x *BooleanExpression) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BooleanExpression.ProtoReflect.Descriptor instead.
func (*BooleanExpression) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{9}
}

func (x *BooleanExpression) GetBooleanOperator() chain_common.BooleanOperator {
	if x != nil {
		return x.BooleanOperator
	}
	return chain_common.BooleanOperator(0)
}

func (x *BooleanExpression) GetExpression() []*Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

type And struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr []*Expression `protobuf:"bytes,1,rep,name=expr,proto3" json:"expr,omitempty"`
}

func (x *And) Reset() {
	*x = And{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *And) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*And) ProtoMessage() {}

func (x *And) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use And.ProtoReflect.Descriptor instead.
func (*And) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{10}
}

func (x *And) GetExpr() []*Expression {
	if x != nil {
		return x.Expr
	}
	return nil
}

type Or struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr []*Expression `protobuf:"bytes,1,rep,name=expr,proto3" json:"expr,omitempty"`
}

func (x *Or) Reset() {
	*x = Or{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Or) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Or) ProtoMessage() {}

func (x *Or) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Or.ProtoReflect.Descriptor instead.
func (*Or) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{11}
}

func (x *Or) GetExpr() []*Expression {
	if x != nil {
		return x.Expr
	}
	return nil
}

type HashValueComparator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values   [][]byte                        `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"` // in [32]byte fix-sized array format
	Operator chain_common.ComparisonOperator `protobuf:"varint,2,opt,name=operator,proto3,enum=loop.chain.common.ComparisonOperator" json:"operator,omitempty"`
}

func (x *HashValueComparator) Reset() {
	*x = HashValueComparator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashValueComparator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashValueComparator) ProtoMessage() {}

func (x *HashValueComparator) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashValueComparator.ProtoReflect.Descriptor instead.
func (*HashValueComparator) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{12}
}

func (x *HashValueComparator) GetValues() [][]byte {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *HashValueComparator) GetOperator() chain_common.ComparisonOperator {
	if x != nil {
		return x.Operator
	}
	return chain_common.ComparisonOperator(0)
}

type EventByWord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WordIndex            uint32                 `protobuf:"varint,1,opt,name=word_index,json=wordIndex,proto3" json:"word_index,omitempty"`
	HashedValueComparers []*HashValueComparator `protobuf:"bytes,2,rep,name=hashed_value_comparers,json=hashedValueComparers,proto3" json:"hashed_value_comparers,omitempty"`
}

func (x *EventByWord) Reset() {
	*x = EventByWord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventByWord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventByWord) ProtoMessage() {}

func (x *EventByWord) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventByWord.ProtoReflect.Descriptor instead.
func (*EventByWord) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{13}
}

func (x *EventByWord) GetWordIndex() uint32 {
	if x != nil {
		return x.WordIndex
	}
	return 0
}

func (x *EventByWord) GetHashedValueComparers() []*HashValueComparator {
	if x != nil {
		return x.HashedValueComparers
	}
	return nil
}

type EventByTopic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic                uint64                 `protobuf:"varint,1,opt,name=topic,proto3" json:"topic,omitempty"`
	HashedValueComparers []*HashValueComparator `protobuf:"bytes,2,rep,name=hashed_value_comparers,json=hashedValueComparers,proto3" json:"hashed_value_comparers,omitempty"`
}

func (x *EventByTopic) Reset() {
	*x = EventByTopic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventByTopic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventByTopic) ProtoMessage() {}

func (x *EventByTopic) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventByTopic.ProtoReflect.Descriptor instead.
func (*EventByTopic) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{14}
}

func (x *EventByTopic) GetTopic() uint64 {
	if x != nil {
		return x.Topic
	}
	return 0
}

func (x *EventByTopic) GetHashedValueComparers() []*HashValueComparator {
	if x != nil {
		return x.HashedValueComparers
	}
	return nil
}

// evm-style primitives
// can be used in combination with general primitives for querying tracked logs
type Primitive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Primitive:
	//
	//	*Primitive_GeneralPrimitive
	//	*Primitive_ContractAddress
	//	*Primitive_EventSig
	//	*Primitive_EventByWord
	//	*Primitive_EventByTopic
	Primitive isPrimitive_Primitive `protobuf_oneof:"primitive"`
}

func (x *Primitive) Reset() {
	*x = Primitive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Primitive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Primitive) ProtoMessage() {}

func (x *Primitive) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Primitive.ProtoReflect.Descriptor instead.
func (*Primitive) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{15}
}

func (m *Primitive) GetPrimitive() isPrimitive_Primitive {
	if m != nil {
		return m.Primitive
	}
	return nil
}

func (x *Primitive) GetGeneralPrimitive() *chain_common.Primitive {
	if x, ok := x.GetPrimitive().(*Primitive_GeneralPrimitive); ok {
		return x.GeneralPrimitive
	}
	return nil
}

func (x *Primitive) GetContractAddress() []byte {
	if x, ok := x.GetPrimitive().(*Primitive_ContractAddress); ok {
		return x.ContractAddress
	}
	return nil
}

func (x *Primitive) GetEventSig() []byte {
	if x, ok := x.GetPrimitive().(*Primitive_EventSig); ok {
		return x.EventSig
	}
	return nil
}

func (x *Primitive) GetEventByWord() *EventByWord {
	if x, ok := x.GetPrimitive().(*Primitive_EventByWord); ok {
		return x.EventByWord
	}
	return nil
}

func (x *Primitive) GetEventByTopic() *EventByTopic {
	if x, ok := x.GetPrimitive().(*Primitive_EventByTopic); ok {
		return x.EventByTopic
	}
	return nil
}

type isPrimitive_Primitive interface {
	isPrimitive_Primitive()
}

type Primitive_GeneralPrimitive struct {
	GeneralPrimitive *chain_common.Primitive `protobuf:"bytes,1,opt,name=general_primitive,json=generalPrimitive,proto3,oneof"`
}

type Primitive_ContractAddress struct {
	ContractAddress []byte `protobuf:"bytes,2,opt,name=contract_address,json=contractAddress,proto3,oneof"` // in evm address [20]byte fix-sized array format
}

type Primitive_EventSig struct {
	EventSig []byte `protobuf:"bytes,3,opt,name=event_sig,json=eventSig,proto3,oneof"` // // in [32]byte fix-sized array format
}

type Primitive_EventByWord struct {
	EventByWord *EventByWord `protobuf:"bytes,4,opt,name=event_by_word,json=eventByWord,proto3,oneof"`
}

type Primitive_EventByTopic struct {
	EventByTopic *EventByTopic `protobuf:"bytes,5,opt,name=event_by_topic,json=eventByTopic,proto3,oneof"`
}

func (*Primitive_GeneralPrimitive) isPrimitive_Primitive() {}

func (*Primitive_ContractAddress) isPrimitive_Primitive() {}

func (*Primitive_EventSig) isPrimitive_Primitive() {}

func (*Primitive_EventByWord) isPrimitive_Primitive() {}

func (*Primitive_EventByTopic) isPrimitive_Primitive() {}

// ----- Request/Reply Wrappers -----
type LatestAndFinalizedHeadReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latest    *Head `protobuf:"bytes,1,opt,name=latest,proto3" json:"latest,omitempty"`
	Finalized *Head `protobuf:"bytes,2,opt,name=finalized,proto3" json:"finalized,omitempty"`
}

func (x *LatestAndFinalizedHeadReply) Reset() {
	*x = LatestAndFinalizedHeadReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LatestAndFinalizedHeadReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestAndFinalizedHeadReply) ProtoMessage() {}

func (x *LatestAndFinalizedHeadReply) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestAndFinalizedHeadReply.ProtoReflect.Descriptor instead.
func (*LatestAndFinalizedHeadReply) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{16}
}

func (x *LatestAndFinalizedHeadReply) GetLatest() *Head {
	if x != nil {
		return x.Latest
	}
	return nil
}

func (x *LatestAndFinalizedHeadReply) GetFinalized() *Head {
	if x != nil {
		return x.Finalized
	}
	return nil
}

// CallContractRequest has arguments for reading a contract as specified in the call message at a block height defined by blockNumber where:
// blockNumber :
//
//	nil (default) or (-2) → use the latest mined block (“latest”)
//	FinalizedBlockNumber(-3) → last finalized block (“finalized”)
//
// Any positive value is treated as an explicit block height.
type CallContractRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Call        *CallMsg   `protobuf:"bytes,1,opt,name=call,proto3" json:"call,omitempty"`
	BlockNumber *pb.BigInt `protobuf:"bytes,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
}

func (x *CallContractRequest) Reset() {
	*x = CallContractRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallContractRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallContractRequest) ProtoMessage() {}

func (x *CallContractRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallContractRequest.ProtoReflect.Descriptor instead.
func (*CallContractRequest) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{17}
}

func (x *CallContractRequest) GetCall() *CallMsg {
	if x != nil {
		return x.Call
	}
	return nil
}

func (x *CallContractRequest) GetBlockNumber() *pb.BigInt {
	if x != nil {
		return x.BlockNumber
	}
	return nil
}

type CallContractReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"` // solidity-spec abi encoded bytes
}

func (x *CallContractReply) Reset() {
	*x = CallContractReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallContractReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallContractReply) ProtoMessage() {}

func (x *CallContractReply) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallContractReply.ProtoReflect.Descriptor instead.
func (*CallContractReply) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{18}
}

func (x *CallContractReply) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// GetTransactionFeeRequest has arguments for [github.com/smartcontractkit/chainlink-common/pkg/types.EVMService.GetTransactionFee].
type GetTransactionFeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"` // idempotency key used when transaction was submitted
}

func (x *GetTransactionFeeRequest) Reset() {
	*x = GetTransactionFeeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionFeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionFeeRequest) ProtoMessage() {}

func (x *GetTransactionFeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionFeeRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionFeeRequest) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{19}
}

func (x *GetTransactionFeeRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

// GetTransactionFeeReply has return arguments for [github.com/smartcontractkit/chainlink-common/pkg/types.EVMService.GetTransactionFee].
type GetTransactionFeeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionFee *pb.BigInt `protobuf:"bytes,1,opt,name=transaction_fee,json=transactionFee,proto3" json:"transaction_fee,omitempty"` // transaction fee is the cost of transaction execution in Wei
}

func (x *GetTransactionFeeReply) Reset() {
	*x = GetTransactionFeeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionFeeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionFeeReply) ProtoMessage() {}

func (x *GetTransactionFeeReply) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionFeeReply.ProtoReflect.Descriptor instead.
func (*GetTransactionFeeReply) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{20}
}

func (x *GetTransactionFeeReply) GetTransactionFee() *pb.BigInt {
	if x != nil {
		return x.TransactionFee
	}
	return nil
}

type FilterLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterQuery *FilterQuery `protobuf:"bytes,1,opt,name=filter_query,json=filterQuery,proto3" json:"filter_query,omitempty"`
}

func (x *FilterLogsRequest) Reset() {
	*x = FilterLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterLogsRequest) ProtoMessage() {}

func (x *FilterLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterLogsRequest.ProtoReflect.Descriptor instead.
func (*FilterLogsRequest) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{21}
}

func (x *FilterLogsRequest) GetFilterQuery() *FilterQuery {
	if x != nil {
		return x.FilterQuery
	}
	return nil
}

type FilterLogsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs []*Log `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (x *FilterLogsReply) Reset() {
	*x = FilterLogsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterLogsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterLogsReply) ProtoMessage() {}

func (x *FilterLogsReply) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterLogsReply.ProtoReflect.Descriptor instead.
func (*FilterLogsReply) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{22}
}

func (x *FilterLogsReply) GetLogs() []*Log {
	if x != nil {
		return x.Logs
	}
	return nil
}

type BalanceAtRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account     []byte     `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"` // in evm address [20]byte fix-sized array format
	BlockNumber *pb.BigInt `protobuf:"bytes,2,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
}

func (x *BalanceAtRequest) Reset() {
	*x = BalanceAtRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceAtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceAtRequest) ProtoMessage() {}

func (x *BalanceAtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceAtRequest.ProtoReflect.Descriptor instead.
func (*BalanceAtRequest) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{23}
}

func (x *BalanceAtRequest) GetAccount() []byte {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *BalanceAtRequest) GetBlockNumber() *pb.BigInt {
	if x != nil {
		return x.BlockNumber
	}
	return nil
}

type BalanceAtReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Balance *pb.BigInt `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"` // Balance of the account in wei (10^-18 eth)
}

func (x *BalanceAtReply) Reset() {
	*x = BalanceAtReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceAtReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceAtReply) ProtoMessage() {}

func (x *BalanceAtReply) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceAtReply.ProtoReflect.Descriptor instead.
func (*BalanceAtReply) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{24}
}

func (x *BalanceAtReply) GetBalance() *pb.BigInt {
	if x != nil {
		return x.Balance
	}
	return nil
}

type EstimateGasRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg *CallMsg `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"` // simulates tx execution returns approximate amount of gas units needed
}

func (x *EstimateGasRequest) Reset() {
	*x = EstimateGasRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateGasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateGasRequest) ProtoMessage() {}

func (x *EstimateGasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateGasRequest.ProtoReflect.Descriptor instead.
func (*EstimateGasRequest) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{25}
}

func (x *EstimateGasRequest) GetMsg() *CallMsg {
	if x != nil {
		return x.Msg
	}
	return nil
}

type EstimateGasReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gas uint64 `protobuf:"varint,1,opt,name=gas,proto3" json:"gas,omitempty"` // estimated amount of gas in gas units, needed for tx execution
}

func (x *EstimateGasReply) Reset() {
	*x = EstimateGasReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EstimateGasReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateGasReply) ProtoMessage() {}

func (x *EstimateGasReply) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateGasReply.ProtoReflect.Descriptor instead.
func (*EstimateGasReply) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{26}
}

func (x *EstimateGasReply) GetGas() uint64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

type GetTransactionByHashRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"` // in [32]byte fix-sized array format
}

func (x *GetTransactionByHashRequest) Reset() {
	*x = GetTransactionByHashRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionByHashRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionByHashRequest) ProtoMessage() {}

func (x *GetTransactionByHashRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionByHashRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionByHashRequest) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{27}
}

func (x *GetTransactionByHashRequest) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type GetTransactionByHashReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *GetTransactionByHashReply) Reset() {
	*x = GetTransactionByHashReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionByHashReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionByHashReply) ProtoMessage() {}

func (x *GetTransactionByHashReply) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionByHashReply.ProtoReflect.Descriptor instead.
func (*GetTransactionByHashReply) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{28}
}

func (x *GetTransactionByHashReply) GetTransaction() *Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type GetTransactionReceiptRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"` // in [32]byte fix-sized array format
}

func (x *GetTransactionReceiptRequest) Reset() {
	*x = GetTransactionReceiptRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionReceiptRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionReceiptRequest) ProtoMessage() {}

func (x *GetTransactionReceiptRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionReceiptRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionReceiptRequest) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{29}
}

func (x *GetTransactionReceiptRequest) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type GetTransactionReceiptReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Receipt *Receipt `protobuf:"bytes,1,opt,name=receipt,proto3" json:"receipt,omitempty"`
}

func (x *GetTransactionReceiptReply) Reset() {
	*x = GetTransactionReceiptReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionReceiptReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionReceiptReply) ProtoMessage() {}

func (x *GetTransactionReceiptReply) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionReceiptReply.ProtoReflect.Descriptor instead.
func (*GetTransactionReceiptReply) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{30}
}

func (x *GetTransactionReceiptReply) GetReceipt() *Receipt {
	if x != nil {
		return x.Receipt
	}
	return nil
}

type RegisterLogTrackingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *LPFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *RegisterLogTrackingRequest) Reset() {
	*x = RegisterLogTrackingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterLogTrackingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterLogTrackingRequest) ProtoMessage() {}

func (x *RegisterLogTrackingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterLogTrackingRequest.ProtoReflect.Descriptor instead.
func (*RegisterLogTrackingRequest) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{31}
}

func (x *RegisterLogTrackingRequest) GetFilter() *LPFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type UnregisterLogTrackingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilterName string `protobuf:"bytes,1,opt,name=filter_name,json=filterName,proto3" json:"filter_name,omitempty"`
}

func (x *UnregisterLogTrackingRequest) Reset() {
	*x = UnregisterLogTrackingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnregisterLogTrackingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnregisterLogTrackingRequest) ProtoMessage() {}

func (x *UnregisterLogTrackingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnregisterLogTrackingRequest.ProtoReflect.Descriptor instead.
func (*UnregisterLogTrackingRequest) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{32}
}

func (x *UnregisterLogTrackingRequest) GetFilterName() string {
	if x != nil {
		return x.FilterName
	}
	return ""
}

type QueryTrackedLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expression      []*Expression              `protobuf:"bytes,1,rep,name=expression,proto3" json:"expression,omitempty"`
	LimitAndSort    *chain_common.LimitAndSort `protobuf:"bytes,2,opt,name=limit_and_sort,json=limitAndSort,proto3" json:"limit_and_sort,omitempty"`
	ConfidenceLevel chain_common.Confidence    `protobuf:"varint,3,opt,name=confidence_level,json=confidenceLevel,proto3,enum=loop.chain.common.Confidence" json:"confidence_level,omitempty"`
}

func (x *QueryTrackedLogsRequest) Reset() {
	*x = QueryTrackedLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTrackedLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTrackedLogsRequest) ProtoMessage() {}

func (x *QueryTrackedLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTrackedLogsRequest.ProtoReflect.Descriptor instead.
func (*QueryTrackedLogsRequest) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{33}
}

func (x *QueryTrackedLogsRequest) GetExpression() []*Expression {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *QueryTrackedLogsRequest) GetLimitAndSort() *chain_common.LimitAndSort {
	if x != nil {
		return x.LimitAndSort
	}
	return nil
}

func (x *QueryTrackedLogsRequest) GetConfidenceLevel() chain_common.Confidence {
	if x != nil {
		return x.ConfidenceLevel
	}
	return chain_common.Confidence(0)
}

type QueryTrackedLogsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logs []*Log `protobuf:"bytes,1,rep,name=logs,proto3" json:"logs,omitempty"`
}

func (x *QueryTrackedLogsReply) Reset() {
	*x = QueryTrackedLogsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryTrackedLogsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryTrackedLogsReply) ProtoMessage() {}

func (x *QueryTrackedLogsReply) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryTrackedLogsReply.ProtoReflect.Descriptor instead.
func (*QueryTrackedLogsReply) Descriptor() ([]byte, []int) {
	return file_evm_proto_rawDescGZIP(), []int{34}
}

func (x *QueryTrackedLogsReply) GetLogs() []*Log {
	if x != nil {
		return x.Logs
	}
	return nil
}

type GasConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasLimit uint64 `protobuf:"varint,1,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
}

func (x *GasConfig) Reset() {
	*x = GasConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GasConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GasConfig) ProtoMessage() {}

func (x *GasConfig) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GasConfig.ProtoReflect.Descriptor instead.
func (*GasConfig) Descriptor() ([]byte, []int) {
	return file_chains_evm_evm_proto_rawDescGZIP(), []int{35}
}

func (x *GasConfig) GetGasLimit() uint64 {
	if x != nil {
		return x.GasLimit
	}
	return 0
}

type CalculateTransactionFeeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasInfo *ReceiptGasInfo `protobuf:"bytes,1,opt,name=gas_info,json=gasInfo,proto3" json:"gas_info,omitempty"`
}

func (x *CalculateTransactionFeeRequest) Reset() {
	*x = CalculateTransactionFeeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateTransactionFeeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateTransactionFeeRequest) ProtoMessage() {}

func (x *CalculateTransactionFeeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateTransactionFeeRequest.ProtoReflect.Descriptor instead.
func (*CalculateTransactionFeeRequest) Descriptor() ([]byte, []int) {
	return file_chains_evm_evm_proto_rawDescGZIP(), []int{36}
}

func (x *CalculateTransactionFeeRequest) GetGasInfo() *ReceiptGasInfo {
	if x != nil {
		return x.GasInfo
	}
	return nil
}

// represents evm-style receipt
type ReceiptGasInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GasUsed           uint64     `protobuf:"varint,1,opt,name=gas_used,json=gasUsed,proto3" json:"gas_used,omitempty"`                                // gas used by this transaction (in gas units)
	EffectiveGasPrice *pb.BigInt `protobuf:"bytes,2,opt,name=effective_gas_price,json=effectiveGasPrice,proto3" json:"effective_gas_price,omitempty"` // actual gas price paid in wei (include after EIP-1559)
}

func (x *ReceiptGasInfo) Reset() {
	*x = ReceiptGasInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiptGasInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiptGasInfo) ProtoMessage() {}

func (x *ReceiptGasInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiptGasInfo.ProtoReflect.Descriptor instead.
func (*ReceiptGasInfo) Descriptor() ([]byte, []int) {
	return file_chains_evm_evm_proto_rawDescGZIP(), []int{37}
}

func (x *ReceiptGasInfo) GetGasUsed() uint64 {
	if x != nil {
		return x.GasUsed
	}
	return 0
}

func (x *ReceiptGasInfo) GetEffectiveGasPrice() *pb.BigInt {
	if x != nil {
		return x.EffectiveGasPrice
	}
	return nil
}

type CalculateTransactionFeeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionFee *pb.BigInt `protobuf:"bytes,1,opt,name=transaction_fee,json=transactionFee,proto3" json:"transaction_fee,omitempty"`
}

func (x *CalculateTransactionFeeReply) Reset() {
	*x = CalculateTransactionFeeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateTransactionFeeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateTransactionFeeReply) ProtoMessage() {}

func (x *CalculateTransactionFeeReply) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateTransactionFeeReply.ProtoReflect.Descriptor instead.
func (*CalculateTransactionFeeReply) Descriptor() ([]byte, []int) {
	return file_chains_evm_evm_proto_rawDescGZIP(), []int{38}
}

func (x *CalculateTransactionFeeReply) GetTransactionFee() *pb.BigInt {
	if x != nil {
		return x.TransactionFee
	}
	return nil
}

type SubmitTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	To        []byte     `protobuf:"bytes,1,opt,name=to,proto3" json:"to,omitempty"`
	Data      []byte     `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	GasConfig *GasConfig `protobuf:"bytes,3,opt,name=gas_config,json=gasConfig,proto3,oneof" json:"gas_config,omitempty"`
}

func (x *SubmitTransactionRequest) Reset() {
	*x = SubmitTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTransactionRequest) ProtoMessage() {}

func (x *SubmitTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTransactionRequest.ProtoReflect.Descriptor instead.
func (*SubmitTransactionRequest) Descriptor() ([]byte, []int) {
	return file_chains_evm_evm_proto_rawDescGZIP(), []int{39}
}

func (x *SubmitTransactionRequest) GetTo() []byte {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *SubmitTransactionRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SubmitTransactionRequest) GetGasConfig() *GasConfig {
	if x != nil {
		return x.GasConfig
	}
	return nil
}

type SubmitTransactionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxHash   []byte   `protobuf:"bytes,1,opt,name=txHash,proto3" json:"txHash,omitempty"`
	TxStatus TxStatus `protobuf:"varint,2,opt,name=txStatus,proto3,enum=loop.evm.TxStatus" json:"txStatus,omitempty"`
}

func (x *SubmitTransactionReply) Reset() {
	*x = SubmitTransactionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitTransactionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitTransactionReply) ProtoMessage() {}

func (x *SubmitTransactionReply) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitTransactionReply.ProtoReflect.Descriptor instead.
func (*SubmitTransactionReply) Descriptor() ([]byte, []int) {
	return file_chains_evm_evm_proto_rawDescGZIP(), []int{40}
}

func (x *SubmitTransactionReply) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *SubmitTransactionReply) GetTxStatus() TxStatus {
	if x != nil {
		return x.TxStatus
	}
	return TxStatus_TX_SUCCESS
}

type GetTransactionStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId string `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *GetTransactionStatusRequest) Reset() {
	*x = GetTransactionStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionStatusRequest) ProtoMessage() {}

func (x *GetTransactionStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionStatusRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionStatusRequest) Descriptor() ([]byte, []int) {
	return file_chains_evm_evm_proto_rawDescGZIP(), []int{41}
}

func (x *GetTransactionStatusRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

type GetTransactionStatusReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionStatus TransactionStatus `protobuf:"varint,1,opt,name=transaction_status,json=transactionStatus,proto3,enum=loop.evm.TransactionStatus" json:"transaction_status,omitempty"`
}

func (x *GetTransactionStatusReply) Reset() {
	*x = GetTransactionStatusReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chains_evm_evm_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionStatusReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionStatusReply) ProtoMessage() {}

func (x *GetTransactionStatusReply) ProtoReflect() protoreflect.Message {
	mi := &file_chains_evm_evm_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionStatusReply.ProtoReflect.Descriptor instead.
func (*GetTransactionStatusReply) Descriptor() ([]byte, []int) {
	return file_chains_evm_evm_proto_rawDescGZIP(), []int{42}
}

func (x *GetTransactionStatusReply) GetTransactionStatus() TransactionStatus {
	if x != nil {
		return x.TransactionStatus
	}
	return TransactionStatus_TRANSACTION_STATUS_UNKNOWN
}

var File_evm_proto protoreflect.FileDescriptor

var file_chains_evm_evm_proto_rawDesc = []byte{
	0x0a, 0x14, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x2f, 0x65, 0x76, 0x6d, 0x2f, 0x65, 0x76, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d,
	0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x6c,
	0x6f, 0x6f, 0x70, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x2f, 0x70, 0x62, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x41, 0x0a, 0x07, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x73, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x02, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x1e, 0x0a, 0x06, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x9d, 0x02, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52,
	0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08,
	0x74, 0x78, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07,
	0x74, 0x78, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x18, 0x0a,
	0x07, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x22, 0xcc, 0x01, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x28, 0x0a, 0x07, 0x74, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x42,
	0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x07, 0x74, 0x6f, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x06,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x06,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x22, 0xc0, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x67, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x67, 0x61, 0x73, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x42,
	0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x09,
	0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52,
	0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0xd0, 0x02, 0x0a, 0x07, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x78, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x21, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x6f, 0x67, 0x52,
	0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x3e,
	0x0a, 0x13, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x67, 0x61, 0x73, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x11, 0x65, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x47, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x31,
	0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x42, 0x69,
	0x67, 0x49, 0x6e, 0x74, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x94, 0x02, 0x0a,
	0x08, 0x4c, 0x50, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78,
	0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x6b, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x4c, 0x6f, 0x67, 0x73, 0x4b, 0x65, 0x70, 0x74, 0x12, 0x25, 0x0a,
	0x0e, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6c, 0x6f,
	0x67, 0x73, 0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x69, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x32, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x33, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x33, 0x12, 0x16, 0x0a, 0x06, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x34, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x34, 0x22, 0x8c, 0x01, 0x0a, 0x04, 0x48, 0x65, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74,
	0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73,
	0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x22, 0x9c, 0x01, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x33, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e,
	0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x69,
	0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x4c, 0x0a, 0x12, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61,
	0x6e, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x11, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x65, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x6f,
	0x72, 0x22, 0x98, 0x01, 0x0a, 0x11, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x10, 0x62, 0x6f, 0x6f, 0x6c, 0x65,
	0x61, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0f, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x6f, 0x6f,
	0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x2f, 0x0a, 0x03,
	0x41, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0x2e, 0x0a,
	0x02, 0x4f, 0x72, 0x12, 0x28, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0x70, 0x0a,
	0x13, 0x48, 0x61, 0x73, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x22,
	0x81, 0x01, 0x0a, 0x0b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x53,
	0x0a, 0x16, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x14, 0x68,
	0x61, 0x73, 0x68, 0x65, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x72, 0x73, 0x22, 0x79, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x53, 0x0a, 0x16, 0x68, 0x61, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6c, 0x6f, 0x6f, 0x70,
	0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x14, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x72, 0x73, 0x22, 0xae,
	0x02, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x4b, 0x0a, 0x11,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x6d,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x10, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2b, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x08, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x53, 0x69, 0x67, 0x12, 0x3b, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x62,
	0x79, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x57,
	0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x57, 0x6f,
	0x72, 0x64, 0x12, 0x3e, 0x0a, 0x0e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6c, 0x6f, 0x6f,
	0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x48, 0x00, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x79, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x42, 0x0b, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x22,
	0x73, 0x0a, 0x1b, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x64, 0x46, 0x69, 0x6e, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x26,
	0x0a, 0x06, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x52, 0x06,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x6f, 0x6f, 0x70,
	0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x52, 0x09, 0x66, 0x69, 0x6e, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x22, 0x6f, 0x0a, 0x13, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x63,
	0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x6f, 0x6f, 0x70,
	0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x73, 0x67, 0x52, 0x04, 0x63, 0x61,
	0x6c, 0x6c, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x27, 0x0a, 0x11, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x41,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x51, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x37, 0x0a, 0x0f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x42, 0x69,
	0x67, 0x49, 0x6e, 0x74, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x65, 0x65, 0x22, 0x4d, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x6f,
	0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0c, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x0b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x22, 0x34, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e,
	0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x22, 0x5f, 0x0a, 0x10, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x41, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x3a, 0x0a, 0x0e, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x07,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x07, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x39, 0x0a, 0x12, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x47, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x6f, 0x6f, 0x70,
	0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x4d, 0x73, 0x67, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x22, 0x24, 0x0a, 0x10, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x47, 0x61, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x03, 0x67, 0x61, 0x73, 0x22, 0x31, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x54, 0x0a, 0x19, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x37, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x32, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x22, 0x49, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x2b, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x07, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x22,
	0x48, 0x0a, 0x1a, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x50, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x3f, 0x0a, 0x1c, 0x55, 0x6e, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe0, 0x01, 0x0a, 0x17, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6c, 0x6f, 0x6f,
	0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0e,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x6f, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x6e,
	0x64, 0x53, 0x6f, 0x72, 0x74, 0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x6e, 0x64, 0x53,
	0x6f, 0x72, 0x74, 0x12, 0x48, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x3a, 0x0a,
	0x15, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x4c, 0x6f, 0x67,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e,
	0x4c, 0x6f, 0x67, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x22, 0x28, 0x0a, 0x09, 0x47, 0x61, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x67, 0x61, 0x73, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0x55, 0x0a, 0x1e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x67, 0x61, 0x73, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x65,
	0x76, 0x6d, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x47, 0x61, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x07, 0x67, 0x61, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6b, 0x0a, 0x0e, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x47, 0x61, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x61, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x67, 0x61, 0x73, 0x55, 0x73, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x13, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x5f, 0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x42, 0x69,
	0x67, 0x49, 0x6e, 0x74, 0x52, 0x11, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x47,
	0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x22, 0x57, 0x0a, 0x1c, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x65, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x37, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74,
	0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65,
	0x22, 0x86, 0x01, 0x0a, 0x18, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x37, 0x0a, 0x0a, 0x67, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d,
	0x2e, 0x47, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x09, 0x67, 0x61,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67,
	0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x60, 0x0a, 0x16, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x2e, 0x0a, 0x08, 0x74,
	0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x08, 0x74, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x44, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x22, 0x67, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x4a,
	0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6c, 0x6f, 0x6f,
	0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0x39, 0x0a, 0x08, 0x54, 0x78,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x58, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x58, 0x5f, 0x52, 0x45, 0x56,
	0x45, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x58, 0x5f, 0x46, 0x41,
	0x54, 0x41, 0x4c, 0x10, 0x02, 0x2a, 0xd6, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x1a, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x52, 0x4d, 0x45, 0x44, 0x10, 0x02, 0x12,
	0x20, 0x0a, 0x1c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x03, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04,
	0x12, 0x1c, 0x0a, 0x18, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x54, 0x41, 0x4c, 0x10, 0x05, 0x32, 0xd6,
	0x09, 0x0a, 0x03, 0x45, 0x56, 0x4d, 0x12, 0x5b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x22, 0x2e, 0x6c, 0x6f,
	0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0c, 0x43, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x12, 0x1d, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x43,
	0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x61,
	0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x44, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x1b, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c,
	0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6c, 0x6f, 0x6f,
	0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x41, 0x0a, 0x09, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x41, 0x74, 0x12, 0x1a, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18,
	0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x41, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x47, 0x0a, 0x0b, 0x45, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x47, 0x61, 0x73, 0x12, 0x1c, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x65,
	0x76, 0x6d, 0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x47, 0x61, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d,
	0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x47, 0x61, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x62, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x25, 0x2e, 0x6c, 0x6f, 0x6f, 0x70,
	0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x23, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x48, 0x61, 0x73, 0x68,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x65, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x12, 0x26,
	0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x65, 0x76,
	0x6d, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x57, 0x0a, 0x16,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41, 0x6e, 0x64, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x25,
	0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74,
	0x41, 0x6e, 0x64, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x48, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x56, 0x0a, 0x10, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x21, 0x2e, 0x6c, 0x6f, 0x6f, 0x70,
	0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x64, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x65, 0x64, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x53, 0x0a,
	0x13, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x57, 0x0a, 0x15, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x4c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x26, 0x2e, 0x6c, 0x6f,
	0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x4c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x62, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x25, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6c, 0x6f, 0x6f,
	0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x59, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e,
	0x65, 0x76, 0x6d, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x6b, 0x0a, 0x17, 0x43, 0x61,
	0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x65, 0x65, 0x12, 0x28, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d,
	0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x65, 0x76, 0x6d, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46,
	0x65, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x6b, 0x69, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x6b,
	0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x73, 0x2f, 0x65, 0x76, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chains_evm_evm_proto_rawDescOnce sync.Once
	file_chains_evm_evm_proto_rawDescData = file_chains_evm_evm_proto_rawDesc
)

func file_chains_evm_evm_proto_rawDescGZIP() []byte {
	file_chains_evm_evm_proto_rawDescOnce.Do(func() {
		file_chains_evm_evm_proto_rawDescData = protoimpl.X.CompressGZIP(file_chains_evm_evm_proto_rawDescData)
	})
	return file_evm_proto_rawDescData
}

var file_chains_evm_evm_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_chains_evm_evm_proto_msgTypes = make([]protoimpl.MessageInfo, 43)
var file_chains_evm_evm_proto_goTypes = []any{
	(TxStatus)(0),                          // 0: loop.evm.TxStatus
	(TransactionStatus)(0),                 // 1: loop.evm.TransactionStatus
	(*CallMsg)(nil),                        // 2: loop.evm.CallMsg
	(*Topics)(nil),                         // 3: loop.evm.Topics
	(*Log)(nil),                            // 4: loop.evm.Log
	(*FilterQuery)(nil),                    // 5: loop.evm.FilterQuery
	(*Transaction)(nil),                    // 6: loop.evm.Transaction
	(*Receipt)(nil),                        // 7: loop.evm.Receipt
	(*LPFilter)(nil),                       // 8: loop.evm.LPFilter
	(*Head)(nil),                           // 9: loop.evm.Head
	(*Expression)(nil),                     // 10: loop.evm.Expression
	(*BooleanExpression)(nil),              // 11: loop.evm.BooleanExpression
	(*And)(nil),                            // 12: loop.evm.And
	(*Or)(nil),                             // 13: loop.evm.Or
	(*HashValueComparator)(nil),            // 14: loop.evm.HashValueComparator
	(*EventByWord)(nil),                    // 15: loop.evm.EventByWord
	(*EventByTopic)(nil),                   // 16: loop.evm.EventByTopic
	(*Primitive)(nil),                      // 17: loop.evm.Primitive
	(*LatestAndFinalizedHeadReply)(nil),    // 18: loop.evm.LatestAndFinalizedHeadReply
	(*CallContractRequest)(nil),            // 19: loop.evm.CallContractRequest
	(*CallContractReply)(nil),              // 20: loop.evm.CallContractReply
	(*GetTransactionFeeRequest)(nil),       // 21: loop.evm.GetTransactionFeeRequest
	(*GetTransactionFeeReply)(nil),         // 22: loop.evm.GetTransactionFeeReply
	(*FilterLogsRequest)(nil),              // 23: loop.evm.FilterLogsRequest
	(*FilterLogsReply)(nil),                // 24: loop.evm.FilterLogsReply
	(*BalanceAtRequest)(nil),               // 25: loop.evm.BalanceAtRequest
	(*BalanceAtReply)(nil),                 // 26: loop.evm.BalanceAtReply
	(*EstimateGasRequest)(nil),             // 27: loop.evm.EstimateGasRequest
	(*EstimateGasReply)(nil),               // 28: loop.evm.EstimateGasReply
	(*GetTransactionByHashRequest)(nil),    // 29: loop.evm.GetTransactionByHashRequest
	(*GetTransactionByHashReply)(nil),      // 30: loop.evm.GetTransactionByHashReply
	(*GetTransactionReceiptRequest)(nil),   // 31: loop.evm.GetTransactionReceiptRequest
	(*GetTransactionReceiptReply)(nil),     // 32: loop.evm.GetTransactionReceiptReply
	(*RegisterLogTrackingRequest)(nil),     // 33: loop.evm.RegisterLogTrackingRequest
	(*UnregisterLogTrackingRequest)(nil),   // 34: loop.evm.UnregisterLogTrackingRequest
	(*QueryTrackedLogsRequest)(nil),        // 35: loop.evm.QueryTrackedLogsRequest
	(*QueryTrackedLogsReply)(nil),          // 36: loop.evm.QueryTrackedLogsReply
	(*GasConfig)(nil),                      // 37: loop.evm.GasConfig
	(*CalculateTransactionFeeRequest)(nil), // 38: loop.evm.CalculateTransactionFeeRequest
	(*ReceiptGasInfo)(nil),                 // 39: loop.evm.ReceiptGasInfo
	(*CalculateTransactionFeeReply)(nil),   // 40: loop.evm.CalculateTransactionFeeReply
	(*SubmitTransactionRequest)(nil),       // 41: loop.evm.SubmitTransactionRequest
	(*SubmitTransactionReply)(nil),         // 42: loop.evm.SubmitTransactionReply
	(*GetTransactionStatusRequest)(nil),    // 43: loop.evm.GetTransactionStatusRequest
	(*GetTransactionStatusReply)(nil),      // 44: loop.evm.GetTransactionStatusReply
	(*pb.BigInt)(nil),                      // 45: values.BigInt
	(chain_common.BooleanOperator)(0),      // 46: loop.chain.common.BooleanOperator
	(chain_common.ComparisonOperator)(0),   // 47: loop.chain.common.ComparisonOperator
	(*chain_common.Primitive)(nil),         // 48: loop.chain.common.Primitive
	(*chain_common.LimitAndSort)(nil),      // 49: loop.chain.common.LimitAndSort
	(chain_common.Confidence)(0),           // 50: loop.chain.common.Confidence
	(*emptypb.Empty)(nil),                  // 51: google.protobuf.Empty
}
var file_chains_evm_evm_proto_depIdxs = []int32{
	45, // 0: loop.evm.Log.block_number:type_name -> values.BigInt
	45, // 1: loop.evm.FilterQuery.fromBlock:type_name -> values.BigInt
	45, // 2: loop.evm.FilterQuery.toBlock:type_name -> values.BigInt
	3,  // 3: loop.evm.FilterQuery.topics:type_name -> loop.evm.Topics
	45, // 4: loop.evm.Transaction.value:type_name -> values.BigInt
	45, // 5: loop.evm.Transaction.gas_price:type_name -> values.BigInt
	4,  // 6: loop.evm.Receipt.logs:type_name -> loop.evm.Log
	45, // 7: loop.evm.Receipt.effective_gas_price:type_name -> values.BigInt
	45, // 8: loop.evm.Receipt.block_number:type_name -> values.BigInt
	45, // 9: loop.evm.Head.block_number:type_name -> values.BigInt
	17, // 10: loop.evm.Expression.primitive:type_name -> loop.evm.Primitive
	11, // 11: loop.evm.Expression.boolean_expression:type_name -> loop.evm.BooleanExpression
	46, // 12: loop.evm.BooleanExpression.boolean_operator:type_name -> loop.chain.common.BooleanOperator
	10, // 13: loop.evm.BooleanExpression.expression:type_name -> loop.evm.Expression
	10, // 14: loop.evm.And.expr:type_name -> loop.evm.Expression
	10, // 15: loop.evm.Or.expr:type_name -> loop.evm.Expression
	47, // 16: loop.evm.HashValueComparator.operator:type_name -> loop.chain.common.ComparisonOperator
	14, // 17: loop.evm.EventByWord.hashed_value_comparers:type_name -> loop.evm.HashValueComparator
	14, // 18: loop.evm.EventByTopic.hashed_value_comparers:type_name -> loop.evm.HashValueComparator
	48, // 19: loop.evm.Primitive.general_primitive:type_name -> loop.chain.common.Primitive
	15, // 20: loop.evm.Primitive.event_by_word:type_name -> loop.evm.EventByWord
	16, // 21: loop.evm.Primitive.event_by_topic:type_name -> loop.evm.EventByTopic
	9,  // 22: loop.evm.LatestAndFinalizedHeadReply.latest:type_name -> loop.evm.Head
	9,  // 23: loop.evm.LatestAndFinalizedHeadReply.finalized:type_name -> loop.evm.Head
	2,  // 24: loop.evm.CallContractRequest.call:type_name -> loop.evm.CallMsg
	45, // 25: loop.evm.CallContractRequest.block_number:type_name -> values.BigInt
	45, // 26: loop.evm.GetTransactionFeeReply.transaction_fee:type_name -> values.BigInt
	5,  // 27: loop.evm.FilterLogsRequest.filter_query:type_name -> loop.evm.FilterQuery
	4,  // 28: loop.evm.FilterLogsReply.logs:type_name -> loop.evm.Log
	45, // 29: loop.evm.BalanceAtRequest.block_number:type_name -> values.BigInt
	45, // 30: loop.evm.BalanceAtReply.balance:type_name -> values.BigInt
	2,  // 31: loop.evm.EstimateGasRequest.msg:type_name -> loop.evm.CallMsg
	6,  // 32: loop.evm.GetTransactionByHashReply.transaction:type_name -> loop.evm.Transaction
	7,  // 33: loop.evm.GetTransactionReceiptReply.receipt:type_name -> loop.evm.Receipt
	8,  // 34: loop.evm.RegisterLogTrackingRequest.filter:type_name -> loop.evm.LPFilter
	10, // 35: loop.evm.QueryTrackedLogsRequest.expression:type_name -> loop.evm.Expression
	49, // 36: loop.evm.QueryTrackedLogsRequest.limit_and_sort:type_name -> loop.chain.common.LimitAndSort
	50, // 37: loop.evm.QueryTrackedLogsRequest.confidence_level:type_name -> loop.chain.common.Confidence
	4,  // 38: loop.evm.QueryTrackedLogsReply.logs:type_name -> loop.evm.Log
	39, // 39: loop.evm.CalculateTransactionFeeRequest.gas_info:type_name -> loop.evm.ReceiptGasInfo
	45, // 40: loop.evm.ReceiptGasInfo.effective_gas_price:type_name -> values.BigInt
	45, // 41: loop.evm.CalculateTransactionFeeReply.transaction_fee:type_name -> values.BigInt
	37, // 42: loop.evm.SubmitTransactionRequest.gas_config:type_name -> loop.evm.GasConfig
	0,  // 43: loop.evm.SubmitTransactionReply.txStatus:type_name -> loop.evm.TxStatus
	1,  // 44: loop.evm.GetTransactionStatusReply.transaction_status:type_name -> loop.evm.TransactionStatus
	21, // 45: loop.evm.EVM.GetTransactionFee:input_type -> loop.evm.GetTransactionFeeRequest
	19, // 46: loop.evm.EVM.CallContract:input_type -> loop.evm.CallContractRequest
	23, // 47: loop.evm.EVM.FilterLogs:input_type -> loop.evm.FilterLogsRequest
	25, // 48: loop.evm.EVM.BalanceAt:input_type -> loop.evm.BalanceAtRequest
	27, // 49: loop.evm.EVM.EstimateGas:input_type -> loop.evm.EstimateGasRequest
	29, // 50: loop.evm.EVM.GetTransactionByHash:input_type -> loop.evm.GetTransactionByHashRequest
	31, // 51: loop.evm.EVM.GetTransactionReceipt:input_type -> loop.evm.GetTransactionReceiptRequest
	51, // 52: loop.evm.EVM.LatestAndFinalizedHead:input_type -> google.protobuf.Empty
	35, // 53: loop.evm.EVM.QueryTrackedLogs:input_type -> loop.evm.QueryTrackedLogsRequest
	33, // 54: loop.evm.EVM.RegisterLogTracking:input_type -> loop.evm.RegisterLogTrackingRequest
	34, // 55: loop.evm.EVM.UnregisterLogTracking:input_type -> loop.evm.UnregisterLogTrackingRequest
	43, // 56: loop.evm.EVM.GetTransactionStatus:input_type -> loop.evm.GetTransactionStatusRequest
	41, // 57: loop.evm.EVM.SubmitTransaction:input_type -> loop.evm.SubmitTransactionRequest
	38, // 58: loop.evm.EVM.CalculateTransactionFee:input_type -> loop.evm.CalculateTransactionFeeRequest
	22, // 59: loop.evm.EVM.GetTransactionFee:output_type -> loop.evm.GetTransactionFeeReply
	20, // 60: loop.evm.EVM.CallContract:output_type -> loop.evm.CallContractReply
	24, // 61: loop.evm.EVM.FilterLogs:output_type -> loop.evm.FilterLogsReply
	26, // 62: loop.evm.EVM.BalanceAt:output_type -> loop.evm.BalanceAtReply
	28, // 63: loop.evm.EVM.EstimateGas:output_type -> loop.evm.EstimateGasReply
	30, // 64: loop.evm.EVM.GetTransactionByHash:output_type -> loop.evm.GetTransactionByHashReply
	32, // 65: loop.evm.EVM.GetTransactionReceipt:output_type -> loop.evm.GetTransactionReceiptReply
	18, // 66: loop.evm.EVM.LatestAndFinalizedHead:output_type -> loop.evm.LatestAndFinalizedHeadReply
	36, // 67: loop.evm.EVM.QueryTrackedLogs:output_type -> loop.evm.QueryTrackedLogsReply
	51, // 68: loop.evm.EVM.RegisterLogTracking:output_type -> google.protobuf.Empty
	51, // 69: loop.evm.EVM.UnregisterLogTracking:output_type -> google.protobuf.Empty
	44, // 70: loop.evm.EVM.GetTransactionStatus:output_type -> loop.evm.GetTransactionStatusReply
	42, // 71: loop.evm.EVM.SubmitTransaction:output_type -> loop.evm.SubmitTransactionReply
	40, // 72: loop.evm.EVM.CalculateTransactionFee:output_type -> loop.evm.CalculateTransactionFeeReply
	59, // [59:73] is the sub-list for method output_type
	45, // [45:59] is the sub-list for method input_type
	45, // [45:45] is the sub-list for extension type_name
	45, // [45:45] is the sub-list for extension extendee
	0,  // [0:45] is the sub-list for field type_name
}

func init() { file_evm_proto_init() }
func file_evm_proto_init() {
	if File_evm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chains_evm_evm_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CallMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Topics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*FilterQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Receipt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*LPFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Head); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*Expression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*BooleanExpression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*And); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*Or); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*HashValueComparator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*EventByWord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*EventByTopic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*Primitive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*LatestAndFinalizedHeadReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*CallContractRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*CallContractReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*GetTransactionFeeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*GetTransactionFeeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*FilterLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*FilterLogsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*BalanceAtRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*BalanceAtReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*EstimateGasRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*EstimateGasReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*GetTransactionByHashRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*GetTransactionByHashReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*GetTransactionReceiptRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*GetTransactionReceiptReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*RegisterLogTrackingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*UnregisterLogTrackingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*QueryTrackedLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*QueryTrackedLogsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*GasConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*CalculateTransactionFeeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*ReceiptGasInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*CalculateTransactionFeeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*SubmitTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*SubmitTransactionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*GetTransactionStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chains_evm_evm_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*GetTransactionStatusReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chains_evm_evm_proto_msgTypes[8].OneofWrappers = []any{
		(*Expression_Primitive)(nil),
		(*Expression_BooleanExpression)(nil),
	}
	file_evm_proto_msgTypes[15].OneofWrappers = []any{
		(*Primitive_GeneralPrimitive)(nil),
		(*Primitive_ContractAddress)(nil),
		(*Primitive_EventSig)(nil),
		(*Primitive_EventByWord)(nil),
		(*Primitive_EventByTopic)(nil),
	}
	file_chains_evm_evm_proto_msgTypes[39].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chains_evm_evm_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   43,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_evm_proto_goTypes,
		DependencyIndexes: file_evm_proto_depIdxs,
		EnumInfos:         file_evm_proto_enumTypes,
		MessageInfos:      file_evm_proto_msgTypes,
	}.Build()
	File_chains_evm_evm_proto = out.File
	file_chains_evm_evm_proto_rawDesc = nil
	file_chains_evm_evm_proto_goTypes = nil
	file_chains_evm_evm_proto_depIdxs = nil
}
