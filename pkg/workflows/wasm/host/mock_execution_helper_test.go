// Code generated by mockery v2.53.3. DO NOT EDIT.

package host

import (
	context "context"

	pb "github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk/v2/pb"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockExecutionHelper is an autogenerated mock type for the ExecutionHelper type
type MockExecutionHelper struct {
	mock.Mock
}

type MockExecutionHelper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockExecutionHelper) EXPECT() *MockExecutionHelper_Expecter {
	return &MockExecutionHelper_Expecter{mock: &_m.Mock}
}

// CallCapability provides a mock function with given fields: ctx, request
func (_m *MockExecutionHelper) CallCapability(ctx context.Context, request *pb.CapabilityRequest) (*pb.CapabilityResponse, error) {
	ret := _m.Called(ctx, request)

	if len(ret) == 0 {
		panic("no return value specified for CallCapability")
	}

	var r0 *pb.CapabilityResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CapabilityRequest) (*pb.CapabilityResponse, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CapabilityRequest) *pb.CapabilityResponse); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.CapabilityResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.CapabilityRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockExecutionHelper_CallCapability_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallCapability'
type MockExecutionHelper_CallCapability_Call struct {
	*mock.Call
}

// CallCapability is a helper method to define mock.On call
//   - ctx context.Context
//   - request *pb.CapabilityRequest
func (_e *MockExecutionHelper_Expecter) CallCapability(ctx interface{}, request interface{}) *MockExecutionHelper_CallCapability_Call {
	return &MockExecutionHelper_CallCapability_Call{Call: _e.mock.On("CallCapability", ctx, request)}
}

func (_c *MockExecutionHelper_CallCapability_Call) Run(run func(ctx context.Context, request *pb.CapabilityRequest)) *MockExecutionHelper_CallCapability_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*pb.CapabilityRequest))
	})
	return _c
}

func (_c *MockExecutionHelper_CallCapability_Call) Return(_a0 *pb.CapabilityResponse, _a1 error) *MockExecutionHelper_CallCapability_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockExecutionHelper_CallCapability_Call) RunAndReturn(run func(context.Context, *pb.CapabilityRequest) (*pb.CapabilityResponse, error)) *MockExecutionHelper_CallCapability_Call {
	_c.Call.Return(run)
	return _c
}

// GetDONTime provides a mock function with no fields
func (_m *MockExecutionHelper) GetDONTime() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetDONTime")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// MockExecutionHelper_GetDONTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDONTime'
type MockExecutionHelper_GetDONTime_Call struct {
	*mock.Call
}

// GetDONTime is a helper method to define mock.On call
func (_e *MockExecutionHelper_Expecter) GetDONTime() *MockExecutionHelper_GetDONTime_Call {
	return &MockExecutionHelper_GetDONTime_Call{Call: _e.mock.On("GetDONTime")}
}

func (_c *MockExecutionHelper_GetDONTime_Call) Run(run func()) *MockExecutionHelper_GetDONTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecutionHelper_GetDONTime_Call) Return(_a0 time.Time) *MockExecutionHelper_GetDONTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionHelper_GetDONTime_Call) RunAndReturn(run func() time.Time) *MockExecutionHelper_GetDONTime_Call {
	_c.Call.Return(run)
	return _c
}

// GetID provides a mock function with no fields
func (_m *MockExecutionHelper) GetID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockExecutionHelper_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type MockExecutionHelper_GetID_Call struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
func (_e *MockExecutionHelper_Expecter) GetID() *MockExecutionHelper_GetID_Call {
	return &MockExecutionHelper_GetID_Call{Call: _e.mock.On("GetID")}
}

func (_c *MockExecutionHelper_GetID_Call) Run(run func()) *MockExecutionHelper_GetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecutionHelper_GetID_Call) Return(_a0 string) *MockExecutionHelper_GetID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionHelper_GetID_Call) RunAndReturn(run func() string) *MockExecutionHelper_GetID_Call {
	_c.Call.Return(run)
	return _c
}

// GetNodeTime provides a mock function with no fields
func (_m *MockExecutionHelper) GetNodeTime() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetNodeTime")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// MockExecutionHelper_GetNodeTime_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNodeTime'
type MockExecutionHelper_GetNodeTime_Call struct {
	*mock.Call
}

// GetNodeTime is a helper method to define mock.On call
func (_e *MockExecutionHelper_Expecter) GetNodeTime() *MockExecutionHelper_GetNodeTime_Call {
	return &MockExecutionHelper_GetNodeTime_Call{Call: _e.mock.On("GetNodeTime")}
}

func (_c *MockExecutionHelper_GetNodeTime_Call) Run(run func()) *MockExecutionHelper_GetNodeTime_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockExecutionHelper_GetNodeTime_Call) Return(_a0 time.Time) *MockExecutionHelper_GetNodeTime_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockExecutionHelper_GetNodeTime_Call) RunAndReturn(run func() time.Time) *MockExecutionHelper_GetNodeTime_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockExecutionHelper creates a new instance of MockExecutionHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockExecutionHelper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockExecutionHelper {
	mock := &MockExecutionHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
