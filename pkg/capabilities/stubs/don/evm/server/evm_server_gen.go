// Code generated by github.com/smartcontractkit/chainlink-common/pkg/capabilities/v2/protoc, DO NOT EDIT.

package server

import (
	"context"
	"fmt"
	"time"

	"google.golang.org/protobuf/types/known/emptypb"

	"github.com/smartcontractkit/chainlink-common/pkg/capabilities/stubs/don/crosschain"
	"github.com/smartcontractkit/chainlink-common/pkg/capabilities/stubs/don/evm"

	"github.com/smartcontractkit/chainlink-common/pkg/capabilities"
	"github.com/smartcontractkit/chainlink-common/pkg/loop"
	"github.com/smartcontractkit/chainlink-common/pkg/types/core"
)

// Avoid unused imports if there is configuration type
var _ = emptypb.Empty{}

type ClientCapability interface {
	GetTxResult(ctx context.Context, metadata capabilities.RequestMetadata, input *evm.TxID) (*crosschain.TxResult, error)

	ReadMethod(ctx context.Context, metadata capabilities.RequestMetadata, input *evm.ReadMethodRequest) (*crosschain.ByteArray, error)

	QueryLogs(ctx context.Context, metadata capabilities.RequestMetadata, input *evm.QueryLogsRequest) (*evm.LogList, error)

	SubmitTransaction(ctx context.Context, metadata capabilities.RequestMetadata, input *evm.SubmitTransactionRequest) (*evm.TxID, error)

	RegisterOnFinalityViolation(ctx context.Context, metadata capabilities.RequestMetadata, input *emptypb.Empty) (<-chan capabilities.TriggerAndId[*crosschain.BlockRange], error)
	UnregisterOnFinalityViolation(ctx context.Context, metadata capabilities.RequestMetadata, input *emptypb.Empty) error
	Start(ctx context.Context) error
	Close() error
	HealthReport() map[string]error
	Name() string
	Description() string
	Ready() error
	Initialise(ctx context.Context, config string, telemetryService core.TelemetryService, store core.KeyValueStore, errorLog core.ErrorLog, pipelineRunner core.PipelineRunnerService, relayerSet core.RelayerSet, oracleFactory core.OracleFactory) error
}

func NewClientServer(capability ClientCapability) loop.StandardCapabilities {
	return &clientServer{
		clientCapability: clientCapability{ClientCapability: capability},
	}
}

type clientServer struct {
	clientCapability
	capabilityRegistry core.CapabilitiesRegistry
}

func (cs *clientServer) Initialise(ctx context.Context, config string, telemetryService core.TelemetryService, store core.KeyValueStore, capabilityRegistry core.CapabilitiesRegistry, errorLog core.ErrorLog, pipelineRunner core.PipelineRunnerService, relayerSet core.RelayerSet, oracleFactory core.OracleFactory) error {
	if err := cs.ClientCapability.Initialise(ctx, config, telemetryService, store, errorLog, pipelineRunner, relayerSet, oracleFactory); err != nil {
		return fmt.Errorf("error when initializing capability: %w", err)
	}

	cs.capabilityRegistry = capabilityRegistry

	if err := capabilityRegistry.Add(ctx, &clientCapability{
		ClientCapability: cs.ClientCapability,
	}); err != nil {
		return fmt.Errorf("error when adding kv store action to the registry: %w", err)
	}

	return nil
}

func (cs *clientServer) Close() error {
	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
	defer cancel()
	if err := cs.capabilityRegistry.Remove(ctx, "evm@1.0.0"); err != nil {
		return err
	}

	return cs.clientCapability.Close()
}

func (cs *clientServer) Infos(ctx context.Context) ([]capabilities.CapabilityInfo, error) {
	info, err := cs.clientCapability.Info(ctx)
	if err != nil {
		return nil, err
	}
	return []capabilities.CapabilityInfo{info}, nil
}

type clientCapability struct {
	ClientCapability
}

func (c *clientCapability) Info(ctx context.Context) (capabilities.CapabilityInfo, error) {
	// Maybe we do need to split it out, even if the user doesn't see it
	return capabilities.NewCapabilityInfo("evm@1.0.0", capabilities.CapabilityTypeCombined, c.ClientCapability.Description())
}

var _ capabilities.ExecutableAndTriggerCapability = (*clientCapability)(nil)

func (c *clientCapability) RegisterTrigger(ctx context.Context, request capabilities.TriggerRegistrationRequest) (<-chan capabilities.TriggerResponse, error) {
	switch request.Method {
	case "OnFinalityViolation":
		input := &emptypb.Empty{}
		return capabilities.RegisterTrigger(ctx, "evm@1.0.0", request, input, c.ClientCapability.RegisterOnFinalityViolation)
	default:
		return nil, fmt.Errorf("trigger %s not found", request.Method)
	}
}

func (c *clientCapability) UnregisterTrigger(ctx context.Context, request capabilities.TriggerRegistrationRequest) error {
	switch request.Method {
	case "OnFinalityViolation":
		input := &emptypb.Empty{}
		_, err := capabilities.FromValueOrAny(request.Config, request.Payload, input)
		if err != nil {
			return err
		}
		return c.ClientCapability.UnregisterOnFinalityViolation(ctx, request.Metadata, input)
	default:
		return fmt.Errorf("method %s not found", request.Method)
	}
}

func (c *clientCapability) RegisterToWorkflow(ctx context.Context, request capabilities.RegisterToWorkflowRequest) error {
	return nil
}

func (c *clientCapability) UnregisterFromWorkflow(ctx context.Context, request capabilities.UnregisterFromWorkflowRequest) error {
	return nil
}

func (c *clientCapability) Execute(ctx context.Context, request capabilities.CapabilityRequest) (capabilities.CapabilityResponse, error) {
	response := capabilities.CapabilityResponse{}
	switch request.Method {
	case "GetTxResult":
		input := &evm.TxID{}
		config := &emptypb.Empty{}
		wrapped := func(ctx context.Context, metadata capabilities.RequestMetadata, input *evm.TxID, _ *emptypb.Empty) (*crosschain.TxResult, error) {
			return c.ClientCapability.GetTxResult(ctx, metadata, input)
		}
		return capabilities.Execute(ctx, request, input, config, wrapped)
	case "ReadMethod":
		input := &evm.ReadMethodRequest{}
		config := &emptypb.Empty{}
		wrapped := func(ctx context.Context, metadata capabilities.RequestMetadata, input *evm.ReadMethodRequest, _ *emptypb.Empty) (*crosschain.ByteArray, error) {
			return c.ClientCapability.ReadMethod(ctx, metadata, input)
		}
		return capabilities.Execute(ctx, request, input, config, wrapped)
	case "QueryLogs":
		input := &evm.QueryLogsRequest{}
		config := &emptypb.Empty{}
		wrapped := func(ctx context.Context, metadata capabilities.RequestMetadata, input *evm.QueryLogsRequest, _ *emptypb.Empty) (*evm.LogList, error) {
			return c.ClientCapability.QueryLogs(ctx, metadata, input)
		}
		return capabilities.Execute(ctx, request, input, config, wrapped)
	case "SubmitTransaction":
		input := &evm.SubmitTransactionRequest{}
		config := &emptypb.Empty{}
		wrapped := func(ctx context.Context, metadata capabilities.RequestMetadata, input *evm.SubmitTransactionRequest, _ *emptypb.Empty) (*evm.TxID, error) {
			return c.ClientCapability.SubmitTransaction(ctx, metadata, input)
		}
		return capabilities.Execute(ctx, request, input, config, wrapped)
	default:
		return response, fmt.Errorf("method %s not found", request.Method)
	}
}
