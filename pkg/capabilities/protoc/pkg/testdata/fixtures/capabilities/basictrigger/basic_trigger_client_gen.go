// Code generated by github.com/smartcontractkit/chainlink-common/pkg/capabilities/protoc, DO NOT EDIT.

package basictrigger

import (
	"google.golang.org/protobuf/types/known/anypb"

	"github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk"
)

type Basic struct {
	// TODO config types (optional)
	// TODO capability interfaces.
	// Is this required if we're not doing chain abstraction?
	// KV store could use it if we have different kinds...
}

func (c Basic) Trigger(config *Config) sdk.DonTrigger[*Outputs] {
	configAny, _ := anypb.New(config)
	return &basicTrigger{
		config: configAny,
	}
}

type basicTrigger struct {
	config *anypb.Any
}

func (*basicTrigger) IsDonTrigger() {}
func (*basicTrigger) NewT() *Outputs {
	return &Outputs{}
}

func (*basicTrigger) Id() string {
	// TODO interfaces
	return "basic-test-trigger@1.0.0"
}

func (t *basicTrigger) ConfigAsAny() *anypb.Any {
	return t.config
}
