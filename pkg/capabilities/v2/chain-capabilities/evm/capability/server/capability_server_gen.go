// Code generated by github.com/smartcontractkit/chainlink-common/pkg/capabilities/v2/protoc, DO NOT EDIT.

package server

import (
	"context"
	"fmt"
	"time"

	"google.golang.org/protobuf/types/known/emptypb"

	evmpb "github.com/smartcontractkit/chainlink-common/pkg/capabilities/v2/chain-capabilities/evm/chain-service"

	"github.com/smartcontractkit/chainlink-common/pkg/capabilities"
	"github.com/smartcontractkit/chainlink-common/pkg/types/core"
)

// Avoid unused imports if there is configuration type
var _ = emptypb.Empty{}

type EVMCapability interface {
	CallContract(ctx context.Context, metadata capabilities.RequestMetadata, input *evmpb.CallContractRequest) (*evmpb.CallContractReply, error)

	FilterLogs(ctx context.Context, metadata capabilities.RequestMetadata, input *evmpb.FilterLogsRequest) (*evmpb.FilterLogsReply, error)

	BalanceAt(ctx context.Context, metadata capabilities.RequestMetadata, input *evmpb.BalanceAtRequest) (*evmpb.BalanceAtReply, error)

	EstimateGas(ctx context.Context, metadata capabilities.RequestMetadata, input *evmpb.EstimateGasRequest) (*evmpb.EstimateGasReply, error)

	GetTransactionByHash(ctx context.Context, metadata capabilities.RequestMetadata, input *evmpb.GetTransactionByHashRequest) (*evmpb.GetTransactionByHashReply, error)

	GetTransactionReceipt(ctx context.Context, metadata capabilities.RequestMetadata, input *evmpb.GetTransactionReceiptRequest) (*evmpb.GetTransactionReceiptReply, error)

	LatestAndFinalizedHead(ctx context.Context, metadata capabilities.RequestMetadata, input *emptypb.Empty) (*evmpb.LatestAndFinalizedHeadReply, error)

	QueryTrackedLogs(ctx context.Context, metadata capabilities.RequestMetadata, input *evmpb.QueryTrackedLogsRequest) (*evmpb.QueryTrackedLogsReply, error)

	RegisterLogTracking(ctx context.Context, metadata capabilities.RequestMetadata, input *evmpb.RegisterLogTrackingRequest) (*emptypb.Empty, error)

	UnregisterLogTracking(ctx context.Context, metadata capabilities.RequestMetadata, input *evmpb.UnregisterLogTrackingRequest) (*emptypb.Empty, error)

	Start(ctx context.Context) error
	Close() error
	HealthReport() map[string]error
	Name() string
	Description() string
	Ready() error
	Initialise(ctx context.Context, config string, telemetryService core.TelemetryService, store core.KeyValueStore, errorLog core.ErrorLog, pipelineRunner core.PipelineRunnerService, relayerSet core.RelayerSet, oracleFactory core.OracleFactory) error
}

func NewEVMServer(capability EVMCapability) *EVMServer {
	stopCh := make(chan struct{})
	return &EVMServer{
		eVMCapability: eVMCapability{EVMCapability: capability, stopCh: stopCh},
		stopCh:        stopCh,
	}
}

type EVMServer struct {
	eVMCapability
	capabilityRegistry core.CapabilitiesRegistry
	stopCh             chan struct{}
}

func (cs *EVMServer) Initialise(ctx context.Context, config string, telemetryService core.TelemetryService, store core.KeyValueStore, capabilityRegistry core.CapabilitiesRegistry, errorLog core.ErrorLog, pipelineRunner core.PipelineRunnerService, relayerSet core.RelayerSet, oracleFactory core.OracleFactory) error {
	if err := cs.EVMCapability.Initialise(ctx, config, telemetryService, store, errorLog, pipelineRunner, relayerSet, oracleFactory); err != nil {
		return fmt.Errorf("error when initializing capability: %w", err)
	}

	cs.capabilityRegistry = capabilityRegistry

	if err := capabilityRegistry.Add(ctx, &eVMCapability{
		EVMCapability: cs.EVMCapability,
	}); err != nil {
		return fmt.Errorf("error when adding kv store action to the registry: %w", err)
	}

	return nil
}

func (cs *EVMServer) Close() error {
	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
	defer cancel()

	if cs.capabilityRegistry != nil {
		if err := cs.capabilityRegistry.Remove(ctx, "mainnet-evm@1.0.0"); err != nil {
			return err
		}
	}

	if cs.stopCh != nil {
		close(cs.stopCh)
	}

	return cs.eVMCapability.Close()
}

func (cs *EVMServer) Infos(ctx context.Context) ([]capabilities.CapabilityInfo, error) {
	info, err := cs.eVMCapability.Info(ctx)
	if err != nil {
		return nil, err
	}
	return []capabilities.CapabilityInfo{info}, nil
}

type eVMCapability struct {
	EVMCapability
	stopCh chan struct{}
}

func (c *eVMCapability) Info(ctx context.Context) (capabilities.CapabilityInfo, error) {
	// Maybe we do need to split it out, even if the user doesn't see it
	return capabilities.NewCapabilityInfo("mainnet-evm@1.0.0", capabilities.CapabilityTypeCombined, c.EVMCapability.Description())
}

var _ capabilities.ExecutableAndTriggerCapability = (*eVMCapability)(nil)

func (c *eVMCapability) RegisterTrigger(ctx context.Context, request capabilities.TriggerRegistrationRequest) (<-chan capabilities.TriggerResponse, error) {
	return nil, fmt.Errorf("trigger %s not found", request.Method)
}

func (c *eVMCapability) UnregisterTrigger(ctx context.Context, request capabilities.TriggerRegistrationRequest) error {
	return fmt.Errorf("trigger %s not found", request.Method)
}

func (c *eVMCapability) RegisterToWorkflow(ctx context.Context, request capabilities.RegisterToWorkflowRequest) error {
	return nil
}

func (c *eVMCapability) UnregisterFromWorkflow(ctx context.Context, request capabilities.UnregisterFromWorkflowRequest) error {
	return nil
}

func (c *eVMCapability) Execute(ctx context.Context, request capabilities.CapabilityRequest) (capabilities.CapabilityResponse, error) {
	response := capabilities.CapabilityResponse{}
	switch request.Method {
	case "CallContract":
		input := &evmpb.CallContractRequest{}
		config := &emptypb.Empty{}
		wrapped := func(ctx context.Context, metadata capabilities.RequestMetadata, input *evmpb.CallContractRequest, _ *emptypb.Empty) (*evmpb.CallContractReply, error) {
			return c.EVMCapability.CallContract(ctx, metadata, input)
		}
		return capabilities.Execute(ctx, request, input, config, wrapped)
	case "FilterLogs":
		input := &evmpb.FilterLogsRequest{}
		config := &emptypb.Empty{}
		wrapped := func(ctx context.Context, metadata capabilities.RequestMetadata, input *evmpb.FilterLogsRequest, _ *emptypb.Empty) (*evmpb.FilterLogsReply, error) {
			return c.EVMCapability.FilterLogs(ctx, metadata, input)
		}
		return capabilities.Execute(ctx, request, input, config, wrapped)
	case "BalanceAt":
		input := &evmpb.BalanceAtRequest{}
		config := &emptypb.Empty{}
		wrapped := func(ctx context.Context, metadata capabilities.RequestMetadata, input *evmpb.BalanceAtRequest, _ *emptypb.Empty) (*evmpb.BalanceAtReply, error) {
			return c.EVMCapability.BalanceAt(ctx, metadata, input)
		}
		return capabilities.Execute(ctx, request, input, config, wrapped)
	case "EstimateGas":
		input := &evmpb.EstimateGasRequest{}
		config := &emptypb.Empty{}
		wrapped := func(ctx context.Context, metadata capabilities.RequestMetadata, input *evmpb.EstimateGasRequest, _ *emptypb.Empty) (*evmpb.EstimateGasReply, error) {
			return c.EVMCapability.EstimateGas(ctx, metadata, input)
		}
		return capabilities.Execute(ctx, request, input, config, wrapped)
	case "GetTransactionByHash":
		input := &evmpb.GetTransactionByHashRequest{}
		config := &emptypb.Empty{}
		wrapped := func(ctx context.Context, metadata capabilities.RequestMetadata, input *evmpb.GetTransactionByHashRequest, _ *emptypb.Empty) (*evmpb.GetTransactionByHashReply, error) {
			return c.EVMCapability.GetTransactionByHash(ctx, metadata, input)
		}
		return capabilities.Execute(ctx, request, input, config, wrapped)
	case "GetTransactionReceipt":
		input := &evmpb.GetTransactionReceiptRequest{}
		config := &emptypb.Empty{}
		wrapped := func(ctx context.Context, metadata capabilities.RequestMetadata, input *evmpb.GetTransactionReceiptRequest, _ *emptypb.Empty) (*evmpb.GetTransactionReceiptReply, error) {
			return c.EVMCapability.GetTransactionReceipt(ctx, metadata, input)
		}
		return capabilities.Execute(ctx, request, input, config, wrapped)
	case "LatestAndFinalizedHead":
		input := &emptypb.Empty{}
		config := &emptypb.Empty{}
		wrapped := func(ctx context.Context, metadata capabilities.RequestMetadata, input *emptypb.Empty, _ *emptypb.Empty) (*evmpb.LatestAndFinalizedHeadReply, error) {
			return c.EVMCapability.LatestAndFinalizedHead(ctx, metadata, input)
		}
		return capabilities.Execute(ctx, request, input, config, wrapped)
	case "QueryTrackedLogs":
		input := &evmpb.QueryTrackedLogsRequest{}
		config := &emptypb.Empty{}
		wrapped := func(ctx context.Context, metadata capabilities.RequestMetadata, input *evmpb.QueryTrackedLogsRequest, _ *emptypb.Empty) (*evmpb.QueryTrackedLogsReply, error) {
			return c.EVMCapability.QueryTrackedLogs(ctx, metadata, input)
		}
		return capabilities.Execute(ctx, request, input, config, wrapped)
	case "RegisterLogTracking":
		input := &evmpb.RegisterLogTrackingRequest{}
		config := &emptypb.Empty{}
		wrapped := func(ctx context.Context, metadata capabilities.RequestMetadata, input *evmpb.RegisterLogTrackingRequest, _ *emptypb.Empty) (*emptypb.Empty, error) {
			return c.EVMCapability.RegisterLogTracking(ctx, metadata, input)
		}
		return capabilities.Execute(ctx, request, input, config, wrapped)
	case "UnregisterLogTracking":
		input := &evmpb.UnregisterLogTrackingRequest{}
		config := &emptypb.Empty{}
		wrapped := func(ctx context.Context, metadata capabilities.RequestMetadata, input *evmpb.UnregisterLogTrackingRequest, _ *emptypb.Empty) (*emptypb.Empty, error) {
			return c.EVMCapability.UnregisterLogTracking(ctx, metadata, input)
		}
		return capabilities.Execute(ctx, request, input, config, wrapped)
	default:
		return response, fmt.Errorf("method %s not found", request.Method)
	}
}
