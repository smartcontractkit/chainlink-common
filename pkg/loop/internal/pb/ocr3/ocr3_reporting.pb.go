// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: ocr3_reporting.proto

package ocr3pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NewReportingPluginRequest struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	ReportingPluginConfig *ReportingPluginConfig `protobuf:"bytes,1,opt,name=reportingPluginConfig,proto3" json:"reportingPluginConfig,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *NewReportingPluginRequest) Reset() {
	*x = NewReportingPluginRequest{}
	mi := &file_ocr3_reporting_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewReportingPluginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewReportingPluginRequest) ProtoMessage() {}

func (x *NewReportingPluginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocr3_reporting_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewReportingPluginRequest.ProtoReflect.Descriptor instead.
func (*NewReportingPluginRequest) Descriptor() ([]byte, []int) {
	return file_ocr3_reporting_proto_rawDescGZIP(), []int{0}
}

func (x *NewReportingPluginRequest) GetReportingPluginConfig() *ReportingPluginConfig {
	if x != nil {
		return x.ReportingPluginConfig
	}
	return nil
}

type NewReportingPluginReply struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ReportingPluginID   uint32                 `protobuf:"varint,1,opt,name=reportingPluginID,proto3" json:"reportingPluginID,omitempty"`
	ReportingPluginInfo *ReportingPluginInfo   `protobuf:"bytes,2,opt,name=reportingPluginInfo,proto3" json:"reportingPluginInfo,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *NewReportingPluginReply) Reset() {
	*x = NewReportingPluginReply{}
	mi := &file_ocr3_reporting_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewReportingPluginReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewReportingPluginReply) ProtoMessage() {}

func (x *NewReportingPluginReply) ProtoReflect() protoreflect.Message {
	mi := &file_ocr3_reporting_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewReportingPluginReply.ProtoReflect.Descriptor instead.
func (*NewReportingPluginReply) Descriptor() ([]byte, []int) {
	return file_ocr3_reporting_proto_rawDescGZIP(), []int{1}
}

func (x *NewReportingPluginReply) GetReportingPluginID() uint32 {
	if x != nil {
		return x.ReportingPluginID
	}
	return 0
}

func (x *NewReportingPluginReply) GetReportingPluginInfo() *ReportingPluginInfo {
	if x != nil {
		return x.ReportingPluginInfo
	}
	return nil
}

type ReportingPluginConfig struct {
	state                                   protoimpl.MessageState `protogen:"open.v1"`
	ConfigDigest                            []byte                 `protobuf:"bytes,1,opt,name=configDigest,proto3" json:"configDigest,omitempty"`
	OracleID                                uint32                 `protobuf:"varint,2,opt,name=oracleID,proto3" json:"oracleID,omitempty"`
	N                                       uint32                 `protobuf:"varint,3,opt,name=n,proto3" json:"n,omitempty"`
	F                                       uint32                 `protobuf:"varint,4,opt,name=f,proto3" json:"f,omitempty"`
	OnchainConfig                           []byte                 `protobuf:"bytes,5,opt,name=onchainConfig,proto3" json:"onchainConfig,omitempty"`
	OffchainConfig                          []byte                 `protobuf:"bytes,6,opt,name=offchainConfig,proto3" json:"offchainConfig,omitempty"`
	EstimatedRoundInterval                  int64                  `protobuf:"varint,7,opt,name=estimatedRoundInterval,proto3" json:"estimatedRoundInterval,omitempty"`
	MaxDurationQuery                        int64                  `protobuf:"varint,8,opt,name=maxDurationQuery,proto3" json:"maxDurationQuery,omitempty"`
	MaxDurationObservation                  int64                  `protobuf:"varint,9,opt,name=maxDurationObservation,proto3" json:"maxDurationObservation,omitempty"`
	MaxDurationShouldAcceptAttestedReport   int64                  `protobuf:"varint,10,opt,name=MaxDurationShouldAcceptAttestedReport,proto3" json:"MaxDurationShouldAcceptAttestedReport,omitempty"`
	MaxDurationShouldTransmitAcceptedReport int64                  `protobuf:"varint,11,opt,name=MaxDurationShouldTransmitAcceptedReport,proto3" json:"MaxDurationShouldTransmitAcceptedReport,omitempty"`
	unknownFields                           protoimpl.UnknownFields
	sizeCache                               protoimpl.SizeCache
}

func (x *ReportingPluginConfig) Reset() {
	*x = ReportingPluginConfig{}
	mi := &file_ocr3_reporting_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportingPluginConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportingPluginConfig) ProtoMessage() {}

func (x *ReportingPluginConfig) ProtoReflect() protoreflect.Message {
	mi := &file_ocr3_reporting_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportingPluginConfig.ProtoReflect.Descriptor instead.
func (*ReportingPluginConfig) Descriptor() ([]byte, []int) {
	return file_ocr3_reporting_proto_rawDescGZIP(), []int{2}
}

func (x *ReportingPluginConfig) GetConfigDigest() []byte {
	if x != nil {
		return x.ConfigDigest
	}
	return nil
}

func (x *ReportingPluginConfig) GetOracleID() uint32 {
	if x != nil {
		return x.OracleID
	}
	return 0
}

func (x *ReportingPluginConfig) GetN() uint32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *ReportingPluginConfig) GetF() uint32 {
	if x != nil {
		return x.F
	}
	return 0
}

func (x *ReportingPluginConfig) GetOnchainConfig() []byte {
	if x != nil {
		return x.OnchainConfig
	}
	return nil
}

func (x *ReportingPluginConfig) GetOffchainConfig() []byte {
	if x != nil {
		return x.OffchainConfig
	}
	return nil
}

func (x *ReportingPluginConfig) GetEstimatedRoundInterval() int64 {
	if x != nil {
		return x.EstimatedRoundInterval
	}
	return 0
}

func (x *ReportingPluginConfig) GetMaxDurationQuery() int64 {
	if x != nil {
		return x.MaxDurationQuery
	}
	return 0
}

func (x *ReportingPluginConfig) GetMaxDurationObservation() int64 {
	if x != nil {
		return x.MaxDurationObservation
	}
	return 0
}

func (x *ReportingPluginConfig) GetMaxDurationShouldAcceptAttestedReport() int64 {
	if x != nil {
		return x.MaxDurationShouldAcceptAttestedReport
	}
	return 0
}

func (x *ReportingPluginConfig) GetMaxDurationShouldTransmitAcceptedReport() int64 {
	if x != nil {
		return x.MaxDurationShouldTransmitAcceptedReport
	}
	return 0
}

type ReportingPluginLimits struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MaxQueryLength       uint64                 `protobuf:"varint,1,opt,name=maxQueryLength,proto3" json:"maxQueryLength,omitempty"`
	MaxObservationLength uint64                 `protobuf:"varint,2,opt,name=maxObservationLength,proto3" json:"maxObservationLength,omitempty"`
	MaxOutcomeLength     uint64                 `protobuf:"varint,3,opt,name=MaxOutcomeLength,proto3" json:"MaxOutcomeLength,omitempty"`
	MaxReportLength      uint64                 `protobuf:"varint,4,opt,name=MaxReportLength,proto3" json:"MaxReportLength,omitempty"`
	MaxReportCount       uint64                 `protobuf:"varint,5,opt,name=MaxReportCount,proto3" json:"MaxReportCount,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ReportingPluginLimits) Reset() {
	*x = ReportingPluginLimits{}
	mi := &file_ocr3_reporting_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportingPluginLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportingPluginLimits) ProtoMessage() {}

func (x *ReportingPluginLimits) ProtoReflect() protoreflect.Message {
	mi := &file_ocr3_reporting_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportingPluginLimits.ProtoReflect.Descriptor instead.
func (*ReportingPluginLimits) Descriptor() ([]byte, []int) {
	return file_ocr3_reporting_proto_rawDescGZIP(), []int{3}
}

func (x *ReportingPluginLimits) GetMaxQueryLength() uint64 {
	if x != nil {
		return x.MaxQueryLength
	}
	return 0
}

func (x *ReportingPluginLimits) GetMaxObservationLength() uint64 {
	if x != nil {
		return x.MaxObservationLength
	}
	return 0
}

func (x *ReportingPluginLimits) GetMaxOutcomeLength() uint64 {
	if x != nil {
		return x.MaxOutcomeLength
	}
	return 0
}

func (x *ReportingPluginLimits) GetMaxReportLength() uint64 {
	if x != nil {
		return x.MaxReportLength
	}
	return 0
}

func (x *ReportingPluginLimits) GetMaxReportCount() uint64 {
	if x != nil {
		return x.MaxReportCount
	}
	return 0
}

type ReportingPluginInfo struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Name                  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ReportingPluginLimits *ReportingPluginLimits `protobuf:"bytes,2,opt,name=reportingPluginLimits,proto3" json:"reportingPluginLimits,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ReportingPluginInfo) Reset() {
	*x = ReportingPluginInfo{}
	mi := &file_ocr3_reporting_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportingPluginInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportingPluginInfo) ProtoMessage() {}

func (x *ReportingPluginInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ocr3_reporting_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportingPluginInfo.ProtoReflect.Descriptor instead.
func (*ReportingPluginInfo) Descriptor() ([]byte, []int) {
	return file_ocr3_reporting_proto_rawDescGZIP(), []int{4}
}

func (x *ReportingPluginInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReportingPluginInfo) GetReportingPluginLimits() *ReportingPluginLimits {
	if x != nil {
		return x.ReportingPluginLimits
	}
	return nil
}

type QueryRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OutcomeContext *OutcomeContext        `protobuf:"bytes,1,opt,name=outcomeContext,proto3" json:"outcomeContext,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	mi := &file_ocr3_reporting_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocr3_reporting_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_ocr3_reporting_proto_rawDescGZIP(), []int{5}
}

func (x *QueryRequest) GetOutcomeContext() *OutcomeContext {
	if x != nil {
		return x.OutcomeContext
	}
	return nil
}

type OutcomeContext struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	SeqNr           uint64                 `protobuf:"varint,1,opt,name=seqNr,proto3" json:"seqNr,omitempty"`
	PreviousOutcome []byte                 `protobuf:"bytes,2,opt,name=previousOutcome,proto3" json:"previousOutcome,omitempty"`
	Epoch           uint64                 `protobuf:"varint,3,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Round           uint64                 `protobuf:"varint,4,opt,name=round,proto3" json:"round,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *OutcomeContext) Reset() {
	*x = OutcomeContext{}
	mi := &file_ocr3_reporting_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutcomeContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutcomeContext) ProtoMessage() {}

func (x *OutcomeContext) ProtoReflect() protoreflect.Message {
	mi := &file_ocr3_reporting_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutcomeContext.ProtoReflect.Descriptor instead.
func (*OutcomeContext) Descriptor() ([]byte, []int) {
	return file_ocr3_reporting_proto_rawDescGZIP(), []int{6}
}

func (x *OutcomeContext) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *OutcomeContext) GetPreviousOutcome() []byte {
	if x != nil {
		return x.PreviousOutcome
	}
	return nil
}

func (x *OutcomeContext) GetEpoch() uint64 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *OutcomeContext) GetRound() uint64 {
	if x != nil {
		return x.Round
	}
	return 0
}

type QueryReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         []byte                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryReply) Reset() {
	*x = QueryReply{}
	mi := &file_ocr3_reporting_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryReply) ProtoMessage() {}

func (x *QueryReply) ProtoReflect() protoreflect.Message {
	mi := &file_ocr3_reporting_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryReply.ProtoReflect.Descriptor instead.
func (*QueryReply) Descriptor() ([]byte, []int) {
	return file_ocr3_reporting_proto_rawDescGZIP(), []int{7}
}

func (x *QueryReply) GetQuery() []byte {
	if x != nil {
		return x.Query
	}
	return nil
}

type ObservationRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OutcomeContext *OutcomeContext        `protobuf:"bytes,1,opt,name=outcomeContext,proto3" json:"outcomeContext,omitempty"`
	Query          []byte                 `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ObservationRequest) Reset() {
	*x = ObservationRequest{}
	mi := &file_ocr3_reporting_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObservationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationRequest) ProtoMessage() {}

func (x *ObservationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocr3_reporting_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationRequest.ProtoReflect.Descriptor instead.
func (*ObservationRequest) Descriptor() ([]byte, []int) {
	return file_ocr3_reporting_proto_rawDescGZIP(), []int{8}
}

func (x *ObservationRequest) GetOutcomeContext() *OutcomeContext {
	if x != nil {
		return x.OutcomeContext
	}
	return nil
}

func (x *ObservationRequest) GetQuery() []byte {
	if x != nil {
		return x.Query
	}
	return nil
}

type ObservationReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Observation   []byte                 `protobuf:"bytes,1,opt,name=observation,proto3" json:"observation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ObservationReply) Reset() {
	*x = ObservationReply{}
	mi := &file_ocr3_reporting_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObservationReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationReply) ProtoMessage() {}

func (x *ObservationReply) ProtoReflect() protoreflect.Message {
	mi := &file_ocr3_reporting_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationReply.ProtoReflect.Descriptor instead.
func (*ObservationReply) Descriptor() ([]byte, []int) {
	return file_ocr3_reporting_proto_rawDescGZIP(), []int{9}
}

func (x *ObservationReply) GetObservation() []byte {
	if x != nil {
		return x.Observation
	}
	return nil
}

type ValidateObservationRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OutcomeContext *OutcomeContext        `protobuf:"bytes,1,opt,name=outcomeContext,proto3" json:"outcomeContext,omitempty"`
	Query          []byte                 `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	Ao             *AttributedObservation `protobuf:"bytes,3,opt,name=ao,proto3" json:"ao,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ValidateObservationRequest) Reset() {
	*x = ValidateObservationRequest{}
	mi := &file_ocr3_reporting_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateObservationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateObservationRequest) ProtoMessage() {}

func (x *ValidateObservationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocr3_reporting_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateObservationRequest.ProtoReflect.Descriptor instead.
func (*ValidateObservationRequest) Descriptor() ([]byte, []int) {
	return file_ocr3_reporting_proto_rawDescGZIP(), []int{10}
}

func (x *ValidateObservationRequest) GetOutcomeContext() *OutcomeContext {
	if x != nil {
		return x.OutcomeContext
	}
	return nil
}

func (x *ValidateObservationRequest) GetQuery() []byte {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ValidateObservationRequest) GetAo() *AttributedObservation {
	if x != nil {
		return x.Ao
	}
	return nil
}

type AttributedObservation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Observation   []byte                 `protobuf:"bytes,1,opt,name=observation,proto3" json:"observation,omitempty"`
	Observer      uint32                 `protobuf:"varint,2,opt,name=observer,proto3" json:"observer,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttributedObservation) Reset() {
	*x = AttributedObservation{}
	mi := &file_ocr3_reporting_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttributedObservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributedObservation) ProtoMessage() {}

func (x *AttributedObservation) ProtoReflect() protoreflect.Message {
	mi := &file_ocr3_reporting_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributedObservation.ProtoReflect.Descriptor instead.
func (*AttributedObservation) Descriptor() ([]byte, []int) {
	return file_ocr3_reporting_proto_rawDescGZIP(), []int{11}
}

func (x *AttributedObservation) GetObservation() []byte {
	if x != nil {
		return x.Observation
	}
	return nil
}

func (x *AttributedObservation) GetObserver() uint32 {
	if x != nil {
		return x.Observer
	}
	return 0
}

type ObservationQuorumRequest struct {
	state          protoimpl.MessageState   `protogen:"open.v1"`
	OutcomeContext *OutcomeContext          `protobuf:"bytes,1,opt,name=outcomeContext,proto3" json:"outcomeContext,omitempty"`
	Query          []byte                   `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	Ao             []*AttributedObservation `protobuf:"bytes,3,rep,name=ao,proto3" json:"ao,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ObservationQuorumRequest) Reset() {
	*x = ObservationQuorumRequest{}
	mi := &file_ocr3_reporting_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObservationQuorumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationQuorumRequest) ProtoMessage() {}

func (x *ObservationQuorumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocr3_reporting_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationQuorumRequest.ProtoReflect.Descriptor instead.
func (*ObservationQuorumRequest) Descriptor() ([]byte, []int) {
	return file_ocr3_reporting_proto_rawDescGZIP(), []int{12}
}

func (x *ObservationQuorumRequest) GetOutcomeContext() *OutcomeContext {
	if x != nil {
		return x.OutcomeContext
	}
	return nil
}

func (x *ObservationQuorumRequest) GetQuery() []byte {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ObservationQuorumRequest) GetAo() []*AttributedObservation {
	if x != nil {
		return x.Ao
	}
	return nil
}

type ObservationQuorumReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	QuorumReached bool                   `protobuf:"varint,1,opt,name=quorumReached,proto3" json:"quorumReached,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ObservationQuorumReply) Reset() {
	*x = ObservationQuorumReply{}
	mi := &file_ocr3_reporting_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObservationQuorumReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationQuorumReply) ProtoMessage() {}

func (x *ObservationQuorumReply) ProtoReflect() protoreflect.Message {
	mi := &file_ocr3_reporting_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationQuorumReply.ProtoReflect.Descriptor instead.
func (*ObservationQuorumReply) Descriptor() ([]byte, []int) {
	return file_ocr3_reporting_proto_rawDescGZIP(), []int{13}
}

func (x *ObservationQuorumReply) GetQuorumReached() bool {
	if x != nil {
		return x.QuorumReached
	}
	return false
}

type OutcomeRequest struct {
	state          protoimpl.MessageState   `protogen:"open.v1"`
	OutcomeContext *OutcomeContext          `protobuf:"bytes,1,opt,name=outcomeContext,proto3" json:"outcomeContext,omitempty"`
	Query          []byte                   `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	Ao             []*AttributedObservation `protobuf:"bytes,3,rep,name=ao,proto3" json:"ao,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *OutcomeRequest) Reset() {
	*x = OutcomeRequest{}
	mi := &file_ocr3_reporting_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutcomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutcomeRequest) ProtoMessage() {}

func (x *OutcomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocr3_reporting_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutcomeRequest.ProtoReflect.Descriptor instead.
func (*OutcomeRequest) Descriptor() ([]byte, []int) {
	return file_ocr3_reporting_proto_rawDescGZIP(), []int{14}
}

func (x *OutcomeRequest) GetOutcomeContext() *OutcomeContext {
	if x != nil {
		return x.OutcomeContext
	}
	return nil
}

func (x *OutcomeRequest) GetQuery() []byte {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *OutcomeRequest) GetAo() []*AttributedObservation {
	if x != nil {
		return x.Ao
	}
	return nil
}

type OutcomeReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Outcome       []byte                 `protobuf:"bytes,1,opt,name=outcome,proto3" json:"outcome,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OutcomeReply) Reset() {
	*x = OutcomeReply{}
	mi := &file_ocr3_reporting_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutcomeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutcomeReply) ProtoMessage() {}

func (x *OutcomeReply) ProtoReflect() protoreflect.Message {
	mi := &file_ocr3_reporting_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutcomeReply.ProtoReflect.Descriptor instead.
func (*OutcomeReply) Descriptor() ([]byte, []int) {
	return file_ocr3_reporting_proto_rawDescGZIP(), []int{15}
}

func (x *OutcomeReply) GetOutcome() []byte {
	if x != nil {
		return x.Outcome
	}
	return nil
}

type ReportsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SeqNr         uint64                 `protobuf:"varint,1,opt,name=seqNr,proto3" json:"seqNr,omitempty"`
	Outcome       []byte                 `protobuf:"bytes,2,opt,name=outcome,proto3" json:"outcome,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportsRequest) Reset() {
	*x = ReportsRequest{}
	mi := &file_ocr3_reporting_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportsRequest) ProtoMessage() {}

func (x *ReportsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocr3_reporting_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportsRequest.ProtoReflect.Descriptor instead.
func (*ReportsRequest) Descriptor() ([]byte, []int) {
	return file_ocr3_reporting_proto_rawDescGZIP(), []int{16}
}

func (x *ReportsRequest) GetSeqNr() uint64 {
	if x != nil {
		return x.SeqNr
	}
	return 0
}

func (x *ReportsRequest) GetOutcome() []byte {
	if x != nil {
		return x.Outcome
	}
	return nil
}

type ReportsReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReportPlus    []*ReportPlus          `protobuf:"bytes,1,rep,name=reportPlus,proto3" json:"reportPlus,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportsReply) Reset() {
	*x = ReportsReply{}
	mi := &file_ocr3_reporting_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportsReply) ProtoMessage() {}

func (x *ReportsReply) ProtoReflect() protoreflect.Message {
	mi := &file_ocr3_reporting_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportsReply.ProtoReflect.Descriptor instead.
func (*ReportsReply) Descriptor() ([]byte, []int) {
	return file_ocr3_reporting_proto_rawDescGZIP(), []int{17}
}

func (x *ReportsReply) GetReportPlus() []*ReportPlus {
	if x != nil {
		return x.ReportPlus
	}
	return nil
}

type ReportPlus struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	ReportWithInfo               *ReportWithInfo        `protobuf:"bytes,1,opt,name=reportWithInfo,proto3" json:"reportWithInfo,omitempty"`
	TransmissionScheduleOverride *TransmissionSchedule  `protobuf:"bytes,2,opt,name=transmissionScheduleOverride,proto3" json:"transmissionScheduleOverride,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *ReportPlus) Reset() {
	*x = ReportPlus{}
	mi := &file_ocr3_reporting_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportPlus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportPlus) ProtoMessage() {}

func (x *ReportPlus) ProtoReflect() protoreflect.Message {
	mi := &file_ocr3_reporting_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportPlus.ProtoReflect.Descriptor instead.
func (*ReportPlus) Descriptor() ([]byte, []int) {
	return file_ocr3_reporting_proto_rawDescGZIP(), []int{18}
}

func (x *ReportPlus) GetReportWithInfo() *ReportWithInfo {
	if x != nil {
		return x.ReportWithInfo
	}
	return nil
}

func (x *ReportPlus) GetTransmissionScheduleOverride() *TransmissionSchedule {
	if x != nil {
		return x.TransmissionScheduleOverride
	}
	return nil
}

type ReportWithInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Report        []byte                 `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
	Info          []byte                 `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportWithInfo) Reset() {
	*x = ReportWithInfo{}
	mi := &file_ocr3_reporting_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportWithInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportWithInfo) ProtoMessage() {}

func (x *ReportWithInfo) ProtoReflect() protoreflect.Message {
	mi := &file_ocr3_reporting_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportWithInfo.ProtoReflect.Descriptor instead.
func (*ReportWithInfo) Descriptor() ([]byte, []int) {
	return file_ocr3_reporting_proto_rawDescGZIP(), []int{19}
}

func (x *ReportWithInfo) GetReport() []byte {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *ReportWithInfo) GetInfo() []byte {
	if x != nil {
		return x.Info
	}
	return nil
}

type TransmissionSchedule struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Transmitters       []uint32               `protobuf:"varint,1,rep,packed,name=transmitters,proto3" json:"transmitters,omitempty"` // OracleID
	TransmissionDelays []int64                `protobuf:"varint,2,rep,packed,name=transmissionDelays,proto3" json:"transmissionDelays,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *TransmissionSchedule) Reset() {
	*x = TransmissionSchedule{}
	mi := &file_ocr3_reporting_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TransmissionSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransmissionSchedule) ProtoMessage() {}

func (x *TransmissionSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_ocr3_reporting_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransmissionSchedule.ProtoReflect.Descriptor instead.
func (*TransmissionSchedule) Descriptor() ([]byte, []int) {
	return file_ocr3_reporting_proto_rawDescGZIP(), []int{20}
}

func (x *TransmissionSchedule) GetTransmitters() []uint32 {
	if x != nil {
		return x.Transmitters
	}
	return nil
}

func (x *TransmissionSchedule) GetTransmissionDelays() []int64 {
	if x != nil {
		return x.TransmissionDelays
	}
	return nil
}

type ShouldAcceptAttestedReportRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SegNr         uint64                 `protobuf:"varint,1,opt,name=segNr,proto3" json:"segNr,omitempty"`
	Ri            *ReportWithInfo        `protobuf:"bytes,2,opt,name=ri,proto3" json:"ri,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShouldAcceptAttestedReportRequest) Reset() {
	*x = ShouldAcceptAttestedReportRequest{}
	mi := &file_ocr3_reporting_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShouldAcceptAttestedReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShouldAcceptAttestedReportRequest) ProtoMessage() {}

func (x *ShouldAcceptAttestedReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocr3_reporting_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShouldAcceptAttestedReportRequest.ProtoReflect.Descriptor instead.
func (*ShouldAcceptAttestedReportRequest) Descriptor() ([]byte, []int) {
	return file_ocr3_reporting_proto_rawDescGZIP(), []int{21}
}

func (x *ShouldAcceptAttestedReportRequest) GetSegNr() uint64 {
	if x != nil {
		return x.SegNr
	}
	return 0
}

func (x *ShouldAcceptAttestedReportRequest) GetRi() *ReportWithInfo {
	if x != nil {
		return x.Ri
	}
	return nil
}

type ShouldAcceptAttestedReportReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ShouldAccept  bool                   `protobuf:"varint,1,opt,name=shouldAccept,proto3" json:"shouldAccept,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShouldAcceptAttestedReportReply) Reset() {
	*x = ShouldAcceptAttestedReportReply{}
	mi := &file_ocr3_reporting_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShouldAcceptAttestedReportReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShouldAcceptAttestedReportReply) ProtoMessage() {}

func (x *ShouldAcceptAttestedReportReply) ProtoReflect() protoreflect.Message {
	mi := &file_ocr3_reporting_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShouldAcceptAttestedReportReply.ProtoReflect.Descriptor instead.
func (*ShouldAcceptAttestedReportReply) Descriptor() ([]byte, []int) {
	return file_ocr3_reporting_proto_rawDescGZIP(), []int{22}
}

func (x *ShouldAcceptAttestedReportReply) GetShouldAccept() bool {
	if x != nil {
		return x.ShouldAccept
	}
	return false
}

type ShouldTransmitAcceptedReportRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SegNr         uint64                 `protobuf:"varint,1,opt,name=segNr,proto3" json:"segNr,omitempty"`
	Ri            *ReportWithInfo        `protobuf:"bytes,2,opt,name=ri,proto3" json:"ri,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShouldTransmitAcceptedReportRequest) Reset() {
	*x = ShouldTransmitAcceptedReportRequest{}
	mi := &file_ocr3_reporting_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShouldTransmitAcceptedReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShouldTransmitAcceptedReportRequest) ProtoMessage() {}

func (x *ShouldTransmitAcceptedReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ocr3_reporting_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShouldTransmitAcceptedReportRequest.ProtoReflect.Descriptor instead.
func (*ShouldTransmitAcceptedReportRequest) Descriptor() ([]byte, []int) {
	return file_ocr3_reporting_proto_rawDescGZIP(), []int{23}
}

func (x *ShouldTransmitAcceptedReportRequest) GetSegNr() uint64 {
	if x != nil {
		return x.SegNr
	}
	return 0
}

func (x *ShouldTransmitAcceptedReportRequest) GetRi() *ReportWithInfo {
	if x != nil {
		return x.Ri
	}
	return nil
}

type ShouldTransmitAcceptedReportReply struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ShouldTransmit bool                   `protobuf:"varint,1,opt,name=shouldTransmit,proto3" json:"shouldTransmit,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ShouldTransmitAcceptedReportReply) Reset() {
	*x = ShouldTransmitAcceptedReportReply{}
	mi := &file_ocr3_reporting_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShouldTransmitAcceptedReportReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShouldTransmitAcceptedReportReply) ProtoMessage() {}

func (x *ShouldTransmitAcceptedReportReply) ProtoReflect() protoreflect.Message {
	mi := &file_ocr3_reporting_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShouldTransmitAcceptedReportReply.ProtoReflect.Descriptor instead.
func (*ShouldTransmitAcceptedReportReply) Descriptor() ([]byte, []int) {
	return file_ocr3_reporting_proto_rawDescGZIP(), []int{24}
}

func (x *ShouldTransmitAcceptedReportReply) GetShouldTransmit() bool {
	if x != nil {
		return x.ShouldTransmit
	}
	return false
}

var File_ocr3_reporting_proto protoreflect.FileDescriptor

var file_ocr3_reporting_proto_rawDesc = string([]byte{
	0x0a, 0x14, 0x6f, 0x63, 0x72, 0x33, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6f, 0x63, 0x72, 0x33, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7f, 0x0a, 0x19, 0x4e, 0x65,
	0x77, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x62, 0x0a, 0x15, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6f, 0x63, 0x72, 0x33, 0x2e, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x15, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xa5, 0x01, 0x0a, 0x17,
	0x4e, 0x65, 0x77, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x5c, 0x0a, 0x13, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6f, 0x63, 0x72, 0x33, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x13,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x8d, 0x04, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x67, 0x65, 0x73,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x72, 0x61, 0x63, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x0c, 0x0a,
	0x01, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x6e, 0x12, 0x0c, 0x0a, 0x01, 0x66,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x66, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x6e, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0d, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x26, 0x0a, 0x0e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x6f, 0x66, 0x66, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x16, 0x65, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x2a, 0x0a, 0x10, 0x6d, 0x61, 0x78, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x61, 0x78, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x6d,
	0x61, 0x78, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x16, 0x6d, 0x61, 0x78,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x25, 0x4d, 0x61, 0x78, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x25, 0x4d, 0x61, 0x78, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x68, 0x6f, 0x75, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x58, 0x0a, 0x27, 0x4d, 0x61, 0x78,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x27, 0x4d, 0x61, 0x78, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x22, 0xf1, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e,
	0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x26, 0x0a,
	0x0e, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6d, 0x61, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x14, 0x6d, 0x61, 0x78, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x4d, 0x61, 0x78,
	0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x10, 0x4d, 0x61, 0x78, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f,
	0x4d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12,
	0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x62, 0x0a, 0x15, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6f, 0x63, 0x72, 0x33, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73,
	0x52, 0x15, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x22, 0x5d, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x63, 0x6f,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e,
	0x70, 0x62, 0x2e, 0x6f, 0x63, 0x72, 0x33, 0x2e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x7c, 0x0a, 0x0e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x71, 0x4e,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x72, 0x12, 0x28,
	0x0a, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f, 0x63,
	0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x22, 0x22, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x79, 0x0a, 0x12, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d,
	0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6f, 0x63, 0x72, 0x33, 0x2e, 0x4f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0e, 0x6f,
	0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x22, 0x34, 0x0a, 0x10, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbf, 0x01, 0x0a, 0x1a, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x70, 0x62, 0x2e, 0x6f, 0x63, 0x72, 0x33, 0x2e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3c, 0x0a,
	0x02, 0x61, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x6f, 0x6f, 0x70,
	0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6f, 0x63, 0x72,
	0x33, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x61, 0x6f, 0x22, 0x55, 0x0a, 0x15, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x22, 0xbd, 0x01, 0x0a, 0x18, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4d, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6f, 0x63, 0x72, 0x33, 0x2e,
	0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0e,
	0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x02, 0x61, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x70, 0x62, 0x2e, 0x6f, 0x63, 0x72, 0x33, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02,
	0x61, 0x6f, 0x22, 0x3e, 0x0a, 0x16, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x24, 0x0a, 0x0d,
	0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x71, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x52, 0x65, 0x61, 0x63, 0x68,
	0x65, 0x64, 0x22, 0xb3, 0x01, 0x0a, 0x0e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0e, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62,
	0x2e, 0x6f, 0x63, 0x72, 0x33, 0x2e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x3c, 0x0a, 0x02, 0x61, 0x6f,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6f, 0x63, 0x72, 0x33, 0x2e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x61, 0x6f, 0x22, 0x28, 0x0a, 0x0c, 0x4f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63, 0x6f,
	0x6d, 0x65, 0x22, 0x40, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x71, 0x4e, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75,
	0x74, 0x63, 0x6f, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x22, 0x51, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x41, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6c,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6f, 0x63, 0x72, 0x33,
	0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6c, 0x75, 0x73, 0x52, 0x0a, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x6c, 0x75, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x50, 0x6c, 0x75, 0x73, 0x12, 0x4d, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70,
	0x62, 0x2e, 0x6f, 0x63, 0x72, 0x33, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x6f, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6c, 0x6f,
	0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6f,
	0x63, 0x72, 0x33, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0x3c, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x22, 0x6a, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x2e, 0x0a, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x12, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x73,
	0x22, 0x70, 0x0a, 0x21, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x67, 0x4e, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x73, 0x65, 0x67, 0x4e, 0x72, 0x12, 0x35, 0x0a, 0x02, 0x72,
	0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6f, 0x63, 0x72, 0x33, 0x2e,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x02,
	0x72, 0x69, 0x22, 0x45, 0x0a, 0x1f, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x22, 0x72, 0x0a, 0x23, 0x53, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x65, 0x67, 0x4e, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x05, 0x73, 0x65, 0x67, 0x4e, 0x72, 0x12, 0x35, 0x0a, 0x02, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6f, 0x63, 0x72, 0x33, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x02, 0x72, 0x69, 0x22, 0x4b, 0x0a,
	0x21, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x68, 0x6f, 0x75,
	0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x32, 0x92, 0x01, 0x0a, 0x16, 0x52,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x78, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x30, 0x2e, 0x6c, 0x6f,
	0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6f,
	0x63, 0x72, 0x33, 0x2e, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62,
	0x2e, 0x6f, 0x63, 0x72, 0x33, 0x2e, 0x4e, 0x65, 0x77, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32,
	0xbd, 0x07, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x12, 0x51, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x23, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e,
	0x6f, 0x63, 0x72, 0x33, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6f, 0x63, 0x72, 0x33, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6f, 0x63, 0x72, 0x33, 0x2e, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x27, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2e, 0x70, 0x62, 0x2e, 0x6f, 0x63, 0x72, 0x33, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x13, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x31, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6f, 0x63, 0x72, 0x33, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x75, 0x0a, 0x11, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75,
	0x6f, 0x72, 0x75, 0x6d, 0x12, 0x2f, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6f, 0x63, 0x72, 0x33, 0x2e, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6f, 0x63, 0x72, 0x33, 0x2e, 0x4f, 0x62,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x6f, 0x72, 0x75, 0x6d, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x07, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x12, 0x25, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6f, 0x63, 0x72, 0x33, 0x2e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6f, 0x63, 0x72, 0x33,
	0x2e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12,
	0x57, 0x0a, 0x07, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x25, 0x2e, 0x6c, 0x6f, 0x6f,
	0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6f, 0x63,
	0x72, 0x33, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x23, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6f, 0x63, 0x72, 0x33, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x1a, 0x53, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x38, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6f, 0x63, 0x72, 0x33, 0x2e,
	0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x36, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6f, 0x63, 0x72, 0x33, 0x2e, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x96, 0x01, 0x0a, 0x1c,
	0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x3a, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e,
	0x6f, 0x63, 0x72, 0x33, 0x2e, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x6d, 0x69, 0x74, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x6f, 0x63, 0x72, 0x33,
	0x2e, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x74, 0x41,
	0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x05, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x42,
	0x4f, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6d,
	0x61, 0x72, 0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6b, 0x69, 0x74, 0x2f, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x70, 0x6b, 0x67, 0x2f, 0x6c, 0x6f, 0x6f, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x70, 0x62, 0x2f, 0x6f, 0x63, 0x72, 0x33, 0x3b, 0x6f, 0x63, 0x72, 0x33, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_ocr3_reporting_proto_rawDescOnce sync.Once
	file_ocr3_reporting_proto_rawDescData []byte
)

func file_ocr3_reporting_proto_rawDescGZIP() []byte {
	file_ocr3_reporting_proto_rawDescOnce.Do(func() {
		file_ocr3_reporting_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_ocr3_reporting_proto_rawDesc), len(file_ocr3_reporting_proto_rawDesc)))
	})
	return file_ocr3_reporting_proto_rawDescData
}

var file_ocr3_reporting_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_ocr3_reporting_proto_goTypes = []any{
	(*NewReportingPluginRequest)(nil),           // 0: loop.internal.pb.ocr3.NewReportingPluginRequest
	(*NewReportingPluginReply)(nil),             // 1: loop.internal.pb.ocr3.NewReportingPluginReply
	(*ReportingPluginConfig)(nil),               // 2: loop.internal.pb.ocr3.ReportingPluginConfig
	(*ReportingPluginLimits)(nil),               // 3: loop.internal.pb.ocr3.ReportingPluginLimits
	(*ReportingPluginInfo)(nil),                 // 4: loop.internal.pb.ocr3.ReportingPluginInfo
	(*QueryRequest)(nil),                        // 5: loop.internal.pb.ocr3.QueryRequest
	(*OutcomeContext)(nil),                      // 6: loop.internal.pb.ocr3.OutcomeContext
	(*QueryReply)(nil),                          // 7: loop.internal.pb.ocr3.QueryReply
	(*ObservationRequest)(nil),                  // 8: loop.internal.pb.ocr3.ObservationRequest
	(*ObservationReply)(nil),                    // 9: loop.internal.pb.ocr3.ObservationReply
	(*ValidateObservationRequest)(nil),          // 10: loop.internal.pb.ocr3.ValidateObservationRequest
	(*AttributedObservation)(nil),               // 11: loop.internal.pb.ocr3.AttributedObservation
	(*ObservationQuorumRequest)(nil),            // 12: loop.internal.pb.ocr3.ObservationQuorumRequest
	(*ObservationQuorumReply)(nil),              // 13: loop.internal.pb.ocr3.ObservationQuorumReply
	(*OutcomeRequest)(nil),                      // 14: loop.internal.pb.ocr3.OutcomeRequest
	(*OutcomeReply)(nil),                        // 15: loop.internal.pb.ocr3.OutcomeReply
	(*ReportsRequest)(nil),                      // 16: loop.internal.pb.ocr3.ReportsRequest
	(*ReportsReply)(nil),                        // 17: loop.internal.pb.ocr3.ReportsReply
	(*ReportPlus)(nil),                          // 18: loop.internal.pb.ocr3.ReportPlus
	(*ReportWithInfo)(nil),                      // 19: loop.internal.pb.ocr3.ReportWithInfo
	(*TransmissionSchedule)(nil),                // 20: loop.internal.pb.ocr3.TransmissionSchedule
	(*ShouldAcceptAttestedReportRequest)(nil),   // 21: loop.internal.pb.ocr3.ShouldAcceptAttestedReportRequest
	(*ShouldAcceptAttestedReportReply)(nil),     // 22: loop.internal.pb.ocr3.ShouldAcceptAttestedReportReply
	(*ShouldTransmitAcceptedReportRequest)(nil), // 23: loop.internal.pb.ocr3.ShouldTransmitAcceptedReportRequest
	(*ShouldTransmitAcceptedReportReply)(nil),   // 24: loop.internal.pb.ocr3.ShouldTransmitAcceptedReportReply
	(*emptypb.Empty)(nil),                       // 25: google.protobuf.Empty
}
var file_ocr3_reporting_proto_depIdxs = []int32{
	2,  // 0: loop.internal.pb.ocr3.NewReportingPluginRequest.reportingPluginConfig:type_name -> loop.internal.pb.ocr3.ReportingPluginConfig
	4,  // 1: loop.internal.pb.ocr3.NewReportingPluginReply.reportingPluginInfo:type_name -> loop.internal.pb.ocr3.ReportingPluginInfo
	3,  // 2: loop.internal.pb.ocr3.ReportingPluginInfo.reportingPluginLimits:type_name -> loop.internal.pb.ocr3.ReportingPluginLimits
	6,  // 3: loop.internal.pb.ocr3.QueryRequest.outcomeContext:type_name -> loop.internal.pb.ocr3.OutcomeContext
	6,  // 4: loop.internal.pb.ocr3.ObservationRequest.outcomeContext:type_name -> loop.internal.pb.ocr3.OutcomeContext
	6,  // 5: loop.internal.pb.ocr3.ValidateObservationRequest.outcomeContext:type_name -> loop.internal.pb.ocr3.OutcomeContext
	11, // 6: loop.internal.pb.ocr3.ValidateObservationRequest.ao:type_name -> loop.internal.pb.ocr3.AttributedObservation
	6,  // 7: loop.internal.pb.ocr3.ObservationQuorumRequest.outcomeContext:type_name -> loop.internal.pb.ocr3.OutcomeContext
	11, // 8: loop.internal.pb.ocr3.ObservationQuorumRequest.ao:type_name -> loop.internal.pb.ocr3.AttributedObservation
	6,  // 9: loop.internal.pb.ocr3.OutcomeRequest.outcomeContext:type_name -> loop.internal.pb.ocr3.OutcomeContext
	11, // 10: loop.internal.pb.ocr3.OutcomeRequest.ao:type_name -> loop.internal.pb.ocr3.AttributedObservation
	18, // 11: loop.internal.pb.ocr3.ReportsReply.reportPlus:type_name -> loop.internal.pb.ocr3.ReportPlus
	19, // 12: loop.internal.pb.ocr3.ReportPlus.reportWithInfo:type_name -> loop.internal.pb.ocr3.ReportWithInfo
	20, // 13: loop.internal.pb.ocr3.ReportPlus.transmissionScheduleOverride:type_name -> loop.internal.pb.ocr3.TransmissionSchedule
	19, // 14: loop.internal.pb.ocr3.ShouldAcceptAttestedReportRequest.ri:type_name -> loop.internal.pb.ocr3.ReportWithInfo
	19, // 15: loop.internal.pb.ocr3.ShouldTransmitAcceptedReportRequest.ri:type_name -> loop.internal.pb.ocr3.ReportWithInfo
	0,  // 16: loop.internal.pb.ocr3.ReportingPluginFactory.NewReportingPlugin:input_type -> loop.internal.pb.ocr3.NewReportingPluginRequest
	5,  // 17: loop.internal.pb.ocr3.ReportingPlugin.Query:input_type -> loop.internal.pb.ocr3.QueryRequest
	8,  // 18: loop.internal.pb.ocr3.ReportingPlugin.Observation:input_type -> loop.internal.pb.ocr3.ObservationRequest
	10, // 19: loop.internal.pb.ocr3.ReportingPlugin.ValidateObservation:input_type -> loop.internal.pb.ocr3.ValidateObservationRequest
	12, // 20: loop.internal.pb.ocr3.ReportingPlugin.ObservationQuorum:input_type -> loop.internal.pb.ocr3.ObservationQuorumRequest
	14, // 21: loop.internal.pb.ocr3.ReportingPlugin.Outcome:input_type -> loop.internal.pb.ocr3.OutcomeRequest
	16, // 22: loop.internal.pb.ocr3.ReportingPlugin.Reports:input_type -> loop.internal.pb.ocr3.ReportsRequest
	21, // 23: loop.internal.pb.ocr3.ReportingPlugin.ShouldAcceptAttestedReport:input_type -> loop.internal.pb.ocr3.ShouldAcceptAttestedReportRequest
	23, // 24: loop.internal.pb.ocr3.ReportingPlugin.ShouldTransmitAcceptedReport:input_type -> loop.internal.pb.ocr3.ShouldTransmitAcceptedReportRequest
	25, // 25: loop.internal.pb.ocr3.ReportingPlugin.Close:input_type -> google.protobuf.Empty
	1,  // 26: loop.internal.pb.ocr3.ReportingPluginFactory.NewReportingPlugin:output_type -> loop.internal.pb.ocr3.NewReportingPluginReply
	7,  // 27: loop.internal.pb.ocr3.ReportingPlugin.Query:output_type -> loop.internal.pb.ocr3.QueryReply
	9,  // 28: loop.internal.pb.ocr3.ReportingPlugin.Observation:output_type -> loop.internal.pb.ocr3.ObservationReply
	25, // 29: loop.internal.pb.ocr3.ReportingPlugin.ValidateObservation:output_type -> google.protobuf.Empty
	13, // 30: loop.internal.pb.ocr3.ReportingPlugin.ObservationQuorum:output_type -> loop.internal.pb.ocr3.ObservationQuorumReply
	15, // 31: loop.internal.pb.ocr3.ReportingPlugin.Outcome:output_type -> loop.internal.pb.ocr3.OutcomeReply
	17, // 32: loop.internal.pb.ocr3.ReportingPlugin.Reports:output_type -> loop.internal.pb.ocr3.ReportsReply
	22, // 33: loop.internal.pb.ocr3.ReportingPlugin.ShouldAcceptAttestedReport:output_type -> loop.internal.pb.ocr3.ShouldAcceptAttestedReportReply
	24, // 34: loop.internal.pb.ocr3.ReportingPlugin.ShouldTransmitAcceptedReport:output_type -> loop.internal.pb.ocr3.ShouldTransmitAcceptedReportReply
	25, // 35: loop.internal.pb.ocr3.ReportingPlugin.Close:output_type -> google.protobuf.Empty
	26, // [26:36] is the sub-list for method output_type
	16, // [16:26] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_ocr3_reporting_proto_init() }
func file_ocr3_reporting_proto_init() {
	if File_ocr3_reporting_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_ocr3_reporting_proto_rawDesc), len(file_ocr3_reporting_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_ocr3_reporting_proto_goTypes,
		DependencyIndexes: file_ocr3_reporting_proto_depIdxs,
		MessageInfos:      file_ocr3_reporting_proto_msgTypes,
	}.Build()
	File_ocr3_reporting_proto = out.File
	file_ocr3_reporting_proto_goTypes = nil
	file_ocr3_reporting_proto_depIdxs = nil
}
