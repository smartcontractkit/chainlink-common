// Code generated by github.com/smartcontractkit/chainlink-common/pkg/capabilities/v2/protoc, DO NOT EDIT.

package server

import (
	"context"
	"fmt"
	"strconv"
	"time"

	"github.com/smartcontractkit/chainlink-common/pkg/capabilities/v2/chain-capabilities/evm"
	"google.golang.org/protobuf/types/known/emptypb"

	"github.com/smartcontractkit/chainlink-common/pkg/capabilities"
	"github.com/smartcontractkit/chainlink-common/pkg/types/core"
)

// Avoid unused imports if there is configuration type
var _ = emptypb.Empty{}

type ClientCapability interface {
	CallContract(ctx context.Context, metadata capabilities.RequestMetadata, input *evm.CallContractRequest) (*capabilities.ResponseAndMetadata[*evm.CallContractReply], error)

	FilterLogs(ctx context.Context, metadata capabilities.RequestMetadata, input *evm.FilterLogsRequest) (*capabilities.ResponseAndMetadata[*evm.FilterLogsReply], error)

	BalanceAt(ctx context.Context, metadata capabilities.RequestMetadata, input *evm.BalanceAtRequest) (*capabilities.ResponseAndMetadata[*evm.BalanceAtReply], error)

	EstimateGas(ctx context.Context, metadata capabilities.RequestMetadata, input *evm.EstimateGasRequest) (*capabilities.ResponseAndMetadata[*evm.EstimateGasReply], error)

	GetTransactionByHash(ctx context.Context, metadata capabilities.RequestMetadata, input *evm.GetTransactionByHashRequest) (*capabilities.ResponseAndMetadata[*evm.GetTransactionByHashReply], error)

	GetTransactionReceipt(ctx context.Context, metadata capabilities.RequestMetadata, input *evm.GetTransactionReceiptRequest) (*capabilities.ResponseAndMetadata[*evm.GetTransactionReceiptReply], error)

	HeaderByNumber(ctx context.Context, metadata capabilities.RequestMetadata, input *evm.HeaderByNumberRequest) (*capabilities.ResponseAndMetadata[*evm.HeaderByNumberReply], error)

	RegisterLogTrigger(ctx context.Context, triggerID string, metadata capabilities.RequestMetadata, input *evm.FilterLogTriggerRequest) (<-chan capabilities.TriggerAndId[*evm.Log], error)
	UnregisterLogTrigger(ctx context.Context, triggerID string, metadata capabilities.RequestMetadata, input *evm.FilterLogTriggerRequest) error

	WriteReport(ctx context.Context, metadata capabilities.RequestMetadata, input *evm.WriteReportRequest) (*capabilities.ResponseAndMetadata[*evm.WriteReportReply], error)

	ChainSelector() uint64

	Start(ctx context.Context) error
	Close() error
	HealthReport() map[string]error
	Name() string
	Description() string
	Ready() error
	Initialise(ctx context.Context, services core.StandardCapabilitiesServices) error
}

func NewClientServer(capability ClientCapability) *ClientServer {
	stopCh := make(chan struct{})
	return &ClientServer{
		clientCapability: clientCapability{ClientCapability: capability, stopCh: stopCh},
		stopCh:           stopCh,
	}
}

type ClientServer struct {
	clientCapability
	capabilityRegistry core.CapabilitiesRegistry
	stopCh             chan struct{}
}

func (c *ClientServer) Initialise(ctx context.Context, services core.StandardCapabilitiesServices) error {
	if err := c.ClientCapability.Initialise(ctx, services); err != nil {
		return fmt.Errorf("error when initializing capability: %w", err)
	}

	c.capabilityRegistry = services.CapabilityRegistry

	if err := services.CapabilityRegistry.Add(ctx, &clientCapability{
		ClientCapability: c.ClientCapability,
	}); err != nil {
		return fmt.Errorf("error when adding kv store action to the registry: %w", err)
	}

	return nil
}

func (c *ClientServer) Close() error {
	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
	defer cancel()

	if c.capabilityRegistry != nil {
		if err := c.capabilityRegistry.Remove(ctx, "evm"+":ChainSelector:"+strconv.FormatUint(c.ChainSelector(), 10)+"@1.0.0"); err != nil {
			return err
		}
	}

	if c.stopCh != nil {
		close(c.stopCh)
	}

	return c.clientCapability.Close()
}

func (c *ClientServer) Infos(ctx context.Context) ([]capabilities.CapabilityInfo, error) {
	info, err := c.clientCapability.Info(ctx)
	if err != nil {
		return nil, err
	}
	return []capabilities.CapabilityInfo{info}, nil
}

type clientCapability struct {
	ClientCapability
	stopCh chan struct{}
}

func (c *clientCapability) Info(ctx context.Context) (capabilities.CapabilityInfo, error) {
	// Maybe we do need to split it out, even if the user doesn't see it
	return capabilities.NewCapabilityInfo("evm"+":ChainSelector:"+strconv.FormatUint(c.ChainSelector(), 10)+"@1.0.0", capabilities.CapabilityTypeCombined, c.ClientCapability.Description())
}

var _ capabilities.ExecutableAndTriggerCapability = (*clientCapability)(nil)

const ClientID = "evm@1.0.0"

func (c *clientCapability) RegisterTrigger(ctx context.Context, request capabilities.TriggerRegistrationRequest) (<-chan capabilities.TriggerResponse, error) {
	switch request.Method {
	case "LogTrigger":
		input := &evm.FilterLogTriggerRequest{}
		return capabilities.RegisterTrigger(ctx, c.stopCh, "evm"+":ChainSelector:"+strconv.FormatUint(c.ChainSelector(), 10)+"@1.0.0", request, input, c.ClientCapability.RegisterLogTrigger)
	default:
		return nil, fmt.Errorf("trigger %s not found", request.Method)
	}
}

func (c *clientCapability) UnregisterTrigger(ctx context.Context, request capabilities.TriggerRegistrationRequest) error {
	switch request.Method {
	case "LogTrigger":
		input := &evm.FilterLogTriggerRequest{}
		_, err := capabilities.FromValueOrAny(request.Config, request.Payload, input)
		if err != nil {
			return err
		}
		return c.ClientCapability.UnregisterLogTrigger(ctx, request.TriggerID, request.Metadata, input)
	default:
		return fmt.Errorf("method %s not found", request.Method)
	}
}

func (c *clientCapability) RegisterToWorkflow(ctx context.Context, request capabilities.RegisterToWorkflowRequest) error {
	return nil
}

func (c *clientCapability) UnregisterFromWorkflow(ctx context.Context, request capabilities.UnregisterFromWorkflowRequest) error {
	return nil
}

func (c *clientCapability) Execute(ctx context.Context, request capabilities.CapabilityRequest) (capabilities.CapabilityResponse, error) {
	response := capabilities.CapabilityResponse{}
	switch request.Method {
	case "CallContract":
		input := &evm.CallContractRequest{}
		config := &emptypb.Empty{}
		wrapped := func(ctx context.Context, metadata capabilities.RequestMetadata, input *evm.CallContractRequest, _ *emptypb.Empty) (*evm.CallContractReply, capabilities.ResponseMetadata, error) {
			output, err := c.ClientCapability.CallContract(ctx, metadata, input)
			if err != nil {
				return nil, capabilities.ResponseMetadata{}, err
			}
			if output == nil {
				return nil, capabilities.ResponseMetadata{}, fmt.Errorf("output and error is nil for method CallContract(..) (if output is nil error must be present)")
			}
			return output.Response, output.ResponseMetadata, err
		}
		return capabilities.Execute(ctx, request, input, config, wrapped)
	case "FilterLogs":
		input := &evm.FilterLogsRequest{}
		config := &emptypb.Empty{}
		wrapped := func(ctx context.Context, metadata capabilities.RequestMetadata, input *evm.FilterLogsRequest, _ *emptypb.Empty) (*evm.FilterLogsReply, capabilities.ResponseMetadata, error) {
			output, err := c.ClientCapability.FilterLogs(ctx, metadata, input)
			if err != nil {
				return nil, capabilities.ResponseMetadata{}, err
			}
			if output == nil {
				return nil, capabilities.ResponseMetadata{}, fmt.Errorf("output and error is nil for method FilterLogs(..) (if output is nil error must be present)")
			}
			return output.Response, output.ResponseMetadata, err
		}
		return capabilities.Execute(ctx, request, input, config, wrapped)
	case "BalanceAt":
		input := &evm.BalanceAtRequest{}
		config := &emptypb.Empty{}
		wrapped := func(ctx context.Context, metadata capabilities.RequestMetadata, input *evm.BalanceAtRequest, _ *emptypb.Empty) (*evm.BalanceAtReply, capabilities.ResponseMetadata, error) {
			output, err := c.ClientCapability.BalanceAt(ctx, metadata, input)
			if err != nil {
				return nil, capabilities.ResponseMetadata{}, err
			}
			if output == nil {
				return nil, capabilities.ResponseMetadata{}, fmt.Errorf("output and error is nil for method BalanceAt(..) (if output is nil error must be present)")
			}
			return output.Response, output.ResponseMetadata, err
		}
		return capabilities.Execute(ctx, request, input, config, wrapped)
	case "EstimateGas":
		input := &evm.EstimateGasRequest{}
		config := &emptypb.Empty{}
		wrapped := func(ctx context.Context, metadata capabilities.RequestMetadata, input *evm.EstimateGasRequest, _ *emptypb.Empty) (*evm.EstimateGasReply, capabilities.ResponseMetadata, error) {
			output, err := c.ClientCapability.EstimateGas(ctx, metadata, input)
			if err != nil {
				return nil, capabilities.ResponseMetadata{}, err
			}
			if output == nil {
				return nil, capabilities.ResponseMetadata{}, fmt.Errorf("output and error is nil for method EstimateGas(..) (if output is nil error must be present)")
			}
			return output.Response, output.ResponseMetadata, err
		}
		return capabilities.Execute(ctx, request, input, config, wrapped)
	case "GetTransactionByHash":
		input := &evm.GetTransactionByHashRequest{}
		config := &emptypb.Empty{}
		wrapped := func(ctx context.Context, metadata capabilities.RequestMetadata, input *evm.GetTransactionByHashRequest, _ *emptypb.Empty) (*evm.GetTransactionByHashReply, capabilities.ResponseMetadata, error) {
			output, err := c.ClientCapability.GetTransactionByHash(ctx, metadata, input)
			if err != nil {
				return nil, capabilities.ResponseMetadata{}, err
			}
			if output == nil {
				return nil, capabilities.ResponseMetadata{}, fmt.Errorf("output and error is nil for method GetTransactionByHash(..) (if output is nil error must be present)")
			}
			return output.Response, output.ResponseMetadata, err
		}
		return capabilities.Execute(ctx, request, input, config, wrapped)
	case "GetTransactionReceipt":
		input := &evm.GetTransactionReceiptRequest{}
		config := &emptypb.Empty{}
		wrapped := func(ctx context.Context, metadata capabilities.RequestMetadata, input *evm.GetTransactionReceiptRequest, _ *emptypb.Empty) (*evm.GetTransactionReceiptReply, capabilities.ResponseMetadata, error) {
			output, err := c.ClientCapability.GetTransactionReceipt(ctx, metadata, input)
			if err != nil {
				return nil, capabilities.ResponseMetadata{}, err
			}
			if output == nil {
				return nil, capabilities.ResponseMetadata{}, fmt.Errorf("output and error is nil for method GetTransactionReceipt(..) (if output is nil error must be present)")
			}
			return output.Response, output.ResponseMetadata, err
		}
		return capabilities.Execute(ctx, request, input, config, wrapped)
	case "HeaderByNumber":
		input := &evm.HeaderByNumberRequest{}
		config := &emptypb.Empty{}
		wrapped := func(ctx context.Context, metadata capabilities.RequestMetadata, input *evm.HeaderByNumberRequest, _ *emptypb.Empty) (*evm.HeaderByNumberReply, capabilities.ResponseMetadata, error) {
			output, err := c.ClientCapability.HeaderByNumber(ctx, metadata, input)
			if err != nil {
				return nil, capabilities.ResponseMetadata{}, err
			}
			if output == nil {
				return nil, capabilities.ResponseMetadata{}, fmt.Errorf("output and error is nil for method HeaderByNumber(..) (if output is nil error must be present)")
			}
			return output.Response, output.ResponseMetadata, err
		}
		return capabilities.Execute(ctx, request, input, config, wrapped)
	case "WriteReport":
		input := &evm.WriteReportRequest{}
		config := &emptypb.Empty{}
		wrapped := func(ctx context.Context, metadata capabilities.RequestMetadata, input *evm.WriteReportRequest, _ *emptypb.Empty) (*evm.WriteReportReply, capabilities.ResponseMetadata, error) {
			output, err := c.ClientCapability.WriteReport(ctx, metadata, input)
			if err != nil {
				return nil, capabilities.ResponseMetadata{}, err
			}
			if output == nil {
				return nil, capabilities.ResponseMetadata{}, fmt.Errorf("output and error is nil for method WriteReport(..) (if output is nil error must be present)")
			}
			return output.Response, output.ResponseMetadata, err
		}
		return capabilities.Execute(ctx, request, input, config, wrapped)
	default:
		return response, fmt.Errorf("method %s not found", request.Method)
	}
}
