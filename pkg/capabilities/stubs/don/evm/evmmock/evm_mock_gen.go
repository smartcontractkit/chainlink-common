// Code generated by github.com/smartcontractkit/chainlink-common/pkg/capabilities/v2/protoc, DO NOT EDIT.

package evmmock

import (
	"context"
	"fmt"
	"testing"

	"google.golang.org/protobuf/types/known/anypb"

	"google.golang.org/protobuf/types/known/emptypb"

	"github.com/smartcontractkit/chainlink-common/pkg/capabilities/stubs/don/crosschain"
	"github.com/smartcontractkit/chainlink-common/pkg/capabilities/stubs/don/evm"

	"github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk/v2/pb"
	"github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk/v2/testutils"
)

// avoid unused imports
var _ = testutils.Registry{}

func NewClientCapability(t testing.TB) (*ClientCapability, error) {
	c := &ClientCapability{}
	registry := testutils.GetRegistry(t)
	err := registry.RegisterCapability(c)
	return c, err
}

type ClientCapability struct {
	// TODO: https://smartcontract-it.atlassian.net/browse/CAPPL-799 add the default to the call
	GetTxResult func(ctx context.Context, input *evm.TxID) (*crosschain.TxResult, error)
	// TODO: https://smartcontract-it.atlassian.net/browse/CAPPL-799 add the default to the call
	ReadMethod func(ctx context.Context, input *evm.ReadMethodRequest) (*crosschain.ByteArray, error)
	// TODO: https://smartcontract-it.atlassian.net/browse/CAPPL-799 add the default to the call
	QueryLogs func(ctx context.Context, input *evm.QueryLogsRequest) (*evm.LogList, error)
	// TODO: https://smartcontract-it.atlassian.net/browse/CAPPL-799 add the default to the call
	SubmitTransaction func(ctx context.Context, input *evm.SubmitTransactionRequest) (*evm.TxID, error)

	OnFinalityViolation func(ctx context.Context, input *emptypb.Empty) (*crosschain.BlockRange, error)
}

func (cap *ClientCapability) Invoke(ctx context.Context, request *pb.CapabilityRequest) *pb.CapabilityResponse {
	capResp := &pb.CapabilityResponse{}
	switch request.Method {
	case "GetTxResult":
		input := &evm.TxID{}
		if err := request.Payload.UnmarshalTo(input); err != nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
			break
		}

		if cap.GetTxResult == nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: "no stub provided for GetTxResult"}
			break
		}
		resp, err := cap.GetTxResult(ctx, input)
		if err != nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
		} else {
			payload, err := anypb.New(resp)
			if err == nil {
				capResp.Response = &pb.CapabilityResponse_Payload{Payload: payload}
			} else {
				capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
			}
		}
	case "ReadMethod":
		input := &evm.ReadMethodRequest{}
		if err := request.Payload.UnmarshalTo(input); err != nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
			break
		}

		if cap.ReadMethod == nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: "no stub provided for ReadMethod"}
			break
		}
		resp, err := cap.ReadMethod(ctx, input)
		if err != nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
		} else {
			payload, err := anypb.New(resp)
			if err == nil {
				capResp.Response = &pb.CapabilityResponse_Payload{Payload: payload}
			} else {
				capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
			}
		}
	case "QueryLogs":
		input := &evm.QueryLogsRequest{}
		if err := request.Payload.UnmarshalTo(input); err != nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
			break
		}

		if cap.QueryLogs == nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: "no stub provided for QueryLogs"}
			break
		}
		resp, err := cap.QueryLogs(ctx, input)
		if err != nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
		} else {
			payload, err := anypb.New(resp)
			if err == nil {
				capResp.Response = &pb.CapabilityResponse_Payload{Payload: payload}
			} else {
				capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
			}
		}
	case "SubmitTransaction":
		input := &evm.SubmitTransactionRequest{}
		if err := request.Payload.UnmarshalTo(input); err != nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
			break
		}

		if cap.SubmitTransaction == nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: "no stub provided for SubmitTransaction"}
			break
		}
		resp, err := cap.SubmitTransaction(ctx, input)
		if err != nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
		} else {
			payload, err := anypb.New(resp)
			if err == nil {
				capResp.Response = &pb.CapabilityResponse_Payload{Payload: payload}
			} else {
				capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
			}
		}
	default:
		capResp.Response = &pb.CapabilityResponse_Error{Error: fmt.Sprintf("method %s not found", request.Method)}
	}
	return capResp
}

func (cap *ClientCapability) InvokeTrigger(ctx context.Context, request *pb.TriggerSubscription) (*pb.Trigger, error) {
	trigger := &pb.Trigger{}
	switch request.Method {
	case "OnFinalityViolation":
		input := &emptypb.Empty{}
		if err := request.Payload.UnmarshalTo(input); err != nil {
			return nil, err
		}

		if cap.OnFinalityViolation == nil {
			return nil, testutils.ErrNoTriggerStub("OnFinalityViolation")
		}

		resp, err := cap.OnFinalityViolation(ctx, input)
		if err != nil {
			return nil, err
		} else {
			if resp == nil {
				return nil, nil
			}

			payload, err := anypb.New(resp)
			if err != nil {
				return nil, err
			}
			trigger.Payload = payload
			trigger.Id = "mock"
		}
	default:
		return nil, fmt.Errorf("method %s not found", request.Method)
	}
	return trigger, nil
}

func (cap *ClientCapability) ID() string {
	return "evm@1.0.0"
}
