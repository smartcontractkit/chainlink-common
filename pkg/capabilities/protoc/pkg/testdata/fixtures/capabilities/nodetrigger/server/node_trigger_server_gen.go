// Code generated by github.com/smartcontractkit/chainlink-common/pkg/capabilities/protoc, DO NOT EDIT.

package server

import (
	"context"
	"fmt"
	"time"

	"github.com/smartcontractkit/chainlink-common/pkg/capabilities"
	"github.com/smartcontractkit/chainlink-common/pkg/loop"
	"github.com/smartcontractkit/chainlink-common/pkg/types/core"
)

type NodeEventCapability interface {
	RegisterTrigger(ctx context.Context, metadata capabilities.RequestMetadata, input *nodetrigger.Config) (<-chan capabilities.TriggerAndId[*nodetrigger.Outputs], error)
	UnregisterTrigger(ctx context.Context, metadata capabilities.RequestMetadata, input *nodetrigger.Config) error
	Start(ctx context.Context) error
	Close() error
	HealthReport() map[string]error
	Name() string
	Description() string
	Ready() error
	Initialise(ctx context.Context, config string, telemetryService core.TelemetryService, store core.KeyValueStore, errorLog core.ErrorLog, pipelineRunner core.PipelineRunnerService, relayerSet core.RelayerSet, oracleFactory core.OracleFactory) error
}

func NewNodeEventServer(capability NodeEventCapability) loop.StandardCapabilities {
	return &nodeEventServer{
		nodeEventCapability: nodeEventCapability{NodeEventCapability: capability},
	}
}

type nodeEventServer struct {
	nodeEventCapability
	capabilityRegistry core.CapabilitiesRegistry
}

func (cs *nodeEventServer) Initialise(ctx context.Context, config string, telemetryService core.TelemetryService, store core.KeyValueStore, capabilityRegistry core.CapabilitiesRegistry, errorLog core.ErrorLog, pipelineRunner core.PipelineRunnerService, relayerSet core.RelayerSet, oracleFactory core.OracleFactory) error {
	if err := cs.NodeEventCapability.Initialise(ctx, config, telemetryService, store, errorLog, pipelineRunner, relayerSet, oracleFactory); err != nil {
		return fmt.Errorf("error when initializing capability: %w", err)
	}

	cs.capabilityRegistry = capabilityRegistry

	if err := capabilityRegistry.Add(ctx, &nodeEventCapability{
		NodeEventCapability: cs.NodeEventCapability,
	}); err != nil {
		return fmt.Errorf("error when adding kv store action to the registry: %w", err)
	}

	return nil
}

func (cs *nodeEventServer) Close() error {
	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
	defer cancel()
	if err := cs.capabilityRegistry.Remove(ctx, "basic-test-trigger@1.0.0"); err != nil {
		return err
	}

	return cs.nodeEventCapability.Close()
}

func (cs *nodeEventServer) Infos(ctx context.Context) ([]capabilities.CapabilityInfo, error) {
	// TODO if we get rid of targets in favour of actions that return empty proto, do we need Consensus stil?
	info, err := cs.nodeEventCapability.Info(ctx)
	if err != nil {
		return nil, err
	}
	return []capabilities.CapabilityInfo{info}, nil
}

type nodeEventCapability struct {
	NodeEventCapability
}

func (c *nodeEventCapability) Info(ctx context.Context) (capabilities.CapabilityInfo, error) {
	// TODO this is problematic right not because we can do both...?
	// Maybe we do need to split it out, even if the user doesn't see it
	return capabilities.NewCapabilityInfo("basic-test-trigger@1.0.0", capabilities.CapabilityTypeAction, c.NodeEventCapability.Description())
}

var _ capabilities.TriggerCapability = (*nodeEventCapability)(nil)

func (c *nodeEventCapability) RegisterTrigger(ctx context.Context, request capabilities.TriggerRegistrationRequest) (<-chan capabilities.TriggerResponse, error) {
	switch request.Method {
	case "Trigger":
		input := &nodetrigger.Config{}
		return capabilities.RegisterTrigger(ctx, "basic-test-trigger@1.0.0", request, input, c.NodeEventCapability.RegisterTrigger)
	default:
		return nil, fmt.Errorf("method %s not found", request.Method)
	}

}

func (c *nodeEventCapability) UnregisterTrigger(ctx context.Context, request capabilities.TriggerRegistrationRequest) error {
	switch request.Method {
	case "Trigger":
		input := &nodetrigger.Config{}
		_, err := capabilities.FromValueOrAny(request.Config, request.Request, input)
		if err != nil {
			return err
		}
		return c.NodeEventCapability.UnregisterTrigger(ctx, request.Metadata, input)
	default:
		return fmt.Errorf("method %s not found", request.Method)
	}
}
