// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	ccipocr3 "github.com/smartcontractkit/chainlink-common/pkg/types/ccipocr3"
	mock "github.com/stretchr/testify/mock"
)

// AddressCodec is an autogenerated mock type for the AddressCodec type
type AddressCodec struct {
	mock.Mock
}

type AddressCodec_Expecter struct {
	mock *mock.Mock
}

func (_m *AddressCodec) EXPECT() *AddressCodec_Expecter {
	return &AddressCodec_Expecter{mock: &_m.Mock}
}

// AddressBytesToString provides a mock function with given fields: _a0, _a1
func (_m *AddressCodec) AddressBytesToString(_a0 ccipocr3.UnknownAddress, _a1 ccipocr3.ChainSelector) (string, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddressBytesToString")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(ccipocr3.UnknownAddress, ccipocr3.ChainSelector) (string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(ccipocr3.UnknownAddress, ccipocr3.ChainSelector) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(ccipocr3.UnknownAddress, ccipocr3.ChainSelector) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddressCodec_AddressBytesToString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddressBytesToString'
type AddressCodec_AddressBytesToString_Call struct {
	*mock.Call
}

// AddressBytesToString is a helper method to define mock.On call
//   - _a0 ccipocr3.UnknownAddress
//   - _a1 ccipocr3.ChainSelector
func (_e *AddressCodec_Expecter) AddressBytesToString(_a0 interface{}, _a1 interface{}) *AddressCodec_AddressBytesToString_Call {
	return &AddressCodec_AddressBytesToString_Call{Call: _e.mock.On("AddressBytesToString", _a0, _a1)}
}

func (_c *AddressCodec_AddressBytesToString_Call) Run(run func(_a0 ccipocr3.UnknownAddress, _a1 ccipocr3.ChainSelector)) *AddressCodec_AddressBytesToString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ccipocr3.UnknownAddress), args[1].(ccipocr3.ChainSelector))
	})
	return _c
}

func (_c *AddressCodec_AddressBytesToString_Call) Return(_a0 string, _a1 error) *AddressCodec_AddressBytesToString_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AddressCodec_AddressBytesToString_Call) RunAndReturn(run func(ccipocr3.UnknownAddress, ccipocr3.ChainSelector) (string, error)) *AddressCodec_AddressBytesToString_Call {
	_c.Call.Return(run)
	return _c
}

// AddressStringToBytes provides a mock function with given fields: _a0, _a1
func (_m *AddressCodec) AddressStringToBytes(_a0 string, _a1 ccipocr3.ChainSelector) (ccipocr3.UnknownAddress, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddressStringToBytes")
	}

	var r0 ccipocr3.UnknownAddress
	var r1 error
	if rf, ok := ret.Get(0).(func(string, ccipocr3.ChainSelector) (ccipocr3.UnknownAddress, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, ccipocr3.ChainSelector) ccipocr3.UnknownAddress); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ccipocr3.UnknownAddress)
		}
	}

	if rf, ok := ret.Get(1).(func(string, ccipocr3.ChainSelector) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddressCodec_AddressStringToBytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddressStringToBytes'
type AddressCodec_AddressStringToBytes_Call struct {
	*mock.Call
}

// AddressStringToBytes is a helper method to define mock.On call
//   - _a0 string
//   - _a1 ccipocr3.ChainSelector
func (_e *AddressCodec_Expecter) AddressStringToBytes(_a0 interface{}, _a1 interface{}) *AddressCodec_AddressStringToBytes_Call {
	return &AddressCodec_AddressStringToBytes_Call{Call: _e.mock.On("AddressStringToBytes", _a0, _a1)}
}

func (_c *AddressCodec_AddressStringToBytes_Call) Run(run func(_a0 string, _a1 ccipocr3.ChainSelector)) *AddressCodec_AddressStringToBytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(ccipocr3.ChainSelector))
	})
	return _c
}

func (_c *AddressCodec_AddressStringToBytes_Call) Return(_a0 ccipocr3.UnknownAddress, _a1 error) *AddressCodec_AddressStringToBytes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AddressCodec_AddressStringToBytes_Call) RunAndReturn(run func(string, ccipocr3.ChainSelector) (ccipocr3.UnknownAddress, error)) *AddressCodec_AddressStringToBytes_Call {
	_c.Call.Return(run)
	return _c
}

// NewAddressCodec creates a new instance of AddressCodec. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAddressCodec(t interface {
	mock.TestingT
	Cleanup(func())
}) *AddressCodec {
	mock := &AddressCodec{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
