// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: pb/chip_common.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum for different schema types
type SchemaType int32

const (
	SchemaType_PROTOBUF SchemaType = 0
	SchemaType_AVRO     SchemaType = 1
	SchemaType_JSON     SchemaType = 2
)

// Enum value maps for SchemaType.
var (
	SchemaType_name = map[int32]string{
		0: "PROTOBUF",
		1: "AVRO",
		2: "JSON",
	}
	SchemaType_value = map[string]int32{
		"PROTOBUF": 0,
		"AVRO":     1,
		"JSON":     2,
	}
)

func (x SchemaType) Enum() *SchemaType {
	p := new(SchemaType)
	*p = x
	return p
}

func (x SchemaType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SchemaType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_chip_common_proto_enumTypes[0].Descriptor()
}

func (SchemaType) Type() protoreflect.EnumType {
	return &file_pb_chip_common_proto_enumTypes[0]
}

func (x SchemaType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SchemaType.Descriptor instead.
func (SchemaType) EnumDescriptor() ([]byte, []int) {
	return file_pb_chip_common_proto_rawDescGZIP(), []int{0}
}

// Enum for different path types
type PathType int32

const (
	PathType_S3     PathType = 0 // S3 storage
	PathType_LOCAL  PathType = 1 // Local file system
	PathType_GITHUB PathType = 3 // GitHub storage
	PathType_OTHER  PathType = 4 // Other storage types
)

// Enum value maps for PathType.
var (
	PathType_name = map[int32]string{
		0: "S3",
		1: "LOCAL",
		3: "GITHUB",
		4: "OTHER",
	}
	PathType_value = map[string]int32{
		"S3":     0,
		"LOCAL":  1,
		"GITHUB": 3,
		"OTHER":  4,
	}
)

func (x PathType) Enum() *PathType {
	p := new(PathType)
	*p = x
	return p
}

func (x PathType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PathType) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_chip_common_proto_enumTypes[1].Descriptor()
}

func (PathType) Type() protoreflect.EnumType {
	return &file_pb_chip_common_proto_enumTypes[1]
}

func (x PathType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PathType.Descriptor instead.
func (PathType) EnumDescriptor() ([]byte, []int) {
	return file_pb_chip_common_proto_rawDescGZIP(), []int{1}
}

// Schema definition
type Schema struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subject       string                 `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Path          *Path                  `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`                                  // S3 location or other storage path
	Format        SchemaType             `protobuf:"varint,4,opt,name=format,proto3,enum=chip_common.SchemaType" json:"format,omitempty"` // Format of the schema, e.g. PROTOBUF, AVRO, JSON
	Schema        string                 `protobuf:"bytes,5,opt,name=schema,proto3" json:"schema,omitempty"`                              // Raw proto/avro schema with annotations
	References    []*SchemaReference     `protobuf:"bytes,6,rep,name=references,proto3" json:"references,omitempty"`                      // References to other schemas
	Metadata      *MetaData              `protobuf:"bytes,7,opt,name=metadata,proto3" json:"metadata,omitempty"`                          // optional metadata information
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Schema) Reset() {
	*x = Schema{}
	mi := &file_pb_chip_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_pb_chip_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_pb_chip_common_proto_rawDescGZIP(), []int{0}
}

func (x *Schema) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *Schema) GetPath() *Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *Schema) GetFormat() SchemaType {
	if x != nil {
		return x.Format
	}
	return SchemaType_PROTOBUF
}

func (x *Schema) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *Schema) GetReferences() []*SchemaReference {
	if x != nil {
		return x.References
	}
	return nil
}

func (x *Schema) GetMetadata() *MetaData {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Message to reference other schemas
type SchemaReference struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Subject       string                 `protobuf:"bytes,2,opt,name=subject,proto3" json:"subject,omitempty"`
	Version       int32                  `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SchemaReference) Reset() {
	*x = SchemaReference{}
	mi := &file_pb_chip_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaReference) ProtoMessage() {}

func (x *SchemaReference) ProtoReflect() protoreflect.Message {
	mi := &file_pb_chip_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaReference.ProtoReflect.Descriptor instead.
func (*SchemaReference) Descriptor() ([]byte, []int) {
	return file_pb_chip_common_proto_rawDescGZIP(), []int{1}
}

func (x *SchemaReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SchemaReference) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *SchemaReference) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

// Metadata for the schema, currently includes storage information
type MetaData struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Stores        map[string]*Store      `protobuf:"bytes,1,rep,name=stores,proto3" json:"stores,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // List of datastores the schema should be stored in. Map of store (hot, cold or warm) to Store objects.
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MetaData) Reset() {
	*x = MetaData{}
	mi := &file_pb_chip_common_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetaData) ProtoMessage() {}

func (x *MetaData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_chip_common_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetaData.ProtoReflect.Descriptor instead.
func (*MetaData) Descriptor() ([]byte, []int) {
	return file_pb_chip_common_proto_rawDescGZIP(), []int{2}
}

func (x *MetaData) GetStores() map[string]*Store {
	if x != nil {
		return x.Stores
	}
	return nil
}

// Each store contains index and partition information
type Store struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Index         []string               `protobuf:"bytes,1,rep,name=index,proto3" json:"index,omitempty"`
	Partition     []string               `protobuf:"bytes,2,rep,name=partition,proto3" json:"partition,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Store) Reset() {
	*x = Store{}
	mi := &file_pb_chip_common_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Store) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Store) ProtoMessage() {}

func (x *Store) ProtoReflect() protoreflect.Message {
	mi := &file_pb_chip_common_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Store.ProtoReflect.Descriptor instead.
func (*Store) Descriptor() ([]byte, []int) {
	return file_pb_chip_common_proto_rawDescGZIP(), []int{3}
}

func (x *Store) GetIndex() []string {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *Store) GetPartition() []string {
	if x != nil {
		return x.Partition
	}
	return nil
}

// Path definition
type Path struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Path          string                 `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`                            // S3 location or other storage path
	Type          PathType               `protobuf:"varint,2,opt,name=type,proto3,enum=chip_common.PathType" json:"type,omitempty"` // Type of PATH storage (S3, LOCAL, OTHER)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Path) Reset() {
	*x = Path{}
	mi := &file_pb_chip_common_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Path) ProtoMessage() {}

func (x *Path) ProtoReflect() protoreflect.Message {
	mi := &file_pb_chip_common_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Path.ProtoReflect.Descriptor instead.
func (*Path) Descriptor() ([]byte, []int) {
	return file_pb_chip_common_proto_rawDescGZIP(), []int{4}
}

func (x *Path) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Path) GetType() PathType {
	if x != nil {
		return x.Type
	}
	return PathType_S3
}

// Response message for schema registration
type RegisteredSchema struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Subject       string                 `protobuf:"bytes,1,opt,name=subject,proto3" json:"subject,omitempty"`
	Version       int32                  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RegisteredSchema) Reset() {
	*x = RegisteredSchema{}
	mi := &file_pb_chip_common_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RegisteredSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisteredSchema) ProtoMessage() {}

func (x *RegisteredSchema) ProtoReflect() protoreflect.Message {
	mi := &file_pb_chip_common_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisteredSchema.ProtoReflect.Descriptor instead.
func (*RegisteredSchema) Descriptor() ([]byte, []int) {
	return file_pb_chip_common_proto_rawDescGZIP(), []int{5}
}

func (x *RegisteredSchema) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *RegisteredSchema) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

var File_pb_chip_common_proto protoreflect.FileDescriptor

const file_pb_chip_common_proto_rawDesc = "" +
	"\n" +
	"\x14pb/chip_common.proto\x12\vchip_common\"\x83\x02\n" +
	"\x06Schema\x12\x18\n" +
	"\asubject\x18\x01 \x01(\tR\asubject\x12%\n" +
	"\x04path\x18\x02 \x01(\v2\x11.chip_common.PathR\x04path\x12/\n" +
	"\x06format\x18\x04 \x01(\x0e2\x17.chip_common.SchemaTypeR\x06format\x12\x16\n" +
	"\x06schema\x18\x05 \x01(\tR\x06schema\x12<\n" +
	"\n" +
	"references\x18\x06 \x03(\v2\x1c.chip_common.SchemaReferenceR\n" +
	"references\x121\n" +
	"\bmetadata\x18\a \x01(\v2\x15.chip_common.MetaDataR\bmetadata\"Y\n" +
	"\x0fSchemaReference\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\asubject\x18\x02 \x01(\tR\asubject\x12\x18\n" +
	"\aversion\x18\x03 \x01(\x05R\aversion\"\x94\x01\n" +
	"\bMetaData\x129\n" +
	"\x06stores\x18\x01 \x03(\v2!.chip_common.MetaData.StoresEntryR\x06stores\x1aM\n" +
	"\vStoresEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12(\n" +
	"\x05value\x18\x02 \x01(\v2\x12.chip_common.StoreR\x05value:\x028\x01\";\n" +
	"\x05Store\x12\x14\n" +
	"\x05index\x18\x01 \x03(\tR\x05index\x12\x1c\n" +
	"\tpartition\x18\x02 \x03(\tR\tpartition\"E\n" +
	"\x04Path\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12)\n" +
	"\x04type\x18\x02 \x01(\x0e2\x15.chip_common.PathTypeR\x04type\"F\n" +
	"\x10RegisteredSchema\x12\x18\n" +
	"\asubject\x18\x01 \x01(\tR\asubject\x12\x18\n" +
	"\aversion\x18\x02 \x01(\x05R\aversion*.\n" +
	"\n" +
	"SchemaType\x12\f\n" +
	"\bPROTOBUF\x10\x00\x12\b\n" +
	"\x04AVRO\x10\x01\x12\b\n" +
	"\x04JSON\x10\x02*4\n" +
	"\bPathType\x12\x06\n" +
	"\x02S3\x10\x00\x12\t\n" +
	"\x05LOCAL\x10\x01\x12\n" +
	"\n" +
	"\x06GITHUB\x10\x03\x12\t\n" +
	"\x05OTHER\x10\x04B\x06Z\x04./pbb\x06proto3"

var (
	file_pb_chip_common_proto_rawDescOnce sync.Once
	file_pb_chip_common_proto_rawDescData []byte
)

func file_pb_chip_common_proto_rawDescGZIP() []byte {
	file_pb_chip_common_proto_rawDescOnce.Do(func() {
		file_pb_chip_common_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_pb_chip_common_proto_rawDesc), len(file_pb_chip_common_proto_rawDesc)))
	})
	return file_pb_chip_common_proto_rawDescData
}

var file_pb_chip_common_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_pb_chip_common_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_pb_chip_common_proto_goTypes = []any{
	(SchemaType)(0),          // 0: chip_common.SchemaType
	(PathType)(0),            // 1: chip_common.PathType
	(*Schema)(nil),           // 2: chip_common.Schema
	(*SchemaReference)(nil),  // 3: chip_common.SchemaReference
	(*MetaData)(nil),         // 4: chip_common.MetaData
	(*Store)(nil),            // 5: chip_common.Store
	(*Path)(nil),             // 6: chip_common.Path
	(*RegisteredSchema)(nil), // 7: chip_common.RegisteredSchema
	nil,                      // 8: chip_common.MetaData.StoresEntry
}
var file_pb_chip_common_proto_depIdxs = []int32{
	6, // 0: chip_common.Schema.path:type_name -> chip_common.Path
	0, // 1: chip_common.Schema.format:type_name -> chip_common.SchemaType
	3, // 2: chip_common.Schema.references:type_name -> chip_common.SchemaReference
	4, // 3: chip_common.Schema.metadata:type_name -> chip_common.MetaData
	8, // 4: chip_common.MetaData.stores:type_name -> chip_common.MetaData.StoresEntry
	1, // 5: chip_common.Path.type:type_name -> chip_common.PathType
	5, // 6: chip_common.MetaData.StoresEntry.value:type_name -> chip_common.Store
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_pb_chip_common_proto_init() }
func file_pb_chip_common_proto_init() {
	if File_pb_chip_common_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_pb_chip_common_proto_rawDesc), len(file_pb_chip_common_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_chip_common_proto_goTypes,
		DependencyIndexes: file_pb_chip_common_proto_depIdxs,
		EnumInfos:         file_pb_chip_common_proto_enumTypes,
		MessageInfos:      file_pb_chip_common_proto_msgTypes,
	}.Build()
	File_pb_chip_common_proto = out.File
	file_pb_chip_common_proto_goTypes = nil
	file_pb_chip_common_proto_depIdxs = nil
}
