// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: csa_signer.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CSASigner_Accounts_FullMethodName = "/loop.CSASigner/Accounts"
	CSASigner_Sign_FullMethodName     = "/loop.CSASigner/Sign"
)

// CSASignerClient is the client API for CSASigner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CSASignerClient interface {
	Accounts(ctx context.Context, in *AccountsCSARequest, opts ...grpc.CallOption) (*AccountsCSAResponse, error)
	Sign(ctx context.Context, in *SignCSARequest, opts ...grpc.CallOption) (*SignCSAResponse, error)
}

type cSASignerClient struct {
	cc grpc.ClientConnInterface
}

func NewCSASignerClient(cc grpc.ClientConnInterface) CSASignerClient {
	return &cSASignerClient{cc}
}

func (c *cSASignerClient) Accounts(ctx context.Context, in *AccountsCSARequest, opts ...grpc.CallOption) (*AccountsCSAResponse, error) {
	out := new(AccountsCSAResponse)
	err := c.cc.Invoke(ctx, CSASigner_Accounts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSASignerClient) Sign(ctx context.Context, in *SignCSARequest, opts ...grpc.CallOption) (*SignCSAResponse, error) {
	out := new(SignCSAResponse)
	err := c.cc.Invoke(ctx, CSASigner_Sign_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CSASignerServer is the server API for CSASigner service.
// All implementations must embed UnimplementedCSASignerServer
// for forward compatibility
type CSASignerServer interface {
	Accounts(context.Context, *AccountsCSARequest) (*AccountsCSAResponse, error)
	Sign(context.Context, *SignCSARequest) (*SignCSAResponse, error)
	mustEmbedUnimplementedCSASignerServer()
}

// UnimplementedCSASignerServer must be embedded to have forward compatible implementations.
type UnimplementedCSASignerServer struct {
}

func (UnimplementedCSASignerServer) Accounts(context.Context, *AccountsCSARequest) (*AccountsCSAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Accounts not implemented")
}
func (UnimplementedCSASignerServer) Sign(context.Context, *SignCSARequest) (*SignCSAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sign not implemented")
}
func (UnimplementedCSASignerServer) mustEmbedUnimplementedCSASignerServer() {}

// UnsafeCSASignerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CSASignerServer will
// result in compilation errors.
type UnsafeCSASignerServer interface {
	mustEmbedUnimplementedCSASignerServer()
}

func RegisterCSASignerServer(s grpc.ServiceRegistrar, srv CSASignerServer) {
	s.RegisterService(&CSASigner_ServiceDesc, srv)
}

func _CSASigner_Accounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountsCSARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSASignerServer).Accounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CSASigner_Accounts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSASignerServer).Accounts(ctx, req.(*AccountsCSARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSASigner_Sign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignCSARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSASignerServer).Sign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CSASigner_Sign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSASignerServer).Sign(ctx, req.(*SignCSARequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CSASigner_ServiceDesc is the grpc.ServiceDesc for CSASigner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CSASigner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.CSASigner",
	HandlerType: (*CSASignerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Accounts",
			Handler:    _CSASigner_Accounts_Handler,
		},
		{
			MethodName: "Sign",
			Handler:    _CSASigner_Sign_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "csa_signer.proto",
}
