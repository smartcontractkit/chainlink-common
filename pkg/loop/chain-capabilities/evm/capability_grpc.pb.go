// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: loop/chain-capabilities/evm/capability.proto

package evm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EVMChain_CallContract_FullMethodName           = "/loop.chain_capabilities.evm.EVMChain/CallContract"
	EVMChain_FilterLogs_FullMethodName             = "/loop.chain_capabilities.evm.EVMChain/FilterLogs"
	EVMChain_BalanceAt_FullMethodName              = "/loop.chain_capabilities.evm.EVMChain/BalanceAt"
	EVMChain_EstimateGas_FullMethodName            = "/loop.chain_capabilities.evm.EVMChain/EstimateGas"
	EVMChain_GetTransactionByHash_FullMethodName   = "/loop.chain_capabilities.evm.EVMChain/GetTransactionByHash"
	EVMChain_GetTransactionReceipt_FullMethodName  = "/loop.chain_capabilities.evm.EVMChain/GetTransactionReceipt"
	EVMChain_LatestAndFinalizedHead_FullMethodName = "/loop.chain_capabilities.evm.EVMChain/LatestAndFinalizedHead"
	EVMChain_QueryTrackedLogs_FullMethodName       = "/loop.chain_capabilities.evm.EVMChain/QueryTrackedLogs"
	EVMChain_RegisterLogTracking_FullMethodName    = "/loop.chain_capabilities.evm.EVMChain/RegisterLogTracking"
	EVMChain_UnregisterLogTracking_FullMethodName  = "/loop.chain_capabilities.evm.EVMChain/UnregisterLogTracking"
)

// EVMChainClient is the client API for EVMChain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TODO rename to EVM, move EVM back to loop/internal, but needs some proto gen template fixing to make imports work
type EVMChainClient interface {
	CallContract(ctx context.Context, in *CallContractRequest, opts ...grpc.CallOption) (*CallContractReply, error)
	FilterLogs(ctx context.Context, in *FilterLogsRequest, opts ...grpc.CallOption) (*FilterLogsReply, error)
	BalanceAt(ctx context.Context, in *BalanceAtRequest, opts ...grpc.CallOption) (*BalanceAtReply, error)
	EstimateGas(ctx context.Context, in *EstimateGasRequest, opts ...grpc.CallOption) (*EstimateGasReply, error)
	GetTransactionByHash(ctx context.Context, in *GetTransactionByHashRequest, opts ...grpc.CallOption) (*GetTransactionByHashReply, error)
	GetTransactionReceipt(ctx context.Context, in *GetReceiptRequest, opts ...grpc.CallOption) (*GetReceiptReply, error)
	LatestAndFinalizedHead(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LatestAndFinalizedHeadReply, error)
	QueryTrackedLogs(ctx context.Context, in *QueryTrackedLogsRequest, opts ...grpc.CallOption) (*QueryTrackedLogsReply, error)
	RegisterLogTracking(ctx context.Context, in *RegisterLogTrackingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnregisterLogTracking(ctx context.Context, in *UnregisterLogTrackingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type eVMChainClient struct {
	cc grpc.ClientConnInterface
}

func NewEVMChainClient(cc grpc.ClientConnInterface) EVMChainClient {
	return &eVMChainClient{cc}
}

func (c *eVMChainClient) CallContract(ctx context.Context, in *CallContractRequest, opts ...grpc.CallOption) (*CallContractReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CallContractReply)
	err := c.cc.Invoke(ctx, EVMChain_CallContract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eVMChainClient) FilterLogs(ctx context.Context, in *FilterLogsRequest, opts ...grpc.CallOption) (*FilterLogsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FilterLogsReply)
	err := c.cc.Invoke(ctx, EVMChain_FilterLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eVMChainClient) BalanceAt(ctx context.Context, in *BalanceAtRequest, opts ...grpc.CallOption) (*BalanceAtReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BalanceAtReply)
	err := c.cc.Invoke(ctx, EVMChain_BalanceAt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eVMChainClient) EstimateGas(ctx context.Context, in *EstimateGasRequest, opts ...grpc.CallOption) (*EstimateGasReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EstimateGasReply)
	err := c.cc.Invoke(ctx, EVMChain_EstimateGas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eVMChainClient) GetTransactionByHash(ctx context.Context, in *GetTransactionByHashRequest, opts ...grpc.CallOption) (*GetTransactionByHashReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionByHashReply)
	err := c.cc.Invoke(ctx, EVMChain_GetTransactionByHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eVMChainClient) GetTransactionReceipt(ctx context.Context, in *GetReceiptRequest, opts ...grpc.CallOption) (*GetReceiptReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetReceiptReply)
	err := c.cc.Invoke(ctx, EVMChain_GetTransactionReceipt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eVMChainClient) LatestAndFinalizedHead(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LatestAndFinalizedHeadReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LatestAndFinalizedHeadReply)
	err := c.cc.Invoke(ctx, EVMChain_LatestAndFinalizedHead_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eVMChainClient) QueryTrackedLogs(ctx context.Context, in *QueryTrackedLogsRequest, opts ...grpc.CallOption) (*QueryTrackedLogsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryTrackedLogsReply)
	err := c.cc.Invoke(ctx, EVMChain_QueryTrackedLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eVMChainClient) RegisterLogTracking(ctx context.Context, in *RegisterLogTrackingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EVMChain_RegisterLogTracking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eVMChainClient) UnregisterLogTracking(ctx context.Context, in *UnregisterLogTrackingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, EVMChain_UnregisterLogTracking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EVMChainServer is the server API for EVMChain service.
// All implementations must embed UnimplementedEVMChainServer
// for forward compatibility.
//
// TODO rename to EVM, move EVM back to loop/internal, but needs some proto gen template fixing to make imports work
type EVMChainServer interface {
	CallContract(context.Context, *CallContractRequest) (*CallContractReply, error)
	FilterLogs(context.Context, *FilterLogsRequest) (*FilterLogsReply, error)
	BalanceAt(context.Context, *BalanceAtRequest) (*BalanceAtReply, error)
	EstimateGas(context.Context, *EstimateGasRequest) (*EstimateGasReply, error)
	GetTransactionByHash(context.Context, *GetTransactionByHashRequest) (*GetTransactionByHashReply, error)
	GetTransactionReceipt(context.Context, *GetReceiptRequest) (*GetReceiptReply, error)
	LatestAndFinalizedHead(context.Context, *emptypb.Empty) (*LatestAndFinalizedHeadReply, error)
	QueryTrackedLogs(context.Context, *QueryTrackedLogsRequest) (*QueryTrackedLogsReply, error)
	RegisterLogTracking(context.Context, *RegisterLogTrackingRequest) (*emptypb.Empty, error)
	UnregisterLogTracking(context.Context, *UnregisterLogTrackingRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedEVMChainServer()
}

// UnimplementedEVMChainServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEVMChainServer struct{}

func (UnimplementedEVMChainServer) CallContract(context.Context, *CallContractRequest) (*CallContractReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallContract not implemented")
}
func (UnimplementedEVMChainServer) FilterLogs(context.Context, *FilterLogsRequest) (*FilterLogsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilterLogs not implemented")
}
func (UnimplementedEVMChainServer) BalanceAt(context.Context, *BalanceAtRequest) (*BalanceAtReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalanceAt not implemented")
}
func (UnimplementedEVMChainServer) EstimateGas(context.Context, *EstimateGasRequest) (*EstimateGasReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateGas not implemented")
}
func (UnimplementedEVMChainServer) GetTransactionByHash(context.Context, *GetTransactionByHashRequest) (*GetTransactionByHashReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByHash not implemented")
}
func (UnimplementedEVMChainServer) GetTransactionReceipt(context.Context, *GetReceiptRequest) (*GetReceiptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionReceipt not implemented")
}
func (UnimplementedEVMChainServer) LatestAndFinalizedHead(context.Context, *emptypb.Empty) (*LatestAndFinalizedHeadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestAndFinalizedHead not implemented")
}
func (UnimplementedEVMChainServer) QueryTrackedLogs(context.Context, *QueryTrackedLogsRequest) (*QueryTrackedLogsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryTrackedLogs not implemented")
}
func (UnimplementedEVMChainServer) RegisterLogTracking(context.Context, *RegisterLogTrackingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterLogTracking not implemented")
}
func (UnimplementedEVMChainServer) UnregisterLogTracking(context.Context, *UnregisterLogTrackingRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterLogTracking not implemented")
}
func (UnimplementedEVMChainServer) mustEmbedUnimplementedEVMChainServer() {}
func (UnimplementedEVMChainServer) testEmbeddedByValue()                  {}

// UnsafeEVMChainServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EVMChainServer will
// result in compilation errors.
type UnsafeEVMChainServer interface {
	mustEmbedUnimplementedEVMChainServer()
}

func RegisterEVMChainServer(s grpc.ServiceRegistrar, srv EVMChainServer) {
	// If the following call pancis, it indicates UnimplementedEVMChainServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EVMChain_ServiceDesc, srv)
}

func _EVMChain_CallContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EVMChainServer).CallContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EVMChain_CallContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EVMChainServer).CallContract(ctx, req.(*CallContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EVMChain_FilterLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EVMChainServer).FilterLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EVMChain_FilterLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EVMChainServer).FilterLogs(ctx, req.(*FilterLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EVMChain_BalanceAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceAtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EVMChainServer).BalanceAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EVMChain_BalanceAt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EVMChainServer).BalanceAt(ctx, req.(*BalanceAtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EVMChain_EstimateGas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateGasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EVMChainServer).EstimateGas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EVMChain_EstimateGas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EVMChainServer).EstimateGas(ctx, req.(*EstimateGasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EVMChain_GetTransactionByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EVMChainServer).GetTransactionByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EVMChain_GetTransactionByHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EVMChainServer).GetTransactionByHash(ctx, req.(*GetTransactionByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EVMChain_GetTransactionReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EVMChainServer).GetTransactionReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EVMChain_GetTransactionReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EVMChainServer).GetTransactionReceipt(ctx, req.(*GetReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EVMChain_LatestAndFinalizedHead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EVMChainServer).LatestAndFinalizedHead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EVMChain_LatestAndFinalizedHead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EVMChainServer).LatestAndFinalizedHead(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _EVMChain_QueryTrackedLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTrackedLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EVMChainServer).QueryTrackedLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EVMChain_QueryTrackedLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EVMChainServer).QueryTrackedLogs(ctx, req.(*QueryTrackedLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EVMChain_RegisterLogTracking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterLogTrackingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EVMChainServer).RegisterLogTracking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EVMChain_RegisterLogTracking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EVMChainServer).RegisterLogTracking(ctx, req.(*RegisterLogTrackingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EVMChain_UnregisterLogTracking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterLogTrackingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EVMChainServer).UnregisterLogTracking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EVMChain_UnregisterLogTracking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EVMChainServer).UnregisterLogTracking(ctx, req.(*UnregisterLogTrackingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EVMChain_ServiceDesc is the grpc.ServiceDesc for EVMChain service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EVMChain_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.chain_capabilities.evm.EVMChain",
	HandlerType: (*EVMChainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CallContract",
			Handler:    _EVMChain_CallContract_Handler,
		},
		{
			MethodName: "FilterLogs",
			Handler:    _EVMChain_FilterLogs_Handler,
		},
		{
			MethodName: "BalanceAt",
			Handler:    _EVMChain_BalanceAt_Handler,
		},
		{
			MethodName: "EstimateGas",
			Handler:    _EVMChain_EstimateGas_Handler,
		},
		{
			MethodName: "GetTransactionByHash",
			Handler:    _EVMChain_GetTransactionByHash_Handler,
		},
		{
			MethodName: "GetTransactionReceipt",
			Handler:    _EVMChain_GetTransactionReceipt_Handler,
		},
		{
			MethodName: "LatestAndFinalizedHead",
			Handler:    _EVMChain_LatestAndFinalizedHead_Handler,
		},
		{
			MethodName: "QueryTrackedLogs",
			Handler:    _EVMChain_QueryTrackedLogs_Handler,
		},
		{
			MethodName: "RegisterLogTracking",
			Handler:    _EVMChain_RegisterLogTracking_Handler,
		},
		{
			MethodName: "UnregisterLogTracking",
			Handler:    _EVMChain_UnregisterLogTracking_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "loop/chain-capabilities/evm/capability.proto",
}
