// Code generated by github.com/smartcontractkit/chainlink-common/pkg/capabilities/cli, DO NOT EDIT.

package referenceaction

import (
	"github.com/smartcontractkit/chainlink-common/pkg/capabilities"
	"github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk"
)

func (cfg SomeConfig) New(w *sdk.WorkflowSpecFactory, ref string, input ActionInput) SomeOutputsCap {

	def := sdk.StepDefinition{
		ID: "reference-test-action@1.0.0", Ref: ref,
		Inputs: input.ToSteps(),
		Config: map[string]any{
			"name":   cfg.Name,
			"number": cfg.Number,
		},
		CapabilityType: capabilities.CapabilityTypeAction,
	}

	step := sdk.Step[SomeOutputs]{Definition: def}
	raw := step.AddTo(w)
	return SomeOutputsWrapper(raw)
}

// SomeOutputsWrapper allows access to field from an sdk.CapDefinition[SomeOutputs]
func SomeOutputsWrapper(raw sdk.CapDefinition[SomeOutputs]) SomeOutputsCap {
	wrapped, ok := raw.(SomeOutputsCap)
	if ok {
		return wrapped
	}
	return &someOutputsCap{CapDefinition: raw}
}

type SomeOutputsCap interface {
	sdk.CapDefinition[SomeOutputs]
	AdaptedThing() sdk.CapDefinition[string]
	private()
}

type someOutputsCap struct {
	sdk.CapDefinition[SomeOutputs]
}

func (*someOutputsCap) private() {}
func (c *someOutputsCap) AdaptedThing() sdk.CapDefinition[string] {
	return sdk.AccessField[SomeOutputs, string](c.CapDefinition, "adapted_thing")
}

func ConstantSomeOutputs(value SomeOutputs) SomeOutputsCap {
	return &someOutputsCap{CapDefinition: sdk.ConstantDefinition(value)}
}

func NewSomeOutputsFromFields(
	adaptedThing sdk.CapDefinition[string]) SomeOutputsCap {
	return &simpleSomeOutputs{
		CapDefinition: sdk.ComponentCapDefinition[SomeOutputs]{
			"adapted_thing": adaptedThing.Ref(),
		},
		adaptedThing: adaptedThing,
	}
}

type simpleSomeOutputs struct {
	sdk.CapDefinition[SomeOutputs]
	adaptedThing sdk.CapDefinition[string]
}

func (c *simpleSomeOutputs) AdaptedThing() sdk.CapDefinition[string] {
	return c.adaptedThing
}

func (c *simpleSomeOutputs) private() {}

type ActionInput struct {
	InputThing sdk.CapDefinition[bool]
}

func (input ActionInput) ToSteps() sdk.StepInputs {
	return sdk.StepInputs{
		Mapping: map[string]any{
			"input_thing": input.InputThing.Ref(),
		},
	}
}
