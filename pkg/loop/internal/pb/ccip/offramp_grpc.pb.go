// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: offramp.proto

package ccippb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OffRampReader_Address_FullMethodName                      = "/loop.internal.pb.ccip.OffRampReader/Address"
	OffRampReader_ChangeConfig_FullMethodName                 = "/loop.internal.pb.ccip.OffRampReader/ChangeConfig"
	OffRampReader_CurrentRateLimiterState_FullMethodName      = "/loop.internal.pb.ccip.OffRampReader/CurrentRateLimiterState"
	OffRampReader_DecodeExecutionReport_FullMethodName        = "/loop.internal.pb.ccip.OffRampReader/DecodeExecutionReport"
	OffRampReader_EncodeExecutionReport_FullMethodName        = "/loop.internal.pb.ccip.OffRampReader/EncodeExecutionReport"
	OffRampReader_GasPriceEstimator_FullMethodName            = "/loop.internal.pb.ccip.OffRampReader/GasPriceEstimator"
	OffRampReader_GetExecutionState_FullMethodName            = "/loop.internal.pb.ccip.OffRampReader/GetExecutionState"
	OffRampReader_GetExecutionStateChanges_FullMethodName     = "/loop.internal.pb.ccip.OffRampReader/GetExecutionStateChanges"
	OffRampReader_GetRouter_FullMethodName                    = "/loop.internal.pb.ccip.OffRampReader/GetRouter"
	OffRampReader_GetSourceToDestTokensMapping_FullMethodName = "/loop.internal.pb.ccip.OffRampReader/GetSourceToDestTokensMapping"
	OffRampReader_GetStaticConfig_FullMethodName              = "/loop.internal.pb.ccip.OffRampReader/GetStaticConfig"
	OffRampReader_GetTokens_FullMethodName                    = "/loop.internal.pb.ccip.OffRampReader/GetTokens"
	OffRampReader_ListSenderNonces_FullMethodName             = "/loop.internal.pb.ccip.OffRampReader/ListSenderNonces"
	OffRampReader_OffchainConfig_FullMethodName               = "/loop.internal.pb.ccip.OffRampReader/OffchainConfig"
	OffRampReader_OnchainConfig_FullMethodName                = "/loop.internal.pb.ccip.OffRampReader/OnchainConfig"
	OffRampReader_Close_FullMethodName                        = "/loop.internal.pb.ccip.OffRampReader/Close"
)

// OffRampReaderClient is the client API for OffRampReader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// OffRampReader is a gRPC service adapter for the OffRampReader interface
// [github.com/smartcontractkit/chainlink-common/pkg/types/ccip/OffRampReader]
type OffRampReaderClient interface {
	Address(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OffRampAddressResponse, error)
	ChangeConfig(ctx context.Context, in *ChangeConfigRequest, opts ...grpc.CallOption) (*ChangeConfigResponse, error)
	CurrentRateLimiterState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CurrentRateLimiterStateResponse, error)
	DecodeExecutionReport(ctx context.Context, in *DecodeExecutionReportRequest, opts ...grpc.CallOption) (*DecodeExecutionReportResponse, error)
	EncodeExecutionReport(ctx context.Context, in *EncodeExecutionReportRequest, opts ...grpc.CallOption) (*EncodeExecutionReportResponse, error)
	GasPriceEstimator(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GasPriceEstimatorResponse, error)
	GetExecutionState(ctx context.Context, in *GetExecutionStateRequest, opts ...grpc.CallOption) (*GetExecutionStateResponse, error)
	GetExecutionStateChanges(ctx context.Context, in *GetExecutionStateChangesRequest, opts ...grpc.CallOption) (*GetExecutionStateChangesResponse, error)
	GetRouter(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRouterResponse, error)
	GetSourceToDestTokensMapping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSourceToDestTokensMappingResponse, error)
	GetStaticConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStaticConfigResponse, error)
	GetTokens(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTokensResponse, error)
	ListSenderNonces(ctx context.Context, in *ListSenderNoncesRequest, opts ...grpc.CallOption) (*ListSenderNoncesResponse, error)
	OffchainConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OffchainConfigResponse, error)
	OnchainConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OnchainConfigResponse, error)
	Close(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type offRampReaderClient struct {
	cc grpc.ClientConnInterface
}

func NewOffRampReaderClient(cc grpc.ClientConnInterface) OffRampReaderClient {
	return &offRampReaderClient{cc}
}

func (c *offRampReaderClient) Address(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OffRampAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OffRampAddressResponse)
	err := c.cc.Invoke(ctx, OffRampReader_Address_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offRampReaderClient) ChangeConfig(ctx context.Context, in *ChangeConfigRequest, opts ...grpc.CallOption) (*ChangeConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChangeConfigResponse)
	err := c.cc.Invoke(ctx, OffRampReader_ChangeConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offRampReaderClient) CurrentRateLimiterState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CurrentRateLimiterStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CurrentRateLimiterStateResponse)
	err := c.cc.Invoke(ctx, OffRampReader_CurrentRateLimiterState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offRampReaderClient) DecodeExecutionReport(ctx context.Context, in *DecodeExecutionReportRequest, opts ...grpc.CallOption) (*DecodeExecutionReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DecodeExecutionReportResponse)
	err := c.cc.Invoke(ctx, OffRampReader_DecodeExecutionReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offRampReaderClient) EncodeExecutionReport(ctx context.Context, in *EncodeExecutionReportRequest, opts ...grpc.CallOption) (*EncodeExecutionReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EncodeExecutionReportResponse)
	err := c.cc.Invoke(ctx, OffRampReader_EncodeExecutionReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offRampReaderClient) GasPriceEstimator(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GasPriceEstimatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GasPriceEstimatorResponse)
	err := c.cc.Invoke(ctx, OffRampReader_GasPriceEstimator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offRampReaderClient) GetExecutionState(ctx context.Context, in *GetExecutionStateRequest, opts ...grpc.CallOption) (*GetExecutionStateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExecutionStateResponse)
	err := c.cc.Invoke(ctx, OffRampReader_GetExecutionState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offRampReaderClient) GetExecutionStateChanges(ctx context.Context, in *GetExecutionStateChangesRequest, opts ...grpc.CallOption) (*GetExecutionStateChangesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetExecutionStateChangesResponse)
	err := c.cc.Invoke(ctx, OffRampReader_GetExecutionStateChanges_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offRampReaderClient) GetRouter(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRouterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRouterResponse)
	err := c.cc.Invoke(ctx, OffRampReader_GetRouter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offRampReaderClient) GetSourceToDestTokensMapping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSourceToDestTokensMappingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSourceToDestTokensMappingResponse)
	err := c.cc.Invoke(ctx, OffRampReader_GetSourceToDestTokensMapping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offRampReaderClient) GetStaticConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStaticConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStaticConfigResponse)
	err := c.cc.Invoke(ctx, OffRampReader_GetStaticConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offRampReaderClient) GetTokens(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetTokensResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTokensResponse)
	err := c.cc.Invoke(ctx, OffRampReader_GetTokens_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offRampReaderClient) ListSenderNonces(ctx context.Context, in *ListSenderNoncesRequest, opts ...grpc.CallOption) (*ListSenderNoncesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSenderNoncesResponse)
	err := c.cc.Invoke(ctx, OffRampReader_ListSenderNonces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offRampReaderClient) OffchainConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OffchainConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OffchainConfigResponse)
	err := c.cc.Invoke(ctx, OffRampReader_OffchainConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offRampReaderClient) OnchainConfig(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*OnchainConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OnchainConfigResponse)
	err := c.cc.Invoke(ctx, OffRampReader_OnchainConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *offRampReaderClient) Close(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OffRampReader_Close_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OffRampReaderServer is the server API for OffRampReader service.
// All implementations must embed UnimplementedOffRampReaderServer
// for forward compatibility.
//
// OffRampReader is a gRPC service adapter for the OffRampReader interface
// [github.com/smartcontractkit/chainlink-common/pkg/types/ccip/OffRampReader]
type OffRampReaderServer interface {
	Address(context.Context, *emptypb.Empty) (*OffRampAddressResponse, error)
	ChangeConfig(context.Context, *ChangeConfigRequest) (*ChangeConfigResponse, error)
	CurrentRateLimiterState(context.Context, *emptypb.Empty) (*CurrentRateLimiterStateResponse, error)
	DecodeExecutionReport(context.Context, *DecodeExecutionReportRequest) (*DecodeExecutionReportResponse, error)
	EncodeExecutionReport(context.Context, *EncodeExecutionReportRequest) (*EncodeExecutionReportResponse, error)
	GasPriceEstimator(context.Context, *emptypb.Empty) (*GasPriceEstimatorResponse, error)
	GetExecutionState(context.Context, *GetExecutionStateRequest) (*GetExecutionStateResponse, error)
	GetExecutionStateChanges(context.Context, *GetExecutionStateChangesRequest) (*GetExecutionStateChangesResponse, error)
	GetRouter(context.Context, *emptypb.Empty) (*GetRouterResponse, error)
	GetSourceToDestTokensMapping(context.Context, *emptypb.Empty) (*GetSourceToDestTokensMappingResponse, error)
	GetStaticConfig(context.Context, *emptypb.Empty) (*GetStaticConfigResponse, error)
	GetTokens(context.Context, *emptypb.Empty) (*GetTokensResponse, error)
	ListSenderNonces(context.Context, *ListSenderNoncesRequest) (*ListSenderNoncesResponse, error)
	OffchainConfig(context.Context, *emptypb.Empty) (*OffchainConfigResponse, error)
	OnchainConfig(context.Context, *emptypb.Empty) (*OnchainConfigResponse, error)
	Close(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedOffRampReaderServer()
}

// UnimplementedOffRampReaderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOffRampReaderServer struct{}

func (UnimplementedOffRampReaderServer) Address(context.Context, *emptypb.Empty) (*OffRampAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Address not implemented")
}
func (UnimplementedOffRampReaderServer) ChangeConfig(context.Context, *ChangeConfigRequest) (*ChangeConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeConfig not implemented")
}
func (UnimplementedOffRampReaderServer) CurrentRateLimiterState(context.Context, *emptypb.Empty) (*CurrentRateLimiterStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentRateLimiterState not implemented")
}
func (UnimplementedOffRampReaderServer) DecodeExecutionReport(context.Context, *DecodeExecutionReportRequest) (*DecodeExecutionReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DecodeExecutionReport not implemented")
}
func (UnimplementedOffRampReaderServer) EncodeExecutionReport(context.Context, *EncodeExecutionReportRequest) (*EncodeExecutionReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EncodeExecutionReport not implemented")
}
func (UnimplementedOffRampReaderServer) GasPriceEstimator(context.Context, *emptypb.Empty) (*GasPriceEstimatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasPriceEstimator not implemented")
}
func (UnimplementedOffRampReaderServer) GetExecutionState(context.Context, *GetExecutionStateRequest) (*GetExecutionStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExecutionState not implemented")
}
func (UnimplementedOffRampReaderServer) GetExecutionStateChanges(context.Context, *GetExecutionStateChangesRequest) (*GetExecutionStateChangesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExecutionStateChanges not implemented")
}
func (UnimplementedOffRampReaderServer) GetRouter(context.Context, *emptypb.Empty) (*GetRouterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouter not implemented")
}
func (UnimplementedOffRampReaderServer) GetSourceToDestTokensMapping(context.Context, *emptypb.Empty) (*GetSourceToDestTokensMappingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSourceToDestTokensMapping not implemented")
}
func (UnimplementedOffRampReaderServer) GetStaticConfig(context.Context, *emptypb.Empty) (*GetStaticConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStaticConfig not implemented")
}
func (UnimplementedOffRampReaderServer) GetTokens(context.Context, *emptypb.Empty) (*GetTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokens not implemented")
}
func (UnimplementedOffRampReaderServer) ListSenderNonces(context.Context, *ListSenderNoncesRequest) (*ListSenderNoncesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSenderNonces not implemented")
}
func (UnimplementedOffRampReaderServer) OffchainConfig(context.Context, *emptypb.Empty) (*OffchainConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OffchainConfig not implemented")
}
func (UnimplementedOffRampReaderServer) OnchainConfig(context.Context, *emptypb.Empty) (*OnchainConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnchainConfig not implemented")
}
func (UnimplementedOffRampReaderServer) Close(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedOffRampReaderServer) mustEmbedUnimplementedOffRampReaderServer() {}
func (UnimplementedOffRampReaderServer) testEmbeddedByValue()                       {}

// UnsafeOffRampReaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OffRampReaderServer will
// result in compilation errors.
type UnsafeOffRampReaderServer interface {
	mustEmbedUnimplementedOffRampReaderServer()
}

func RegisterOffRampReaderServer(s grpc.ServiceRegistrar, srv OffRampReaderServer) {
	// If the following call pancis, it indicates UnimplementedOffRampReaderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OffRampReader_ServiceDesc, srv)
}

func _OffRampReader_Address_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OffRampReaderServer).Address(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OffRampReader_Address_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OffRampReaderServer).Address(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OffRampReader_ChangeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OffRampReaderServer).ChangeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OffRampReader_ChangeConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OffRampReaderServer).ChangeConfig(ctx, req.(*ChangeConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OffRampReader_CurrentRateLimiterState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OffRampReaderServer).CurrentRateLimiterState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OffRampReader_CurrentRateLimiterState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OffRampReaderServer).CurrentRateLimiterState(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OffRampReader_DecodeExecutionReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecodeExecutionReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OffRampReaderServer).DecodeExecutionReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OffRampReader_DecodeExecutionReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OffRampReaderServer).DecodeExecutionReport(ctx, req.(*DecodeExecutionReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OffRampReader_EncodeExecutionReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncodeExecutionReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OffRampReaderServer).EncodeExecutionReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OffRampReader_EncodeExecutionReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OffRampReaderServer).EncodeExecutionReport(ctx, req.(*EncodeExecutionReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OffRampReader_GasPriceEstimator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OffRampReaderServer).GasPriceEstimator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OffRampReader_GasPriceEstimator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OffRampReaderServer).GasPriceEstimator(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OffRampReader_GetExecutionState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExecutionStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OffRampReaderServer).GetExecutionState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OffRampReader_GetExecutionState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OffRampReaderServer).GetExecutionState(ctx, req.(*GetExecutionStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OffRampReader_GetExecutionStateChanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExecutionStateChangesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OffRampReaderServer).GetExecutionStateChanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OffRampReader_GetExecutionStateChanges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OffRampReaderServer).GetExecutionStateChanges(ctx, req.(*GetExecutionStateChangesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OffRampReader_GetRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OffRampReaderServer).GetRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OffRampReader_GetRouter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OffRampReaderServer).GetRouter(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OffRampReader_GetSourceToDestTokensMapping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OffRampReaderServer).GetSourceToDestTokensMapping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OffRampReader_GetSourceToDestTokensMapping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OffRampReaderServer).GetSourceToDestTokensMapping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OffRampReader_GetStaticConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OffRampReaderServer).GetStaticConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OffRampReader_GetStaticConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OffRampReaderServer).GetStaticConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OffRampReader_GetTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OffRampReaderServer).GetTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OffRampReader_GetTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OffRampReaderServer).GetTokens(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OffRampReader_ListSenderNonces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSenderNoncesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OffRampReaderServer).ListSenderNonces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OffRampReader_ListSenderNonces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OffRampReaderServer).ListSenderNonces(ctx, req.(*ListSenderNoncesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OffRampReader_OffchainConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OffRampReaderServer).OffchainConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OffRampReader_OffchainConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OffRampReaderServer).OffchainConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OffRampReader_OnchainConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OffRampReaderServer).OnchainConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OffRampReader_OnchainConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OffRampReaderServer).OnchainConfig(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _OffRampReader_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OffRampReaderServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OffRampReader_Close_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OffRampReaderServer).Close(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// OffRampReader_ServiceDesc is the grpc.ServiceDesc for OffRampReader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OffRampReader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.internal.pb.ccip.OffRampReader",
	HandlerType: (*OffRampReaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Address",
			Handler:    _OffRampReader_Address_Handler,
		},
		{
			MethodName: "ChangeConfig",
			Handler:    _OffRampReader_ChangeConfig_Handler,
		},
		{
			MethodName: "CurrentRateLimiterState",
			Handler:    _OffRampReader_CurrentRateLimiterState_Handler,
		},
		{
			MethodName: "DecodeExecutionReport",
			Handler:    _OffRampReader_DecodeExecutionReport_Handler,
		},
		{
			MethodName: "EncodeExecutionReport",
			Handler:    _OffRampReader_EncodeExecutionReport_Handler,
		},
		{
			MethodName: "GasPriceEstimator",
			Handler:    _OffRampReader_GasPriceEstimator_Handler,
		},
		{
			MethodName: "GetExecutionState",
			Handler:    _OffRampReader_GetExecutionState_Handler,
		},
		{
			MethodName: "GetExecutionStateChanges",
			Handler:    _OffRampReader_GetExecutionStateChanges_Handler,
		},
		{
			MethodName: "GetRouter",
			Handler:    _OffRampReader_GetRouter_Handler,
		},
		{
			MethodName: "GetSourceToDestTokensMapping",
			Handler:    _OffRampReader_GetSourceToDestTokensMapping_Handler,
		},
		{
			MethodName: "GetStaticConfig",
			Handler:    _OffRampReader_GetStaticConfig_Handler,
		},
		{
			MethodName: "GetTokens",
			Handler:    _OffRampReader_GetTokens_Handler,
		},
		{
			MethodName: "ListSenderNonces",
			Handler:    _OffRampReader_ListSenderNonces_Handler,
		},
		{
			MethodName: "OffchainConfig",
			Handler:    _OffRampReader_OffchainConfig_Handler,
		},
		{
			MethodName: "OnchainConfig",
			Handler:    _OffRampReader_OnchainConfig_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _OffRampReader_Close_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "offramp.proto",
}
