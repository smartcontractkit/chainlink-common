// Code generated by github.com/smartcontractkit/chainlink-common/pkg/capabilities/v2/protoc, DO NOT EDIT.

package evmcappb

import (
	"errors"

	"google.golang.org/protobuf/types/known/anypb"

	"google.golang.org/protobuf/types/known/emptypb"

	evmpb "github.com/smartcontractkit/chainlink-common/pkg/capabilities/v2/chain-capabilities/evm/chain-service"
	"github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk/v2"
	sdkpb "github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk/v2/pb"
)

type EVM struct {
	// TODO: https://smartcontract-it.atlassian.net/browse/CAPPL-799 allow defaults for capabilities
}

func (c *EVM) CallContract(runtime sdk.DonRuntime, input *evmpb.CallContractRequest) sdk.Promise[*evmpb.CallContractReply] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*evmpb.CallContractReply](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      "mainnet-evm@1.0.0",
		Payload: wrapped,
		Method:  "CallContract",
	}), func(i *sdkpb.CapabilityResponse) (*evmpb.CallContractReply, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &evmpb.CallContractReply{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *EVM) FilterLogs(runtime sdk.DonRuntime, input *evmpb.FilterLogsRequest) sdk.Promise[*evmpb.FilterLogsReply] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*evmpb.FilterLogsReply](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      "mainnet-evm@1.0.0",
		Payload: wrapped,
		Method:  "FilterLogs",
	}), func(i *sdkpb.CapabilityResponse) (*evmpb.FilterLogsReply, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &evmpb.FilterLogsReply{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *EVM) BalanceAt(runtime sdk.DonRuntime, input *evmpb.BalanceAtRequest) sdk.Promise[*evmpb.BalanceAtReply] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*evmpb.BalanceAtReply](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      "mainnet-evm@1.0.0",
		Payload: wrapped,
		Method:  "BalanceAt",
	}), func(i *sdkpb.CapabilityResponse) (*evmpb.BalanceAtReply, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &evmpb.BalanceAtReply{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *EVM) EstimateGas(runtime sdk.DonRuntime, input *evmpb.EstimateGasRequest) sdk.Promise[*evmpb.EstimateGasReply] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*evmpb.EstimateGasReply](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      "mainnet-evm@1.0.0",
		Payload: wrapped,
		Method:  "EstimateGas",
	}), func(i *sdkpb.CapabilityResponse) (*evmpb.EstimateGasReply, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &evmpb.EstimateGasReply{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *EVM) GetTransactionByHash(runtime sdk.DonRuntime, input *evmpb.GetTransactionByHashRequest) sdk.Promise[*evmpb.GetTransactionByHashReply] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*evmpb.GetTransactionByHashReply](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      "mainnet-evm@1.0.0",
		Payload: wrapped,
		Method:  "GetTransactionByHash",
	}), func(i *sdkpb.CapabilityResponse) (*evmpb.GetTransactionByHashReply, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &evmpb.GetTransactionByHashReply{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *EVM) GetTransactionReceipt(runtime sdk.DonRuntime, input *evmpb.GetTransactionReceiptRequest) sdk.Promise[*evmpb.GetTransactionReceiptReply] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*evmpb.GetTransactionReceiptReply](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      "mainnet-evm@1.0.0",
		Payload: wrapped,
		Method:  "GetTransactionReceipt",
	}), func(i *sdkpb.CapabilityResponse) (*evmpb.GetTransactionReceiptReply, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &evmpb.GetTransactionReceiptReply{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *EVM) LatestAndFinalizedHead(runtime sdk.DonRuntime, input *emptypb.Empty) sdk.Promise[*evmpb.LatestAndFinalizedHeadReply] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*evmpb.LatestAndFinalizedHeadReply](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      "mainnet-evm@1.0.0",
		Payload: wrapped,
		Method:  "LatestAndFinalizedHead",
	}), func(i *sdkpb.CapabilityResponse) (*evmpb.LatestAndFinalizedHeadReply, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &evmpb.LatestAndFinalizedHeadReply{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *EVM) QueryTrackedLogs(runtime sdk.DonRuntime, input *evmpb.QueryTrackedLogsRequest) sdk.Promise[*evmpb.QueryTrackedLogsReply] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*evmpb.QueryTrackedLogsReply](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      "mainnet-evm@1.0.0",
		Payload: wrapped,
		Method:  "QueryTrackedLogs",
	}), func(i *sdkpb.CapabilityResponse) (*evmpb.QueryTrackedLogsReply, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &evmpb.QueryTrackedLogsReply{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *EVM) RegisterLogTracking(runtime sdk.DonRuntime, input *evmpb.RegisterLogTrackingRequest) sdk.Promise[*emptypb.Empty] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*emptypb.Empty](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      "mainnet-evm@1.0.0",
		Payload: wrapped,
		Method:  "RegisterLogTracking",
	}), func(i *sdkpb.CapabilityResponse) (*emptypb.Empty, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &emptypb.Empty{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *EVM) UnregisterLogTracking(runtime sdk.DonRuntime, input *evmpb.UnregisterLogTrackingRequest) sdk.Promise[*emptypb.Empty] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*emptypb.Empty](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      "mainnet-evm@1.0.0",
		Payload: wrapped,
		Method:  "UnregisterLogTracking",
	}), func(i *sdkpb.CapabilityResponse) (*emptypb.Empty, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &emptypb.Empty{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}
