// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: ton.proto

package ton

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TON_GetMasterchainInfo_FullMethodName = "/loop.ton.TON/GetMasterchainInfo"
	TON_GetBlockData_FullMethodName       = "/loop.ton.TON/GetBlockData"
	TON_GetAccountBalance_FullMethodName  = "/loop.ton.TON/GetAccountBalance"
	TON_SendTx_FullMethodName             = "/loop.ton.TON/SendTx"
	TON_GetTxStatus_FullMethodName        = "/loop.ton.TON/GetTxStatus"
	TON_GetTxExecutionFees_FullMethodName = "/loop.ton.TON/GetTxExecutionFees"
	TON_HasFilter_FullMethodName          = "/loop.ton.TON/HasFilter"
	TON_RegisterFilter_FullMethodName     = "/loop.ton.TON/RegisterFilter"
	TON_UnregisterFilter_FullMethodName   = "/loop.ton.TON/UnregisterFilter"
)

// TONClient is the client API for TON service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Main TON service
type TONClient interface {
	// LiteClient
	GetMasterchainInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BlockIDExt, error)
	GetBlockData(ctx context.Context, in *GetBlockDataRequest, opts ...grpc.CallOption) (*Block, error)
	GetAccountBalance(ctx context.Context, in *GetAccountBalanceRequest, opts ...grpc.CallOption) (*Balance, error)
	// Transaction Management (TXM)
	SendTx(ctx context.Context, in *SendTxRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetTxStatus(ctx context.Context, in *GetTxStatusRequest, opts ...grpc.CallOption) (*GetTxStatusReply, error)
	GetTxExecutionFees(ctx context.Context, in *GetTxExecutionFeesRequest, opts ...grpc.CallOption) (*GetTxExecutionFeesReply, error)
	// Log Poller
	HasFilter(ctx context.Context, in *HasFilterRequest, opts ...grpc.CallOption) (*HasFilterReply, error)
	RegisterFilter(ctx context.Context, in *RegisterFilterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnregisterFilter(ctx context.Context, in *UnregisterFilterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type tONClient struct {
	cc grpc.ClientConnInterface
}

func NewTONClient(cc grpc.ClientConnInterface) TONClient {
	return &tONClient{cc}
}

func (c *tONClient) GetMasterchainInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BlockIDExt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockIDExt)
	err := c.cc.Invoke(ctx, TON_GetMasterchainInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tONClient) GetBlockData(ctx context.Context, in *GetBlockDataRequest, opts ...grpc.CallOption) (*Block, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Block)
	err := c.cc.Invoke(ctx, TON_GetBlockData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tONClient) GetAccountBalance(ctx context.Context, in *GetAccountBalanceRequest, opts ...grpc.CallOption) (*Balance, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Balance)
	err := c.cc.Invoke(ctx, TON_GetAccountBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tONClient) SendTx(ctx context.Context, in *SendTxRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TON_SendTx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tONClient) GetTxStatus(ctx context.Context, in *GetTxStatusRequest, opts ...grpc.CallOption) (*GetTxStatusReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTxStatusReply)
	err := c.cc.Invoke(ctx, TON_GetTxStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tONClient) GetTxExecutionFees(ctx context.Context, in *GetTxExecutionFeesRequest, opts ...grpc.CallOption) (*GetTxExecutionFeesReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTxExecutionFeesReply)
	err := c.cc.Invoke(ctx, TON_GetTxExecutionFees_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tONClient) HasFilter(ctx context.Context, in *HasFilterRequest, opts ...grpc.CallOption) (*HasFilterReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HasFilterReply)
	err := c.cc.Invoke(ctx, TON_HasFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tONClient) RegisterFilter(ctx context.Context, in *RegisterFilterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TON_RegisterFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tONClient) UnregisterFilter(ctx context.Context, in *UnregisterFilterRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TON_UnregisterFilter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TONServer is the server API for TON service.
// All implementations must embed UnimplementedTONServer
// for forward compatibility.
//
// Main TON service
type TONServer interface {
	// LiteClient
	GetMasterchainInfo(context.Context, *emptypb.Empty) (*BlockIDExt, error)
	GetBlockData(context.Context, *GetBlockDataRequest) (*Block, error)
	GetAccountBalance(context.Context, *GetAccountBalanceRequest) (*Balance, error)
	// Transaction Management (TXM)
	SendTx(context.Context, *SendTxRequest) (*emptypb.Empty, error)
	GetTxStatus(context.Context, *GetTxStatusRequest) (*GetTxStatusReply, error)
	GetTxExecutionFees(context.Context, *GetTxExecutionFeesRequest) (*GetTxExecutionFeesReply, error)
	// Log Poller
	HasFilter(context.Context, *HasFilterRequest) (*HasFilterReply, error)
	RegisterFilter(context.Context, *RegisterFilterRequest) (*emptypb.Empty, error)
	UnregisterFilter(context.Context, *UnregisterFilterRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTONServer()
}

// UnimplementedTONServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTONServer struct{}

func (UnimplementedTONServer) GetMasterchainInfo(context.Context, *emptypb.Empty) (*BlockIDExt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMasterchainInfo not implemented")
}
func (UnimplementedTONServer) GetBlockData(context.Context, *GetBlockDataRequest) (*Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockData not implemented")
}
func (UnimplementedTONServer) GetAccountBalance(context.Context, *GetAccountBalanceRequest) (*Balance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountBalance not implemented")
}
func (UnimplementedTONServer) SendTx(context.Context, *SendTxRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTx not implemented")
}
func (UnimplementedTONServer) GetTxStatus(context.Context, *GetTxStatusRequest) (*GetTxStatusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxStatus not implemented")
}
func (UnimplementedTONServer) GetTxExecutionFees(context.Context, *GetTxExecutionFeesRequest) (*GetTxExecutionFeesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTxExecutionFees not implemented")
}
func (UnimplementedTONServer) HasFilter(context.Context, *HasFilterRequest) (*HasFilterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasFilter not implemented")
}
func (UnimplementedTONServer) RegisterFilter(context.Context, *RegisterFilterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterFilter not implemented")
}
func (UnimplementedTONServer) UnregisterFilter(context.Context, *UnregisterFilterRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterFilter not implemented")
}
func (UnimplementedTONServer) mustEmbedUnimplementedTONServer() {}
func (UnimplementedTONServer) testEmbeddedByValue()             {}

// UnsafeTONServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TONServer will
// result in compilation errors.
type UnsafeTONServer interface {
	mustEmbedUnimplementedTONServer()
}

func RegisterTONServer(s grpc.ServiceRegistrar, srv TONServer) {
	// If the following call pancis, it indicates UnimplementedTONServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TON_ServiceDesc, srv)
}

func _TON_GetMasterchainInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TONServer).GetMasterchainInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TON_GetMasterchainInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TONServer).GetMasterchainInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TON_GetBlockData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TONServer).GetBlockData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TON_GetBlockData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TONServer).GetBlockData(ctx, req.(*GetBlockDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TON_GetAccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TONServer).GetAccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TON_GetAccountBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TONServer).GetAccountBalance(ctx, req.(*GetAccountBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TON_SendTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TONServer).SendTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TON_SendTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TONServer).SendTx(ctx, req.(*SendTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TON_GetTxStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TONServer).GetTxStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TON_GetTxStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TONServer).GetTxStatus(ctx, req.(*GetTxStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TON_GetTxExecutionFees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTxExecutionFeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TONServer).GetTxExecutionFees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TON_GetTxExecutionFees_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TONServer).GetTxExecutionFees(ctx, req.(*GetTxExecutionFeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TON_HasFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TONServer).HasFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TON_HasFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TONServer).HasFilter(ctx, req.(*HasFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TON_RegisterFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TONServer).RegisterFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TON_RegisterFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TONServer).RegisterFilter(ctx, req.(*RegisterFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TON_UnregisterFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TONServer).UnregisterFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TON_UnregisterFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TONServer).UnregisterFilter(ctx, req.(*UnregisterFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TON_ServiceDesc is the grpc.ServiceDesc for TON service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TON_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.ton.TON",
	HandlerType: (*TONServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMasterchainInfo",
			Handler:    _TON_GetMasterchainInfo_Handler,
		},
		{
			MethodName: "GetBlockData",
			Handler:    _TON_GetBlockData_Handler,
		},
		{
			MethodName: "GetAccountBalance",
			Handler:    _TON_GetAccountBalance_Handler,
		},
		{
			MethodName: "SendTx",
			Handler:    _TON_SendTx_Handler,
		},
		{
			MethodName: "GetTxStatus",
			Handler:    _TON_GetTxStatus_Handler,
		},
		{
			MethodName: "GetTxExecutionFees",
			Handler:    _TON_GetTxExecutionFees_Handler,
		},
		{
			MethodName: "HasFilter",
			Handler:    _TON_HasFilter_Handler,
		},
		{
			MethodName: "RegisterFilter",
			Handler:    _TON_RegisterFilter_Handler,
		},
		{
			MethodName: "UnregisterFilter",
			Handler:    _TON_UnregisterFilter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ton.proto",
}
