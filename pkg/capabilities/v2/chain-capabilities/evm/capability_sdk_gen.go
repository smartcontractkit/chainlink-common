// Code generated by github.com/smartcontractkit/chainlink-common/pkg/capabilities/v2/protoc, DO NOT EDIT.

package evm

import (
	"errors"
	"fmt"

	"google.golang.org/protobuf/types/known/anypb"

	"google.golang.org/protobuf/types/known/emptypb"

	"github.com/smartcontractkit/chainlink-common/pkg/chains/evm"
	"github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk/v2"
	sdkpb "github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk/v2/pb"
)

type Client struct {
	// TODO: https://smartcontract-it.atlassian.net/browse/CAPPL-799 allow defaults for capabilities
	ChainSelector uint32
}

func (c *Client) CallContract(runtime sdk.Runtime, input *evm.CallContractRequest) sdk.Promise[*evm.CallContractReply] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*evm.CallContractReply](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      fmt.Sprintf("evm-%v@1.0.0", c.ChainSelector),
		Payload: wrapped,
		Method:  "CallContract",
	}), func(i *sdkpb.CapabilityResponse) (*evm.CallContractReply, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &evm.CallContractReply{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *Client) FilterLogs(runtime sdk.Runtime, input *evm.FilterLogsRequest) sdk.Promise[*evm.FilterLogsReply] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*evm.FilterLogsReply](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      fmt.Sprintf("evm-%v@1.0.0", c.ChainSelector),
		Payload: wrapped,
		Method:  "FilterLogs",
	}), func(i *sdkpb.CapabilityResponse) (*evm.FilterLogsReply, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &evm.FilterLogsReply{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *Client) BalanceAt(runtime sdk.Runtime, input *evm.BalanceAtRequest) sdk.Promise[*evm.BalanceAtReply] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*evm.BalanceAtReply](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      fmt.Sprintf("evm-%v@1.0.0", c.ChainSelector),
		Payload: wrapped,
		Method:  "BalanceAt",
	}), func(i *sdkpb.CapabilityResponse) (*evm.BalanceAtReply, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &evm.BalanceAtReply{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *Client) EstimateGas(runtime sdk.Runtime, input *evm.EstimateGasRequest) sdk.Promise[*evm.EstimateGasReply] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*evm.EstimateGasReply](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      fmt.Sprintf("evm-%v@1.0.0", c.ChainSelector),
		Payload: wrapped,
		Method:  "EstimateGas",
	}), func(i *sdkpb.CapabilityResponse) (*evm.EstimateGasReply, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &evm.EstimateGasReply{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *Client) GetTransactionByHash(runtime sdk.Runtime, input *evm.GetTransactionByHashRequest) sdk.Promise[*evm.GetTransactionByHashReply] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*evm.GetTransactionByHashReply](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      fmt.Sprintf("evm-%v@1.0.0", c.ChainSelector),
		Payload: wrapped,
		Method:  "GetTransactionByHash",
	}), func(i *sdkpb.CapabilityResponse) (*evm.GetTransactionByHashReply, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &evm.GetTransactionByHashReply{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *Client) GetTransactionReceipt(runtime sdk.Runtime, input *evm.GetTransactionReceiptRequest) sdk.Promise[*evm.GetTransactionReceiptReply] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*evm.GetTransactionReceiptReply](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      fmt.Sprintf("evm-%v@1.0.0", c.ChainSelector),
		Payload: wrapped,
		Method:  "GetTransactionReceipt",
	}), func(i *sdkpb.CapabilityResponse) (*evm.GetTransactionReceiptReply, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &evm.GetTransactionReceiptReply{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *Client) LatestAndFinalizedHead(runtime sdk.Runtime, input *emptypb.Empty) sdk.Promise[*evm.LatestAndFinalizedHeadReply] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*evm.LatestAndFinalizedHeadReply](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      fmt.Sprintf("evm-%v@1.0.0", c.ChainSelector),
		Payload: wrapped,
		Method:  "LatestAndFinalizedHead",
	}), func(i *sdkpb.CapabilityResponse) (*evm.LatestAndFinalizedHeadReply, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &evm.LatestAndFinalizedHeadReply{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *Client) QueryTrackedLogs(runtime sdk.Runtime, input *evm.QueryTrackedLogsRequest) sdk.Promise[*evm.QueryTrackedLogsReply] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*evm.QueryTrackedLogsReply](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      fmt.Sprintf("evm-%v@1.0.0", c.ChainSelector),
		Payload: wrapped,
		Method:  "QueryTrackedLogs",
	}), func(i *sdkpb.CapabilityResponse) (*evm.QueryTrackedLogsReply, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &evm.QueryTrackedLogsReply{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *Client) RegisterLogTracking(runtime sdk.Runtime, input *evm.RegisterLogTrackingRequest) sdk.Promise[*emptypb.Empty] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*emptypb.Empty](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      fmt.Sprintf("evm-%v@1.0.0", c.ChainSelector),
		Payload: wrapped,
		Method:  "RegisterLogTracking",
	}), func(i *sdkpb.CapabilityResponse) (*emptypb.Empty, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &emptypb.Empty{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *Client) UnregisterLogTracking(runtime sdk.Runtime, input *evm.UnregisterLogTrackingRequest) sdk.Promise[*emptypb.Empty] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*emptypb.Empty](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      fmt.Sprintf("evm-%v@1.0.0", c.ChainSelector),
		Payload: wrapped,
		Method:  "UnregisterLogTracking",
	}), func(i *sdkpb.CapabilityResponse) (*emptypb.Empty, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &emptypb.Empty{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *Client) WriteReport(runtime sdk.Runtime, input *evm.WriteReportRequest) sdk.Promise[*evm.WriteReportReply] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*evm.WriteReportReply](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      fmt.Sprintf("evm-%v@1.0.0", c.ChainSelector),
		Payload: wrapped,
		Method:  "WriteReport",
	}), func(i *sdkpb.CapabilityResponse) (*evm.WriteReportReply, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &evm.WriteReportReply{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c Client) LogTrigger(config *FilterLogTriggerRequest) sdk.Trigger[*evm.Log, *evm.Log] {
	configAny, _ := anypb.New(config)
	return &clientLogTrigger{
		config: configAny,
		Client: c,
	}
}

type clientLogTrigger struct {
	config *anypb.Any
	Client
}

func (c *clientLogTrigger) Adapt(t *evm.Log) (*evm.Log, error) {
	return t, nil
}

func (*clientLogTrigger) IsTrigger() {}

func (*clientLogTrigger) NewT() *evm.Log {
	return &evm.Log{}
}

func (c *clientLogTrigger) CapabilityID() string {
	return fmt.Sprintf("evm-%v@1.0.0", c.ChainSelector)
}

func (*clientLogTrigger) Method() string {
	return "LogTrigger"
}

func (t *clientLogTrigger) ConfigAsAny() *anypb.Any {
	return t.config
}
