// Code generated by github.com/smartcontractkit/chainlink-common/pkg/capabilities/v2/protoc, DO NOT EDIT.

package evmmock

import (
	"context"
	"fmt"
	"testing"

	"google.golang.org/protobuf/types/known/anypb"

	"google.golang.org/protobuf/types/known/emptypb"

	"github.com/smartcontractkit/chainlink-common/pkg/loop/chain-capabilities/evm"

	"github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk/v2/pb"
	"github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk/v2/testutils"
)

// avoid unused imports
var _ = testutils.Registry{}

func NewEVMCapabilityCapability(t testing.TB) (*EVMCapabilityCapability, error) {
	c := &EVMCapabilityCapability{}
	registry := testutils.GetRegistry(t)
	err := registry.RegisterCapability(c)
	return c, err
}

type EVMCapabilityCapability struct {
	// TODO: https://smartcontract-it.atlassian.net/browse/CAPPL-799 add the default to the call
	CallContract func(ctx context.Context, input *evm.CallContractRequest) (*evm.CallContractReply, error)
	// TODO: https://smartcontract-it.atlassian.net/browse/CAPPL-799 add the default to the call
	FilterLogs func(ctx context.Context, input *evm.FilterLogsRequest) (*evm.FilterLogsReply, error)
	// TODO: https://smartcontract-it.atlassian.net/browse/CAPPL-799 add the default to the call
	BalanceAt func(ctx context.Context, input *evm.BalanceAtRequest) (*evm.BalanceAtReply, error)
	// TODO: https://smartcontract-it.atlassian.net/browse/CAPPL-799 add the default to the call
	EstimateGas func(ctx context.Context, input *evm.EstimateGasRequest) (*evm.EstimateGasReply, error)
	// TODO: https://smartcontract-it.atlassian.net/browse/CAPPL-799 add the default to the call
	GetTransactionByHash func(ctx context.Context, input *evm.GetTransactionByHashRequest) (*evm.GetTransactionByHashReply, error)
	// TODO: https://smartcontract-it.atlassian.net/browse/CAPPL-799 add the default to the call
	GetTransactionReceipt func(ctx context.Context, input *evm.GetReceiptRequest) (*evm.GetReceiptReply, error)
	// TODO: https://smartcontract-it.atlassian.net/browse/CAPPL-799 add the default to the call
	LatestAndFinalizedHead func(ctx context.Context, input *emptypb.Empty) (*evm.LatestAndFinalizedHeadReply, error)
	// TODO: https://smartcontract-it.atlassian.net/browse/CAPPL-799 add the default to the call
	QueryTrackedLogs func(ctx context.Context, input *evm.QueryTrackedLogsRequest) (*evm.QueryTrackedLogsReply, error)
	// TODO: https://smartcontract-it.atlassian.net/browse/CAPPL-799 add the default to the call
	RegisterLogTracking func(ctx context.Context, input *evm.RegisterLogTrackingRequest) (*emptypb.Empty, error)
	// TODO: https://smartcontract-it.atlassian.net/browse/CAPPL-799 add the default to the call
	UnregisterLogTracking func(ctx context.Context, input *evm.UnregisterLogTrackingRequest) (*emptypb.Empty, error)
}

func (cap *EVMCapabilityCapability) Invoke(ctx context.Context, request *pb.CapabilityRequest) *pb.CapabilityResponse {
	capResp := &pb.CapabilityResponse{}
	switch request.Method {
	case "CallContract":
		input := &evm.CallContractRequest{}
		if err := request.Payload.UnmarshalTo(input); err != nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
			break
		}

		if cap.CallContract == nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: "no stub provided for CallContract"}
			break
		}
		resp, err := cap.CallContract(ctx, input)
		if err != nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
		} else {
			payload, err := anypb.New(resp)
			if err == nil {
				capResp.Response = &pb.CapabilityResponse_Payload{Payload: payload}
			} else {
				capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
			}
		}
	case "FilterLogs":
		input := &evm.FilterLogsRequest{}
		if err := request.Payload.UnmarshalTo(input); err != nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
			break
		}

		if cap.FilterLogs == nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: "no stub provided for FilterLogs"}
			break
		}
		resp, err := cap.FilterLogs(ctx, input)
		if err != nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
		} else {
			payload, err := anypb.New(resp)
			if err == nil {
				capResp.Response = &pb.CapabilityResponse_Payload{Payload: payload}
			} else {
				capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
			}
		}
	case "BalanceAt":
		input := &evm.BalanceAtRequest{}
		if err := request.Payload.UnmarshalTo(input); err != nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
			break
		}

		if cap.BalanceAt == nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: "no stub provided for BalanceAt"}
			break
		}
		resp, err := cap.BalanceAt(ctx, input)
		if err != nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
		} else {
			payload, err := anypb.New(resp)
			if err == nil {
				capResp.Response = &pb.CapabilityResponse_Payload{Payload: payload}
			} else {
				capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
			}
		}
	case "EstimateGas":
		input := &evm.EstimateGasRequest{}
		if err := request.Payload.UnmarshalTo(input); err != nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
			break
		}

		if cap.EstimateGas == nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: "no stub provided for EstimateGas"}
			break
		}
		resp, err := cap.EstimateGas(ctx, input)
		if err != nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
		} else {
			payload, err := anypb.New(resp)
			if err == nil {
				capResp.Response = &pb.CapabilityResponse_Payload{Payload: payload}
			} else {
				capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
			}
		}
	case "GetTransactionByHash":
		input := &evm.GetTransactionByHashRequest{}
		if err := request.Payload.UnmarshalTo(input); err != nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
			break
		}

		if cap.GetTransactionByHash == nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: "no stub provided for GetTransactionByHash"}
			break
		}
		resp, err := cap.GetTransactionByHash(ctx, input)
		if err != nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
		} else {
			payload, err := anypb.New(resp)
			if err == nil {
				capResp.Response = &pb.CapabilityResponse_Payload{Payload: payload}
			} else {
				capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
			}
		}
	case "GetTransactionReceipt":
		input := &evm.GetReceiptRequest{}
		if err := request.Payload.UnmarshalTo(input); err != nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
			break
		}

		if cap.GetTransactionReceipt == nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: "no stub provided for GetTransactionReceipt"}
			break
		}
		resp, err := cap.GetTransactionReceipt(ctx, input)
		if err != nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
		} else {
			payload, err := anypb.New(resp)
			if err == nil {
				capResp.Response = &pb.CapabilityResponse_Payload{Payload: payload}
			} else {
				capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
			}
		}
	case "LatestAndFinalizedHead":
		input := &emptypb.Empty{}
		if err := request.Payload.UnmarshalTo(input); err != nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
			break
		}

		if cap.LatestAndFinalizedHead == nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: "no stub provided for LatestAndFinalizedHead"}
			break
		}
		resp, err := cap.LatestAndFinalizedHead(ctx, input)
		if err != nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
		} else {
			payload, err := anypb.New(resp)
			if err == nil {
				capResp.Response = &pb.CapabilityResponse_Payload{Payload: payload}
			} else {
				capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
			}
		}
	case "QueryTrackedLogs":
		input := &evm.QueryTrackedLogsRequest{}
		if err := request.Payload.UnmarshalTo(input); err != nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
			break
		}

		if cap.QueryTrackedLogs == nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: "no stub provided for QueryTrackedLogs"}
			break
		}
		resp, err := cap.QueryTrackedLogs(ctx, input)
		if err != nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
		} else {
			payload, err := anypb.New(resp)
			if err == nil {
				capResp.Response = &pb.CapabilityResponse_Payload{Payload: payload}
			} else {
				capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
			}
		}
	case "RegisterLogTracking":
		input := &evm.RegisterLogTrackingRequest{}
		if err := request.Payload.UnmarshalTo(input); err != nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
			break
		}

		if cap.RegisterLogTracking == nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: "no stub provided for RegisterLogTracking"}
			break
		}
		resp, err := cap.RegisterLogTracking(ctx, input)
		if err != nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
		} else {
			payload, err := anypb.New(resp)
			if err == nil {
				capResp.Response = &pb.CapabilityResponse_Payload{Payload: payload}
			} else {
				capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
			}
		}
	case "UnregisterLogTracking":
		input := &evm.UnregisterLogTrackingRequest{}
		if err := request.Payload.UnmarshalTo(input); err != nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
			break
		}

		if cap.UnregisterLogTracking == nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: "no stub provided for UnregisterLogTracking"}
			break
		}
		resp, err := cap.UnregisterLogTracking(ctx, input)
		if err != nil {
			capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
		} else {
			payload, err := anypb.New(resp)
			if err == nil {
				capResp.Response = &pb.CapabilityResponse_Payload{Payload: payload}
			} else {
				capResp.Response = &pb.CapabilityResponse_Error{Error: err.Error()}
			}
		}
	default:
		capResp.Response = &pb.CapabilityResponse_Error{Error: fmt.Sprintf("method %s not found", request.Method)}
	}
	return capResp
}

func (cap *EVMCapabilityCapability) InvokeTrigger(ctx context.Context, request *pb.TriggerSubscription) (*pb.Trigger, error) {
	return nil, fmt.Errorf("method %s not found", request.Method)
}

func (cap *EVMCapabilityCapability) ID() string {
	return "mainnet-evm@1.0.0"
}
