// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: commitstore.proto

package ccippb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// GetExpectedNextSequenceNumberResponse returns the expected next sequence number. It is a gRPC adapter to the return values of
// [github.com/smartcontractkit/chainlink-common/chainlink-common/pkg/types/ccip/CommitStoreReader.GetExpectedNextSequenceNumber]
type GetExpectedNextSequenceNumberResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SequenceNumber uint64                 `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetExpectedNextSequenceNumberResponse) Reset() {
	*x = GetExpectedNextSequenceNumberResponse{}
	mi := &file_commitstore_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetExpectedNextSequenceNumberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetExpectedNextSequenceNumberResponse) ProtoMessage() {}

func (x *GetExpectedNextSequenceNumberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commitstore_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetExpectedNextSequenceNumberResponse.ProtoReflect.Descriptor instead.
func (*GetExpectedNextSequenceNumberResponse) Descriptor() ([]byte, []int) {
	return file_commitstore_proto_rawDescGZIP(), []int{0}
}

func (x *GetExpectedNextSequenceNumberResponse) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

// GetLatestPriceEpochAndRoundResponse returns the latest price epoch and round. It is a gRPC adapter to the return values of
// [github.com/smartcontractkit/chainlink-common/chainlink-common/pkg/types/ccip/CommitStoreReader.GetLatestPriceEpochAndRound]
type GetLatestPriceEpochAndRoundResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EpochAndRound uint64                 `protobuf:"varint,1,opt,name=epoch_and_round,json=epochAndRound,proto3" json:"epoch_and_round,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLatestPriceEpochAndRoundResponse) Reset() {
	*x = GetLatestPriceEpochAndRoundResponse{}
	mi := &file_commitstore_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLatestPriceEpochAndRoundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestPriceEpochAndRoundResponse) ProtoMessage() {}

func (x *GetLatestPriceEpochAndRoundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commitstore_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestPriceEpochAndRoundResponse.ProtoReflect.Descriptor instead.
func (*GetLatestPriceEpochAndRoundResponse) Descriptor() ([]byte, []int) {
	return file_commitstore_proto_rawDescGZIP(), []int{1}
}

func (x *GetLatestPriceEpochAndRoundResponse) GetEpochAndRound() uint64 {
	if x != nil {
		return x.EpochAndRound
	}
	return 0
}

// GetCommitReportMatchingSequenceNumberRequest is a gRPC adapter to the input values of
// [github.com/smartcontractkit/chainlink-common/chainlink-common/pkg/types/ccip/CommitStoreReader.GetCommitReportMatchingSeqNum]
type GetCommitReportMatchingSequenceNumberRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	SequenceNumber uint64                 `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	Confirmations  uint64                 `protobuf:"varint,2,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetCommitReportMatchingSequenceNumberRequest) Reset() {
	*x = GetCommitReportMatchingSequenceNumberRequest{}
	mi := &file_commitstore_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommitReportMatchingSequenceNumberRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommitReportMatchingSequenceNumberRequest) ProtoMessage() {}

func (x *GetCommitReportMatchingSequenceNumberRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commitstore_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommitReportMatchingSequenceNumberRequest.ProtoReflect.Descriptor instead.
func (*GetCommitReportMatchingSequenceNumberRequest) Descriptor() ([]byte, []int) {
	return file_commitstore_proto_rawDescGZIP(), []int{2}
}

func (x *GetCommitReportMatchingSequenceNumberRequest) GetSequenceNumber() uint64 {
	if x != nil {
		return x.SequenceNumber
	}
	return 0
}

func (x *GetCommitReportMatchingSequenceNumberRequest) GetConfirmations() uint64 {
	if x != nil {
		return x.Confirmations
	}
	return 0
}

// GetCommitReportMatchingSequenceNumberResponse returns the commit store reports matching the sequence number. It is a gRPC adapter to the return values of
// [github.com/smartcontractkit/chainlink-common/chainlink-common/pkg/types/ccip/CommitStoreReader.GetCommitReportMatchingSeqNum]
type GetCommitReportMatchingSequenceNumberResponse struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Reports       []*CommitStoreReportWithTxMeta `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCommitReportMatchingSequenceNumberResponse) Reset() {
	*x = GetCommitReportMatchingSequenceNumberResponse{}
	mi := &file_commitstore_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommitReportMatchingSequenceNumberResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommitReportMatchingSequenceNumberResponse) ProtoMessage() {}

func (x *GetCommitReportMatchingSequenceNumberResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commitstore_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommitReportMatchingSequenceNumberResponse.ProtoReflect.Descriptor instead.
func (*GetCommitReportMatchingSequenceNumberResponse) Descriptor() ([]byte, []int) {
	return file_commitstore_proto_rawDescGZIP(), []int{3}
}

func (x *GetCommitReportMatchingSequenceNumberResponse) GetReports() []*CommitStoreReportWithTxMeta {
	if x != nil {
		return x.Reports
	}
	return nil
}

// GetAcceptedCommitReportsGteTimestampRequest is a gRPC adapter to the input values of
// [github.com/smartcontractkit/chainlink-common/chainlink-common/pkg/types/ccip/CommitStoreReader.GetAcceptedCommitReportsGteTimestamp]
type GetAcceptedCommitReportsGteTimestampRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Timestamp     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Confirmations uint64                 `protobuf:"varint,2,opt,name=confirmations,proto3" json:"confirmations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAcceptedCommitReportsGteTimestampRequest) Reset() {
	*x = GetAcceptedCommitReportsGteTimestampRequest{}
	mi := &file_commitstore_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAcceptedCommitReportsGteTimestampRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAcceptedCommitReportsGteTimestampRequest) ProtoMessage() {}

func (x *GetAcceptedCommitReportsGteTimestampRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commitstore_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAcceptedCommitReportsGteTimestampRequest.ProtoReflect.Descriptor instead.
func (*GetAcceptedCommitReportsGteTimestampRequest) Descriptor() ([]byte, []int) {
	return file_commitstore_proto_rawDescGZIP(), []int{4}
}

func (x *GetAcceptedCommitReportsGteTimestampRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *GetAcceptedCommitReportsGteTimestampRequest) GetConfirmations() uint64 {
	if x != nil {
		return x.Confirmations
	}
	return 0
}

// GetAcceptedCommitReportsGteTimestampResponse returns the accepted commit store reports matching the timestamp. It is a gRPC adapter to the return values of
// [github.com/smartcontractkit/chainlink-common/chainlink-common/pkg/types/ccip/CommitStoreReader.GetAcceptedCommitReportsGteTimestamp]
type GetAcceptedCommitReportsGteTimestampResponse struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Reports       []*CommitStoreReportWithTxMeta `protobuf:"bytes,1,rep,name=reports,proto3" json:"reports,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAcceptedCommitReportsGteTimestampResponse) Reset() {
	*x = GetAcceptedCommitReportsGteTimestampResponse{}
	mi := &file_commitstore_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAcceptedCommitReportsGteTimestampResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAcceptedCommitReportsGteTimestampResponse) ProtoMessage() {}

func (x *GetAcceptedCommitReportsGteTimestampResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commitstore_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAcceptedCommitReportsGteTimestampResponse.ProtoReflect.Descriptor instead.
func (*GetAcceptedCommitReportsGteTimestampResponse) Descriptor() ([]byte, []int) {
	return file_commitstore_proto_rawDescGZIP(), []int{5}
}

func (x *GetAcceptedCommitReportsGteTimestampResponse) GetReports() []*CommitStoreReportWithTxMeta {
	if x != nil {
		return x.Reports
	}
	return nil
}

// IsDownResponse returns whether the commit store is down. It is a gRPC adapter to the return values of
// [github.com/smartcontractkit/chainlink-common/chainlink-common/pkg/types/ccip/CommitStoreReader.IsDown]
type IsDownResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsDown        bool                   `protobuf:"varint,1,opt,name=is_down,json=isDown,proto3" json:"is_down,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsDownResponse) Reset() {
	*x = IsDownResponse{}
	mi := &file_commitstore_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsDownResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsDownResponse) ProtoMessage() {}

func (x *IsDownResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commitstore_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsDownResponse.ProtoReflect.Descriptor instead.
func (*IsDownResponse) Descriptor() ([]byte, []int) {
	return file_commitstore_proto_rawDescGZIP(), []int{6}
}

func (x *IsDownResponse) GetIsDown() bool {
	if x != nil {
		return x.IsDown
	}
	return false
}

// IsBlessedRequest is a gRPC adapter to the input values of
// [github.com/smartcontractkit/chainlink-common/chainlink-common/pkg/types/ccip/CommitStoreReader.IsBlessed]
type IsBlessedRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Root          []byte                 `protobuf:"bytes,1,opt,name=root,proto3" json:"root,omitempty"` // [32]byte
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsBlessedRequest) Reset() {
	*x = IsBlessedRequest{}
	mi := &file_commitstore_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsBlessedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsBlessedRequest) ProtoMessage() {}

func (x *IsBlessedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commitstore_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsBlessedRequest.ProtoReflect.Descriptor instead.
func (*IsBlessedRequest) Descriptor() ([]byte, []int) {
	return file_commitstore_proto_rawDescGZIP(), []int{7}
}

func (x *IsBlessedRequest) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

// IsBlessedResponse returns whether the commit store is blessed. It is a gRPC adapter to the return values of
// [github.com/smartcontractkit/chainlink-common/chainlink-common/pkg/types/ccip/CommitStoreReader.IsBlessed]
type IsBlessedResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsBlessed     bool                   `protobuf:"varint,1,opt,name=is_blessed,json=isBlessed,proto3" json:"is_blessed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsBlessedResponse) Reset() {
	*x = IsBlessedResponse{}
	mi := &file_commitstore_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsBlessedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsBlessedResponse) ProtoMessage() {}

func (x *IsBlessedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commitstore_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsBlessedResponse.ProtoReflect.Descriptor instead.
func (*IsBlessedResponse) Descriptor() ([]byte, []int) {
	return file_commitstore_proto_rawDescGZIP(), []int{8}
}

func (x *IsBlessedResponse) GetIsBlessed() bool {
	if x != nil {
		return x.IsBlessed
	}
	return false
}

// CommitStoreChangeConfigRequest is a gRPC adapter to the input values of
// [github.com/smartcontractkit/chainlink-common/chainlink-common/pkg/types/ccip/CommitStoreReader.ChangeConfig]
type CommitStoreChangeConfigRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OnchainConfig  []byte                 `protobuf:"bytes,1,opt,name=onchain_config,json=onchainConfig,proto3" json:"onchain_config,omitempty"`
	OffchainConfig []byte                 `protobuf:"bytes,2,opt,name=offchain_config,json=offchainConfig,proto3" json:"offchain_config,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CommitStoreChangeConfigRequest) Reset() {
	*x = CommitStoreChangeConfigRequest{}
	mi := &file_commitstore_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitStoreChangeConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitStoreChangeConfigRequest) ProtoMessage() {}

func (x *CommitStoreChangeConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commitstore_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitStoreChangeConfigRequest.ProtoReflect.Descriptor instead.
func (*CommitStoreChangeConfigRequest) Descriptor() ([]byte, []int) {
	return file_commitstore_proto_rawDescGZIP(), []int{9}
}

func (x *CommitStoreChangeConfigRequest) GetOnchainConfig() []byte {
	if x != nil {
		return x.OnchainConfig
	}
	return nil
}

func (x *CommitStoreChangeConfigRequest) GetOffchainConfig() []byte {
	if x != nil {
		return x.OffchainConfig
	}
	return nil
}

// CommitStoreChangeConfigResponse returns the address of the commit store. It is a gRPC adapter to the return values of
// [github.com/smartcontractkit/chainlink-common/chainlink-common/pkg/types/ccip/CommitStoreReader.ChangeConfig]
type CommitStoreChangeConfigResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"` // Address
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitStoreChangeConfigResponse) Reset() {
	*x = CommitStoreChangeConfigResponse{}
	mi := &file_commitstore_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitStoreChangeConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitStoreChangeConfigResponse) ProtoMessage() {}

func (x *CommitStoreChangeConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commitstore_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitStoreChangeConfigResponse.ProtoReflect.Descriptor instead.
func (*CommitStoreChangeConfigResponse) Descriptor() ([]byte, []int) {
	return file_commitstore_proto_rawDescGZIP(), []int{10}
}

func (x *CommitStoreChangeConfigResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

// GetOffchainConfigResponse returns the offchain config. It is a gRPC adapter to the return values of
// [github.com/smartcontractkit/chainlink-common/chainlink-common/pkg/types/ccip/CommitStoreReader.GetOffchainConfig]
type GetOffchainConfigResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OffchainConfig *CommitOffchainConfig  `protobuf:"bytes,1,opt,name=offchain_config,json=offchainConfig,proto3" json:"offchain_config,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetOffchainConfigResponse) Reset() {
	*x = GetOffchainConfigResponse{}
	mi := &file_commitstore_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetOffchainConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOffchainConfigResponse) ProtoMessage() {}

func (x *GetOffchainConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commitstore_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOffchainConfigResponse.ProtoReflect.Descriptor instead.
func (*GetOffchainConfigResponse) Descriptor() ([]byte, []int) {
	return file_commitstore_proto_rawDescGZIP(), []int{11}
}

func (x *GetOffchainConfigResponse) GetOffchainConfig() *CommitOffchainConfig {
	if x != nil {
		return x.OffchainConfig
	}
	return nil
}

// GetCommitGasPriceEstimatorResponse returns a reference to the gas price estimator service.
// It is a gRPC proxying mechanism instead of a wrapper to the return value of
// [github.com/smartcontractkit/chainlink-common/chainlink-common/pkg/types/ccip/CommitStoreReader.GetCommitGasPriceEstimator]
// because the return value is an interface, which is modelled as a service in gRPC
type GetCommitGasPriceEstimatorResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	GasPriceEstimatorId uint32                 `protobuf:"varint,1,opt,name=gas_price_estimator_id,json=gasPriceEstimatorId,proto3" json:"gas_price_estimator_id,omitempty"` // connection id for proxying
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GetCommitGasPriceEstimatorResponse) Reset() {
	*x = GetCommitGasPriceEstimatorResponse{}
	mi := &file_commitstore_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommitGasPriceEstimatorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommitGasPriceEstimatorResponse) ProtoMessage() {}

func (x *GetCommitGasPriceEstimatorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commitstore_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommitGasPriceEstimatorResponse.ProtoReflect.Descriptor instead.
func (*GetCommitGasPriceEstimatorResponse) Descriptor() ([]byte, []int) {
	return file_commitstore_proto_rawDescGZIP(), []int{12}
}

func (x *GetCommitGasPriceEstimatorResponse) GetGasPriceEstimatorId() uint32 {
	if x != nil {
		return x.GasPriceEstimatorId
	}
	return 0
}

// EncodeCommitReportRequest is a gRPC adapter to the input values of
// [github.com/smartcontractkit/chainlink-common/chainlink-common/pkg/types/ccip/CommitStoreReader.EncodeCommitReport]
type EncodeCommitReportRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Report        *CommitStoreReport     `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncodeCommitReportRequest) Reset() {
	*x = EncodeCommitReportRequest{}
	mi := &file_commitstore_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncodeCommitReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodeCommitReportRequest) ProtoMessage() {}

func (x *EncodeCommitReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commitstore_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodeCommitReportRequest.ProtoReflect.Descriptor instead.
func (*EncodeCommitReportRequest) Descriptor() ([]byte, []int) {
	return file_commitstore_proto_rawDescGZIP(), []int{13}
}

func (x *EncodeCommitReportRequest) GetReport() *CommitStoreReport {
	if x != nil {
		return x.Report
	}
	return nil
}

// EncodeCommitReportResponse returns the encoded report. It is a gRPC adapter to the return values of
// [github.com/smartcontractkit/chainlink-common/chainlink-common/pkg/types/ccip/CommitStoreReader.EncodeCommitReport]
type EncodeCommitReportResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EncodedReport []byte                 `protobuf:"bytes,1,opt,name=encoded_report,json=encodedReport,proto3" json:"encoded_report,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncodeCommitReportResponse) Reset() {
	*x = EncodeCommitReportResponse{}
	mi := &file_commitstore_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncodeCommitReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodeCommitReportResponse) ProtoMessage() {}

func (x *EncodeCommitReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commitstore_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodeCommitReportResponse.ProtoReflect.Descriptor instead.
func (*EncodeCommitReportResponse) Descriptor() ([]byte, []int) {
	return file_commitstore_proto_rawDescGZIP(), []int{14}
}

func (x *EncodeCommitReportResponse) GetEncodedReport() []byte {
	if x != nil {
		return x.EncodedReport
	}
	return nil
}

// DecodeCommitReportRequest is a gRPC adapter to the input values of
// [github.com/smartcontractkit/chainlink-common/chainlink-common/pkg/types/ccip/CommitStoreReader.DecodeCommitReport]
type DecodeCommitReportRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	EncodedReport []byte                 `protobuf:"bytes,1,opt,name=encoded_report,json=encodedReport,proto3" json:"encoded_report,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecodeCommitReportRequest) Reset() {
	*x = DecodeCommitReportRequest{}
	mi := &file_commitstore_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecodeCommitReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeCommitReportRequest) ProtoMessage() {}

func (x *DecodeCommitReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commitstore_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeCommitReportRequest.ProtoReflect.Descriptor instead.
func (*DecodeCommitReportRequest) Descriptor() ([]byte, []int) {
	return file_commitstore_proto_rawDescGZIP(), []int{15}
}

func (x *DecodeCommitReportRequest) GetEncodedReport() []byte {
	if x != nil {
		return x.EncodedReport
	}
	return nil
}

// DecodeCommitReportResponse returns the decoded report. It is a gRPC adapter to the return values of
// [github.com/smartcontractkit/chainlink-common/chainlink-common/pkg/types/ccip/CommitStoreReader.DecodeCommitReport]
type DecodeCommitReportResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Report        *CommitStoreReport     `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecodeCommitReportResponse) Reset() {
	*x = DecodeCommitReportResponse{}
	mi := &file_commitstore_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecodeCommitReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeCommitReportResponse) ProtoMessage() {}

func (x *DecodeCommitReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commitstore_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeCommitReportResponse.ProtoReflect.Descriptor instead.
func (*DecodeCommitReportResponse) Descriptor() ([]byte, []int) {
	return file_commitstore_proto_rawDescGZIP(), []int{16}
}

func (x *DecodeCommitReportResponse) GetReport() *CommitStoreReport {
	if x != nil {
		return x.Report
	}
	return nil
}

// VerifyExecutionReportRequest is a gRPC adapter to the input values of
// [github.com/smartcontractkit/chainlink-common/chainlink-common/pkg/types/ccip/CommitStoreReader.VerifyExecutionReport]
type VerifyExecutionReportRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Report        *ExecutionReport       `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
	EncodedReport []byte                 `protobuf:"bytes,2,opt,name=encoded_report,json=encodedReport,proto3" json:"encoded_report,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyExecutionReportRequest) Reset() {
	*x = VerifyExecutionReportRequest{}
	mi := &file_commitstore_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyExecutionReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyExecutionReportRequest) ProtoMessage() {}

func (x *VerifyExecutionReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_commitstore_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyExecutionReportRequest.ProtoReflect.Descriptor instead.
func (*VerifyExecutionReportRequest) Descriptor() ([]byte, []int) {
	return file_commitstore_proto_rawDescGZIP(), []int{17}
}

func (x *VerifyExecutionReportRequest) GetReport() *ExecutionReport {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *VerifyExecutionReportRequest) GetEncodedReport() []byte {
	if x != nil {
		return x.EncodedReport
	}
	return nil
}

// VerifyExecutionReportResponse returns whether the execution report is valid. It is a gRPC adapter to the return values of
// [github.com/smartcontractkit/chainlink-common/chainlink-common/pkg/types/ccip/CommitStoreReader.VerifyExecutionReport]
type VerifyExecutionReportResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsValid       bool                   `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyExecutionReportResponse) Reset() {
	*x = VerifyExecutionReportResponse{}
	mi := &file_commitstore_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyExecutionReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyExecutionReportResponse) ProtoMessage() {}

func (x *VerifyExecutionReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commitstore_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyExecutionReportResponse.ProtoReflect.Descriptor instead.
func (*VerifyExecutionReportResponse) Descriptor() ([]byte, []int) {
	return file_commitstore_proto_rawDescGZIP(), []int{18}
}

func (x *VerifyExecutionReportResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

// GetCommitStoreStaticConfigResponse returns the static config of the commit store. It is a gRPC adapter to the return values of
// [github.com/smartcontractkit/chainlink-common/chainlink-common/pkg/types/ccip/CommitStoreReader.GetCommitStoreStaticConfig]
type GetCommitStoreStaticConfigResponse struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	StaticConfig  *CommitStoreStaticConfig `protobuf:"bytes,1,opt,name=static_config,json=staticConfig,proto3" json:"static_config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCommitStoreStaticConfigResponse) Reset() {
	*x = GetCommitStoreStaticConfigResponse{}
	mi := &file_commitstore_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCommitStoreStaticConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCommitStoreStaticConfigResponse) ProtoMessage() {}

func (x *GetCommitStoreStaticConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commitstore_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCommitStoreStaticConfigResponse.ProtoReflect.Descriptor instead.
func (*GetCommitStoreStaticConfigResponse) Descriptor() ([]byte, []int) {
	return file_commitstore_proto_rawDescGZIP(), []int{19}
}

func (x *GetCommitStoreStaticConfigResponse) GetStaticConfig() *CommitStoreStaticConfig {
	if x != nil {
		return x.StaticConfig
	}
	return nil
}

// CommitOffchainConfig is the offchain config of the commit store. It is a gRPC adapter to the struct
// [github.com/smartcontractkit/chainlink-common/chainlink-common/pkg/types/ccip.CommitOffchainConfig]
type CommitOffchainConfig struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	GasPriceDeviationPpb   uint32                 `protobuf:"varint,1,opt,name=gas_price_deviation_ppb,json=gasPriceDeviationPpb,proto3" json:"gas_price_deviation_ppb,omitempty"`
	GasPriceHeartbeat      *durationpb.Duration   `protobuf:"bytes,2,opt,name=gas_price_heartbeat,json=gasPriceHeartbeat,proto3" json:"gas_price_heartbeat,omitempty"`
	TokenPriceDeviationPpb uint32                 `protobuf:"varint,3,opt,name=token_price_deviation_ppb,json=tokenPriceDeviationPpb,proto3" json:"token_price_deviation_ppb,omitempty"`
	TokenPriceHeartbeat    *durationpb.Duration   `protobuf:"bytes,4,opt,name=token_price_heartbeat,json=tokenPriceHeartbeat,proto3" json:"token_price_heartbeat,omitempty"`
	InflightCacheExpiry    *durationpb.Duration   `protobuf:"bytes,5,opt,name=inflight_cache_expiry,json=inflightCacheExpiry,proto3" json:"inflight_cache_expiry,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *CommitOffchainConfig) Reset() {
	*x = CommitOffchainConfig{}
	mi := &file_commitstore_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitOffchainConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitOffchainConfig) ProtoMessage() {}

func (x *CommitOffchainConfig) ProtoReflect() protoreflect.Message {
	mi := &file_commitstore_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitOffchainConfig.ProtoReflect.Descriptor instead.
func (*CommitOffchainConfig) Descriptor() ([]byte, []int) {
	return file_commitstore_proto_rawDescGZIP(), []int{20}
}

func (x *CommitOffchainConfig) GetGasPriceDeviationPpb() uint32 {
	if x != nil {
		return x.GasPriceDeviationPpb
	}
	return 0
}

func (x *CommitOffchainConfig) GetGasPriceHeartbeat() *durationpb.Duration {
	if x != nil {
		return x.GasPriceHeartbeat
	}
	return nil
}

func (x *CommitOffchainConfig) GetTokenPriceDeviationPpb() uint32 {
	if x != nil {
		return x.TokenPriceDeviationPpb
	}
	return 0
}

func (x *CommitOffchainConfig) GetTokenPriceHeartbeat() *durationpb.Duration {
	if x != nil {
		return x.TokenPriceHeartbeat
	}
	return nil
}

func (x *CommitOffchainConfig) GetInflightCacheExpiry() *durationpb.Duration {
	if x != nil {
		return x.InflightCacheExpiry
	}
	return nil
}

// CommitStoreReportWithTxMeta is a gRPC adapter to the struct
// [github.com/smartcontractkit/chainlink-common/chainlink-common/pkg/types/ccip.CommitStoreReportWithTxMeta]
type CommitStoreReportWithTxMeta struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Report        *CommitStoreReport     `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
	TxMeta        *TxMeta                `protobuf:"bytes,2,opt,name=tx_meta,json=txMeta,proto3" json:"tx_meta,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitStoreReportWithTxMeta) Reset() {
	*x = CommitStoreReportWithTxMeta{}
	mi := &file_commitstore_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitStoreReportWithTxMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitStoreReportWithTxMeta) ProtoMessage() {}

func (x *CommitStoreReportWithTxMeta) ProtoReflect() protoreflect.Message {
	mi := &file_commitstore_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitStoreReportWithTxMeta.ProtoReflect.Descriptor instead.
func (*CommitStoreReportWithTxMeta) Descriptor() ([]byte, []int) {
	return file_commitstore_proto_rawDescGZIP(), []int{21}
}

func (x *CommitStoreReportWithTxMeta) GetReport() *CommitStoreReport {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *CommitStoreReportWithTxMeta) GetTxMeta() *TxMeta {
	if x != nil {
		return x.TxMeta
	}
	return nil
}

// CommitStoreReport is a gRPC adapter to the struct
// [github.com/smartcontractkit/chainlink-common/chainlink-common/pkg/types/ccip.CommitStoreReport]
type CommitStoreReport struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TokenPrices   []*TokenPrice          `protobuf:"bytes,1,rep,name=token_prices,json=tokenPrices,proto3" json:"token_prices,omitempty"`
	GasPrices     []*GasPrice            `protobuf:"bytes,2,rep,name=gas_prices,json=gasPrices,proto3" json:"gas_prices,omitempty"`
	Interval      *CommitStoreInterval   `protobuf:"bytes,3,opt,name=interval,proto3" json:"interval,omitempty"`
	MerkleRoot    []byte                 `protobuf:"bytes,4,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitStoreReport) Reset() {
	*x = CommitStoreReport{}
	mi := &file_commitstore_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitStoreReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitStoreReport) ProtoMessage() {}

func (x *CommitStoreReport) ProtoReflect() protoreflect.Message {
	mi := &file_commitstore_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitStoreReport.ProtoReflect.Descriptor instead.
func (*CommitStoreReport) Descriptor() ([]byte, []int) {
	return file_commitstore_proto_rawDescGZIP(), []int{22}
}

func (x *CommitStoreReport) GetTokenPrices() []*TokenPrice {
	if x != nil {
		return x.TokenPrices
	}
	return nil
}

func (x *CommitStoreReport) GetGasPrices() []*GasPrice {
	if x != nil {
		return x.GasPrices
	}
	return nil
}

func (x *CommitStoreReport) GetInterval() *CommitStoreInterval {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *CommitStoreReport) GetMerkleRoot() []byte {
	if x != nil {
		return x.MerkleRoot
	}
	return nil
}

// CommitStoreInterval is a gRPC adapter to the struct
// [github.com/smartcontractkit/chainlink-common/chainlink-common/pkg/types/ccip.CommitStoreInterval]
type CommitStoreInterval struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Min           uint64                 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max           uint64                 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitStoreInterval) Reset() {
	*x = CommitStoreInterval{}
	mi := &file_commitstore_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitStoreInterval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitStoreInterval) ProtoMessage() {}

func (x *CommitStoreInterval) ProtoReflect() protoreflect.Message {
	mi := &file_commitstore_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitStoreInterval.ProtoReflect.Descriptor instead.
func (*CommitStoreInterval) Descriptor() ([]byte, []int) {
	return file_commitstore_proto_rawDescGZIP(), []int{23}
}

func (x *CommitStoreInterval) GetMin() uint64 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *CommitStoreInterval) GetMax() uint64 {
	if x != nil {
		return x.Max
	}
	return 0
}

// CommitStoreStaticConfig is a gRPC adapter to the struct
// [github.com/smartcontractkit/chainlink-common/chainlink-common/pkg/types/ccip.CommitStoreStaticConfig]
type CommitStoreStaticConfig struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ChainSelector       uint64                 `protobuf:"varint,1,opt,name=chain_selector,json=chainSelector,proto3" json:"chain_selector,omitempty"`
	SourceChainSelector uint64                 `protobuf:"varint,2,opt,name=source_chain_selector,json=sourceChainSelector,proto3" json:"source_chain_selector,omitempty"`
	OnRamp              string                 `protobuf:"bytes,3,opt,name=on_ramp,json=onRamp,proto3" json:"on_ramp,omitempty"`       // Address
	ArmProxy            string                 `protobuf:"bytes,4,opt,name=arm_proxy,json=armProxy,proto3" json:"arm_proxy,omitempty"` // Address
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *CommitStoreStaticConfig) Reset() {
	*x = CommitStoreStaticConfig{}
	mi := &file_commitstore_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitStoreStaticConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitStoreStaticConfig) ProtoMessage() {}

func (x *CommitStoreStaticConfig) ProtoReflect() protoreflect.Message {
	mi := &file_commitstore_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitStoreStaticConfig.ProtoReflect.Descriptor instead.
func (*CommitStoreStaticConfig) Descriptor() ([]byte, []int) {
	return file_commitstore_proto_rawDescGZIP(), []int{24}
}

func (x *CommitStoreStaticConfig) GetChainSelector() uint64 {
	if x != nil {
		return x.ChainSelector
	}
	return 0
}

func (x *CommitStoreStaticConfig) GetSourceChainSelector() uint64 {
	if x != nil {
		return x.SourceChainSelector
	}
	return 0
}

func (x *CommitStoreStaticConfig) GetOnRamp() string {
	if x != nil {
		return x.OnRamp
	}
	return ""
}

func (x *CommitStoreStaticConfig) GetArmProxy() string {
	if x != nil {
		return x.ArmProxy
	}
	return ""
}

type IsDestChainHealthyResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsHealthy     bool                   `protobuf:"varint,1,opt,name=is_healthy,json=isHealthy,proto3" json:"is_healthy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IsDestChainHealthyResponse) Reset() {
	*x = IsDestChainHealthyResponse{}
	mi := &file_commitstore_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IsDestChainHealthyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsDestChainHealthyResponse) ProtoMessage() {}

func (x *IsDestChainHealthyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_commitstore_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsDestChainHealthyResponse.ProtoReflect.Descriptor instead.
func (*IsDestChainHealthyResponse) Descriptor() ([]byte, []int) {
	return file_commitstore_proto_rawDescGZIP(), []int{25}
}

func (x *IsDestChainHealthyResponse) GetIsHealthy() bool {
	if x != nil {
		return x.IsHealthy
	}
	return false
}

var File_commitstore_proto protoreflect.FileDescriptor

const file_commitstore_proto_rawDesc = "" +
	"\n" +
	"\x11commitstore.proto\x12\x15loop.internal.pb.ccip\x1a\x1bgoogle/protobuf/empty.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\fmodels.proto\"P\n" +
	"%GetExpectedNextSequenceNumberResponse\x12'\n" +
	"\x0fsequence_number\x18\x01 \x01(\x04R\x0esequenceNumber\"M\n" +
	"#GetLatestPriceEpochAndRoundResponse\x12&\n" +
	"\x0fepoch_and_round\x18\x01 \x01(\x04R\repochAndRound\"}\n" +
	",GetCommitReportMatchingSequenceNumberRequest\x12'\n" +
	"\x0fsequence_number\x18\x01 \x01(\x04R\x0esequenceNumber\x12$\n" +
	"\rconfirmations\x18\x02 \x01(\x04R\rconfirmations\"}\n" +
	"-GetCommitReportMatchingSequenceNumberResponse\x12L\n" +
	"\areports\x18\x01 \x03(\v22.loop.internal.pb.ccip.CommitStoreReportWithTxMetaR\areports\"\x8d\x01\n" +
	"+GetAcceptedCommitReportsGteTimestampRequest\x128\n" +
	"\ttimestamp\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12$\n" +
	"\rconfirmations\x18\x02 \x01(\x04R\rconfirmations\"|\n" +
	",GetAcceptedCommitReportsGteTimestampResponse\x12L\n" +
	"\areports\x18\x01 \x03(\v22.loop.internal.pb.ccip.CommitStoreReportWithTxMetaR\areports\")\n" +
	"\x0eIsDownResponse\x12\x17\n" +
	"\ais_down\x18\x01 \x01(\bR\x06isDown\"&\n" +
	"\x10IsBlessedRequest\x12\x12\n" +
	"\x04root\x18\x01 \x01(\fR\x04root\"2\n" +
	"\x11IsBlessedResponse\x12\x1d\n" +
	"\n" +
	"is_blessed\x18\x01 \x01(\bR\tisBlessed\"p\n" +
	"\x1eCommitStoreChangeConfigRequest\x12%\n" +
	"\x0eonchain_config\x18\x01 \x01(\fR\ronchainConfig\x12'\n" +
	"\x0foffchain_config\x18\x02 \x01(\fR\x0eoffchainConfig\";\n" +
	"\x1fCommitStoreChangeConfigResponse\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\"q\n" +
	"\x19GetOffchainConfigResponse\x12T\n" +
	"\x0foffchain_config\x18\x01 \x01(\v2+.loop.internal.pb.ccip.CommitOffchainConfigR\x0eoffchainConfig\"Y\n" +
	"\"GetCommitGasPriceEstimatorResponse\x123\n" +
	"\x16gas_price_estimator_id\x18\x01 \x01(\rR\x13gasPriceEstimatorId\"]\n" +
	"\x19EncodeCommitReportRequest\x12@\n" +
	"\x06report\x18\x01 \x01(\v2(.loop.internal.pb.ccip.CommitStoreReportR\x06report\"C\n" +
	"\x1aEncodeCommitReportResponse\x12%\n" +
	"\x0eencoded_report\x18\x01 \x01(\fR\rencodedReport\"B\n" +
	"\x19DecodeCommitReportRequest\x12%\n" +
	"\x0eencoded_report\x18\x01 \x01(\fR\rencodedReport\"^\n" +
	"\x1aDecodeCommitReportResponse\x12@\n" +
	"\x06report\x18\x01 \x01(\v2(.loop.internal.pb.ccip.CommitStoreReportR\x06report\"\x85\x01\n" +
	"\x1cVerifyExecutionReportRequest\x12>\n" +
	"\x06report\x18\x01 \x01(\v2&.loop.internal.pb.ccip.ExecutionReportR\x06report\x12%\n" +
	"\x0eencoded_report\x18\x02 \x01(\fR\rencodedReport\":\n" +
	"\x1dVerifyExecutionReportResponse\x12\x19\n" +
	"\bis_valid\x18\x01 \x01(\bR\aisValid\"y\n" +
	"\"GetCommitStoreStaticConfigResponse\x12S\n" +
	"\rstatic_config\x18\x01 \x01(\v2..loop.internal.pb.ccip.CommitStoreStaticConfigR\fstaticConfig\"\xf1\x02\n" +
	"\x14CommitOffchainConfig\x125\n" +
	"\x17gas_price_deviation_ppb\x18\x01 \x01(\rR\x14gasPriceDeviationPpb\x12I\n" +
	"\x13gas_price_heartbeat\x18\x02 \x01(\v2\x19.google.protobuf.DurationR\x11gasPriceHeartbeat\x129\n" +
	"\x19token_price_deviation_ppb\x18\x03 \x01(\rR\x16tokenPriceDeviationPpb\x12M\n" +
	"\x15token_price_heartbeat\x18\x04 \x01(\v2\x19.google.protobuf.DurationR\x13tokenPriceHeartbeat\x12M\n" +
	"\x15inflight_cache_expiry\x18\x05 \x01(\v2\x19.google.protobuf.DurationR\x13inflightCacheExpiry\"\x97\x01\n" +
	"\x1bCommitStoreReportWithTxMeta\x12@\n" +
	"\x06report\x18\x01 \x01(\v2(.loop.internal.pb.ccip.CommitStoreReportR\x06report\x126\n" +
	"\atx_meta\x18\x02 \x01(\v2\x1d.loop.internal.pb.ccip.TxMetaR\x06txMeta\"\x82\x02\n" +
	"\x11CommitStoreReport\x12D\n" +
	"\ftoken_prices\x18\x01 \x03(\v2!.loop.internal.pb.ccip.TokenPriceR\vtokenPrices\x12>\n" +
	"\n" +
	"gas_prices\x18\x02 \x03(\v2\x1f.loop.internal.pb.ccip.GasPriceR\tgasPrices\x12F\n" +
	"\binterval\x18\x03 \x01(\v2*.loop.internal.pb.ccip.CommitStoreIntervalR\binterval\x12\x1f\n" +
	"\vmerkle_root\x18\x04 \x01(\fR\n" +
	"merkleRoot\"9\n" +
	"\x13CommitStoreInterval\x12\x10\n" +
	"\x03min\x18\x01 \x01(\x04R\x03min\x12\x10\n" +
	"\x03max\x18\x02 \x01(\x04R\x03max\"\xaa\x01\n" +
	"\x17CommitStoreStaticConfig\x12%\n" +
	"\x0echain_selector\x18\x01 \x01(\x04R\rchainSelector\x122\n" +
	"\x15source_chain_selector\x18\x02 \x01(\x04R\x13sourceChainSelector\x12\x17\n" +
	"\aon_ramp\x18\x03 \x01(\tR\x06onRamp\x12\x1b\n" +
	"\tarm_proxy\x18\x04 \x01(\tR\barmProxy\";\n" +
	"\x1aIsDestChainHealthyResponse\x12\x1d\n" +
	"\n" +
	"is_healthy\x18\x01 \x01(\bR\tisHealthy2\xe2\r\n" +
	"\x11CommitStoreReader\x12}\n" +
	"\fChangeConfig\x125.loop.internal.pb.ccip.CommitStoreChangeConfigRequest\x1a6.loop.internal.pb.ccip.CommitStoreChangeConfigResponse\x12y\n" +
	"\x12DecodeCommitReport\x120.loop.internal.pb.ccip.DecodeCommitReportRequest\x1a1.loop.internal.pb.ccip.DecodeCommitReportResponse\x12y\n" +
	"\x12EncodeCommitReport\x120.loop.internal.pb.ccip.EncodeCommitReportRequest\x1a1.loop.internal.pb.ccip.EncodeCommitReportResponse\x12\xaf\x01\n" +
	"$GetAcceptedCommitReportsGteTimestamp\x12B.loop.internal.pb.ccip.GetAcceptedCommitReportsGteTimestampRequest\x1aC.loop.internal.pb.ccip.GetAcceptedCommitReportsGteTimestampResponse\x12o\n" +
	"\x1aGetCommitGasPriceEstimator\x12\x16.google.protobuf.Empty\x1a9.loop.internal.pb.ccip.GetCommitGasPriceEstimatorResponse\x12\xb2\x01\n" +
	"%GetCommitReportMatchingSequenceNumber\x12C.loop.internal.pb.ccip.GetCommitReportMatchingSequenceNumberRequest\x1aD.loop.internal.pb.ccip.GetCommitReportMatchingSequenceNumberResponse\x12o\n" +
	"\x1aGetCommitStoreStaticConfig\x12\x16.google.protobuf.Empty\x1a9.loop.internal.pb.ccip.GetCommitStoreStaticConfigResponse\x12u\n" +
	"\x1dGetExpectedNextSequenceNumber\x12\x16.google.protobuf.Empty\x1a<.loop.internal.pb.ccip.GetExpectedNextSequenceNumberResponse\x12q\n" +
	"\x1bGetLatestPriceEpochAndRound\x12\x16.google.protobuf.Empty\x1a:.loop.internal.pb.ccip.GetLatestPriceEpochAndRoundResponse\x12]\n" +
	"\x11GetOffchainConfig\x12\x16.google.protobuf.Empty\x1a0.loop.internal.pb.ccip.GetOffchainConfigResponse\x12^\n" +
	"\tIsBlessed\x12'.loop.internal.pb.ccip.IsBlessedRequest\x1a(.loop.internal.pb.ccip.IsBlessedResponse\x12_\n" +
	"\x12IsDestChainHealthy\x12\x16.google.protobuf.Empty\x1a1.loop.internal.pb.ccip.IsDestChainHealthyResponse\x12G\n" +
	"\x06IsDown\x12\x16.google.protobuf.Empty\x1a%.loop.internal.pb.ccip.IsDownResponse\x12\x82\x01\n" +
	"\x15VerifyExecutionReport\x123.loop.internal.pb.ccip.VerifyExecutionReportRequest\x1a4.loop.internal.pb.ccip.VerifyExecutionReportResponse\x127\n" +
	"\x05Close\x12\x16.google.protobuf.Empty\x1a\x16.google.protobuf.EmptyBOZMgithub.com/smartcontractkit/chainlink-common/pkg/loop/internal/pb/ccip;ccippbb\x06proto3"

var (
	file_commitstore_proto_rawDescOnce sync.Once
	file_commitstore_proto_rawDescData []byte
)

func file_commitstore_proto_rawDescGZIP() []byte {
	file_commitstore_proto_rawDescOnce.Do(func() {
		file_commitstore_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_commitstore_proto_rawDesc), len(file_commitstore_proto_rawDesc)))
	})
	return file_commitstore_proto_rawDescData
}

var file_commitstore_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_commitstore_proto_goTypes = []any{
	(*GetExpectedNextSequenceNumberResponse)(nil),         // 0: loop.internal.pb.ccip.GetExpectedNextSequenceNumberResponse
	(*GetLatestPriceEpochAndRoundResponse)(nil),           // 1: loop.internal.pb.ccip.GetLatestPriceEpochAndRoundResponse
	(*GetCommitReportMatchingSequenceNumberRequest)(nil),  // 2: loop.internal.pb.ccip.GetCommitReportMatchingSequenceNumberRequest
	(*GetCommitReportMatchingSequenceNumberResponse)(nil), // 3: loop.internal.pb.ccip.GetCommitReportMatchingSequenceNumberResponse
	(*GetAcceptedCommitReportsGteTimestampRequest)(nil),   // 4: loop.internal.pb.ccip.GetAcceptedCommitReportsGteTimestampRequest
	(*GetAcceptedCommitReportsGteTimestampResponse)(nil),  // 5: loop.internal.pb.ccip.GetAcceptedCommitReportsGteTimestampResponse
	(*IsDownResponse)(nil),                                // 6: loop.internal.pb.ccip.IsDownResponse
	(*IsBlessedRequest)(nil),                              // 7: loop.internal.pb.ccip.IsBlessedRequest
	(*IsBlessedResponse)(nil),                             // 8: loop.internal.pb.ccip.IsBlessedResponse
	(*CommitStoreChangeConfigRequest)(nil),                // 9: loop.internal.pb.ccip.CommitStoreChangeConfigRequest
	(*CommitStoreChangeConfigResponse)(nil),               // 10: loop.internal.pb.ccip.CommitStoreChangeConfigResponse
	(*GetOffchainConfigResponse)(nil),                     // 11: loop.internal.pb.ccip.GetOffchainConfigResponse
	(*GetCommitGasPriceEstimatorResponse)(nil),            // 12: loop.internal.pb.ccip.GetCommitGasPriceEstimatorResponse
	(*EncodeCommitReportRequest)(nil),                     // 13: loop.internal.pb.ccip.EncodeCommitReportRequest
	(*EncodeCommitReportResponse)(nil),                    // 14: loop.internal.pb.ccip.EncodeCommitReportResponse
	(*DecodeCommitReportRequest)(nil),                     // 15: loop.internal.pb.ccip.DecodeCommitReportRequest
	(*DecodeCommitReportResponse)(nil),                    // 16: loop.internal.pb.ccip.DecodeCommitReportResponse
	(*VerifyExecutionReportRequest)(nil),                  // 17: loop.internal.pb.ccip.VerifyExecutionReportRequest
	(*VerifyExecutionReportResponse)(nil),                 // 18: loop.internal.pb.ccip.VerifyExecutionReportResponse
	(*GetCommitStoreStaticConfigResponse)(nil),            // 19: loop.internal.pb.ccip.GetCommitStoreStaticConfigResponse
	(*CommitOffchainConfig)(nil),                          // 20: loop.internal.pb.ccip.CommitOffchainConfig
	(*CommitStoreReportWithTxMeta)(nil),                   // 21: loop.internal.pb.ccip.CommitStoreReportWithTxMeta
	(*CommitStoreReport)(nil),                             // 22: loop.internal.pb.ccip.CommitStoreReport
	(*CommitStoreInterval)(nil),                           // 23: loop.internal.pb.ccip.CommitStoreInterval
	(*CommitStoreStaticConfig)(nil),                       // 24: loop.internal.pb.ccip.CommitStoreStaticConfig
	(*IsDestChainHealthyResponse)(nil),                    // 25: loop.internal.pb.ccip.IsDestChainHealthyResponse
	(*timestamppb.Timestamp)(nil),                         // 26: google.protobuf.Timestamp
	(*ExecutionReport)(nil),                               // 27: loop.internal.pb.ccip.ExecutionReport
	(*durationpb.Duration)(nil),                           // 28: google.protobuf.Duration
	(*TxMeta)(nil),                                        // 29: loop.internal.pb.ccip.TxMeta
	(*TokenPrice)(nil),                                    // 30: loop.internal.pb.ccip.TokenPrice
	(*GasPrice)(nil),                                      // 31: loop.internal.pb.ccip.GasPrice
	(*emptypb.Empty)(nil),                                 // 32: google.protobuf.Empty
}
var file_commitstore_proto_depIdxs = []int32{
	21, // 0: loop.internal.pb.ccip.GetCommitReportMatchingSequenceNumberResponse.reports:type_name -> loop.internal.pb.ccip.CommitStoreReportWithTxMeta
	26, // 1: loop.internal.pb.ccip.GetAcceptedCommitReportsGteTimestampRequest.timestamp:type_name -> google.protobuf.Timestamp
	21, // 2: loop.internal.pb.ccip.GetAcceptedCommitReportsGteTimestampResponse.reports:type_name -> loop.internal.pb.ccip.CommitStoreReportWithTxMeta
	20, // 3: loop.internal.pb.ccip.GetOffchainConfigResponse.offchain_config:type_name -> loop.internal.pb.ccip.CommitOffchainConfig
	22, // 4: loop.internal.pb.ccip.EncodeCommitReportRequest.report:type_name -> loop.internal.pb.ccip.CommitStoreReport
	22, // 5: loop.internal.pb.ccip.DecodeCommitReportResponse.report:type_name -> loop.internal.pb.ccip.CommitStoreReport
	27, // 6: loop.internal.pb.ccip.VerifyExecutionReportRequest.report:type_name -> loop.internal.pb.ccip.ExecutionReport
	24, // 7: loop.internal.pb.ccip.GetCommitStoreStaticConfigResponse.static_config:type_name -> loop.internal.pb.ccip.CommitStoreStaticConfig
	28, // 8: loop.internal.pb.ccip.CommitOffchainConfig.gas_price_heartbeat:type_name -> google.protobuf.Duration
	28, // 9: loop.internal.pb.ccip.CommitOffchainConfig.token_price_heartbeat:type_name -> google.protobuf.Duration
	28, // 10: loop.internal.pb.ccip.CommitOffchainConfig.inflight_cache_expiry:type_name -> google.protobuf.Duration
	22, // 11: loop.internal.pb.ccip.CommitStoreReportWithTxMeta.report:type_name -> loop.internal.pb.ccip.CommitStoreReport
	29, // 12: loop.internal.pb.ccip.CommitStoreReportWithTxMeta.tx_meta:type_name -> loop.internal.pb.ccip.TxMeta
	30, // 13: loop.internal.pb.ccip.CommitStoreReport.token_prices:type_name -> loop.internal.pb.ccip.TokenPrice
	31, // 14: loop.internal.pb.ccip.CommitStoreReport.gas_prices:type_name -> loop.internal.pb.ccip.GasPrice
	23, // 15: loop.internal.pb.ccip.CommitStoreReport.interval:type_name -> loop.internal.pb.ccip.CommitStoreInterval
	9,  // 16: loop.internal.pb.ccip.CommitStoreReader.ChangeConfig:input_type -> loop.internal.pb.ccip.CommitStoreChangeConfigRequest
	15, // 17: loop.internal.pb.ccip.CommitStoreReader.DecodeCommitReport:input_type -> loop.internal.pb.ccip.DecodeCommitReportRequest
	13, // 18: loop.internal.pb.ccip.CommitStoreReader.EncodeCommitReport:input_type -> loop.internal.pb.ccip.EncodeCommitReportRequest
	4,  // 19: loop.internal.pb.ccip.CommitStoreReader.GetAcceptedCommitReportsGteTimestamp:input_type -> loop.internal.pb.ccip.GetAcceptedCommitReportsGteTimestampRequest
	32, // 20: loop.internal.pb.ccip.CommitStoreReader.GetCommitGasPriceEstimator:input_type -> google.protobuf.Empty
	2,  // 21: loop.internal.pb.ccip.CommitStoreReader.GetCommitReportMatchingSequenceNumber:input_type -> loop.internal.pb.ccip.GetCommitReportMatchingSequenceNumberRequest
	32, // 22: loop.internal.pb.ccip.CommitStoreReader.GetCommitStoreStaticConfig:input_type -> google.protobuf.Empty
	32, // 23: loop.internal.pb.ccip.CommitStoreReader.GetExpectedNextSequenceNumber:input_type -> google.protobuf.Empty
	32, // 24: loop.internal.pb.ccip.CommitStoreReader.GetLatestPriceEpochAndRound:input_type -> google.protobuf.Empty
	32, // 25: loop.internal.pb.ccip.CommitStoreReader.GetOffchainConfig:input_type -> google.protobuf.Empty
	7,  // 26: loop.internal.pb.ccip.CommitStoreReader.IsBlessed:input_type -> loop.internal.pb.ccip.IsBlessedRequest
	32, // 27: loop.internal.pb.ccip.CommitStoreReader.IsDestChainHealthy:input_type -> google.protobuf.Empty
	32, // 28: loop.internal.pb.ccip.CommitStoreReader.IsDown:input_type -> google.protobuf.Empty
	17, // 29: loop.internal.pb.ccip.CommitStoreReader.VerifyExecutionReport:input_type -> loop.internal.pb.ccip.VerifyExecutionReportRequest
	32, // 30: loop.internal.pb.ccip.CommitStoreReader.Close:input_type -> google.protobuf.Empty
	10, // 31: loop.internal.pb.ccip.CommitStoreReader.ChangeConfig:output_type -> loop.internal.pb.ccip.CommitStoreChangeConfigResponse
	16, // 32: loop.internal.pb.ccip.CommitStoreReader.DecodeCommitReport:output_type -> loop.internal.pb.ccip.DecodeCommitReportResponse
	14, // 33: loop.internal.pb.ccip.CommitStoreReader.EncodeCommitReport:output_type -> loop.internal.pb.ccip.EncodeCommitReportResponse
	5,  // 34: loop.internal.pb.ccip.CommitStoreReader.GetAcceptedCommitReportsGteTimestamp:output_type -> loop.internal.pb.ccip.GetAcceptedCommitReportsGteTimestampResponse
	12, // 35: loop.internal.pb.ccip.CommitStoreReader.GetCommitGasPriceEstimator:output_type -> loop.internal.pb.ccip.GetCommitGasPriceEstimatorResponse
	3,  // 36: loop.internal.pb.ccip.CommitStoreReader.GetCommitReportMatchingSequenceNumber:output_type -> loop.internal.pb.ccip.GetCommitReportMatchingSequenceNumberResponse
	19, // 37: loop.internal.pb.ccip.CommitStoreReader.GetCommitStoreStaticConfig:output_type -> loop.internal.pb.ccip.GetCommitStoreStaticConfigResponse
	0,  // 38: loop.internal.pb.ccip.CommitStoreReader.GetExpectedNextSequenceNumber:output_type -> loop.internal.pb.ccip.GetExpectedNextSequenceNumberResponse
	1,  // 39: loop.internal.pb.ccip.CommitStoreReader.GetLatestPriceEpochAndRound:output_type -> loop.internal.pb.ccip.GetLatestPriceEpochAndRoundResponse
	11, // 40: loop.internal.pb.ccip.CommitStoreReader.GetOffchainConfig:output_type -> loop.internal.pb.ccip.GetOffchainConfigResponse
	8,  // 41: loop.internal.pb.ccip.CommitStoreReader.IsBlessed:output_type -> loop.internal.pb.ccip.IsBlessedResponse
	25, // 42: loop.internal.pb.ccip.CommitStoreReader.IsDestChainHealthy:output_type -> loop.internal.pb.ccip.IsDestChainHealthyResponse
	6,  // 43: loop.internal.pb.ccip.CommitStoreReader.IsDown:output_type -> loop.internal.pb.ccip.IsDownResponse
	18, // 44: loop.internal.pb.ccip.CommitStoreReader.VerifyExecutionReport:output_type -> loop.internal.pb.ccip.VerifyExecutionReportResponse
	32, // 45: loop.internal.pb.ccip.CommitStoreReader.Close:output_type -> google.protobuf.Empty
	31, // [31:46] is the sub-list for method output_type
	16, // [16:31] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_commitstore_proto_init() }
func file_commitstore_proto_init() {
	if File_commitstore_proto != nil {
		return
	}
	file_models_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_commitstore_proto_rawDesc), len(file_commitstore_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_commitstore_proto_goTypes,
		DependencyIndexes: file_commitstore_proto_depIdxs,
		MessageInfos:      file_commitstore_proto_msgTypes,
	}.Build()
	File_commitstore_proto = out.File
	file_commitstore_proto_goTypes = nil
	file_commitstore_proto_depIdxs = nil
}
