syntax = "proto3";

option go_package = "github.com/smartcontractkit/chainlink-common/pkg/loop/internal/pb/keystore;keystorepb";

package loop.internal.pb.keystore;

service Keystore {
  rpc Sign(SignRequest) returns (SignResponse);
  rpc SignBatch(SignBatchRequest)returns (SignBatchResponse);
  rpc Verify(VerifyRequest)returns (VerifyResponse);
  rpc VerifyBatch(VerifyBatchRequest)returns (VerifyBatchResponse);

  rpc ListKeys(ListKeysRequest)returns (ListKeysResponse);
  rpc ImportKey(ImportKeyRequest)returns(ImportKeyResponse);
  rpc ExportKey(ExportKeyRequest)returns(ExportKeyResponse);

  rpc CreateKey(CreateKeyRequest)returns(CreateKeyResponse);
  rpc DeleteKey(DeleteKeyRequest)returns(DeleteKeyResponse);

  rpc AddTag(AddTagRequest)returns(AddTagResponse);
  rpc RemoveTag(RemoveTagRequest)returns(RemoveTagResponse);
  rpc ListTags(ListTagsRequest)returns(ListTagsResponse);

  rpc RunUDF(RunUDFRequest)returns (RunUDFResponse);
}

message SignRequest {
  bytes keyID = 1;
  bytes data = 2;
}

message SignResponse {
  bytes data = 1;
}

message SignBatchRequest {
  bytes keyID = 1;
  repeated bytes data = 2;
}

message SignBatchResponse {
  repeated bytes data = 1;
}

message VerifyRequest {
  bytes keyID = 1;
  bytes data = 2;
}

message VerifyResponse {
  bool valid = 1;
}

message VerifyBatchRequest {
  bytes keyID = 1;
  repeated bytes data = 2;
}

message VerifyBatchResponse {
  repeated bool valid = 1;
}

message ListKeysRequest {
  repeated string tags = 1;
}

message ListKeysResponse {
  repeated bytes keyIDs = 1;
}

message RunUDFRequest {
  string name = 1;
  bytes keyID = 2;
  bytes data = 3;
}

message RunUDFResponse {
  bytes data = 1;
}

message ImportKeyRequest {
  string keyType = 1;
  bytes data = 2;
  repeated string tags = 3;
}

message ImportKeyResponse {
  bytes keyID = 1;
}

message ExportKeyRequest {
  bytes keyID = 1;
}

message ExportKeyResponse {
  bytes data = 1;
}

message CreateKeyRequest {
  string keyType = 1;
  repeated string tags = 2;
}

message CreateKeyResponse{
  bytes keyID =1;
}

message DeleteKeyRequest{
  bytes keyID =1;
}

message DeleteKeyResponse{}

message AddTagRequest{
  bytes keyID=1;
  string tag =2;
}

message AddTagResponse{}

message RemoveTagRequest{
  bytes keyID =1;
  string tag =2;
}

message RemoveTagResponse{}

message ListTagsRequest{
  bytes keyID=1;
}

message ListTagsResponse{
  repeated string tags=1;
}
