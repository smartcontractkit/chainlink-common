// Code generated by mockery v2.53.3. DO NOT EDIT.

package custmsg

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// mockMessageEmitter is an autogenerated mock type for the MessageEmitter type
type mockMessageEmitter struct {
	mock.Mock
}

type mockMessageEmitter_Expecter struct {
	mock *mock.Mock
}

func (_m *mockMessageEmitter) EXPECT() *mockMessageEmitter_Expecter {
	return &mockMessageEmitter_Expecter{mock: &_m.Mock}
}

// Emit provides a mock function with given fields: _a0, _a1
func (_m *mockMessageEmitter) Emit(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Emit")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockMessageEmitter_Emit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Emit'
type mockMessageEmitter_Emit_Call struct {
	*mock.Call
}

// Emit is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *mockMessageEmitter_Expecter) Emit(_a0 interface{}, _a1 interface{}) *mockMessageEmitter_Emit_Call {
	return &mockMessageEmitter_Emit_Call{Call: _e.mock.On("Emit", _a0, _a1)}
}

func (_c *mockMessageEmitter_Emit_Call) Run(run func(_a0 context.Context, _a1 string)) *mockMessageEmitter_Emit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *mockMessageEmitter_Emit_Call) Return(_a0 error) *mockMessageEmitter_Emit_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockMessageEmitter_Emit_Call) RunAndReturn(run func(context.Context, string) error) *mockMessageEmitter_Emit_Call {
	_c.Call.Return(run)
	return _c
}

// Labels provides a mock function with no fields
func (_m *mockMessageEmitter) Labels() map[string]string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Labels")
	}

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func() map[string]string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	return r0
}

// mockMessageEmitter_Labels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Labels'
type mockMessageEmitter_Labels_Call struct {
	*mock.Call
}

// Labels is a helper method to define mock.On call
func (_e *mockMessageEmitter_Expecter) Labels() *mockMessageEmitter_Labels_Call {
	return &mockMessageEmitter_Labels_Call{Call: _e.mock.On("Labels")}
}

func (_c *mockMessageEmitter_Labels_Call) Run(run func()) *mockMessageEmitter_Labels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *mockMessageEmitter_Labels_Call) Return(_a0 map[string]string) *mockMessageEmitter_Labels_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockMessageEmitter_Labels_Call) RunAndReturn(run func() map[string]string) *mockMessageEmitter_Labels_Call {
	_c.Call.Return(run)
	return _c
}

// With provides a mock function with given fields: keyValues
func (_m *mockMessageEmitter) With(keyValues ...string) MessageEmitter {
	_va := make([]interface{}, len(keyValues))
	for _i := range keyValues {
		_va[_i] = keyValues[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for With")
	}

	var r0 MessageEmitter
	if rf, ok := ret.Get(0).(func(...string) MessageEmitter); ok {
		r0 = rf(keyValues...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(MessageEmitter)
		}
	}

	return r0
}

// mockMessageEmitter_With_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'With'
type mockMessageEmitter_With_Call struct {
	*mock.Call
}

// With is a helper method to define mock.On call
//   - keyValues ...string
func (_e *mockMessageEmitter_Expecter) With(keyValues ...interface{}) *mockMessageEmitter_With_Call {
	return &mockMessageEmitter_With_Call{Call: _e.mock.On("With",
		append([]interface{}{}, keyValues...)...)}
}

func (_c *mockMessageEmitter_With_Call) Run(run func(keyValues ...string)) *mockMessageEmitter_With_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *mockMessageEmitter_With_Call) Return(_a0 MessageEmitter) *mockMessageEmitter_With_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockMessageEmitter_With_Call) RunAndReturn(run func(...string) MessageEmitter) *mockMessageEmitter_With_Call {
	_c.Call.Return(run)
	return _c
}

// WithMapLabels provides a mock function with given fields: _a0
func (_m *mockMessageEmitter) WithMapLabels(_a0 map[string]string) MessageEmitter {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for WithMapLabels")
	}

	var r0 MessageEmitter
	if rf, ok := ret.Get(0).(func(map[string]string) MessageEmitter); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(MessageEmitter)
		}
	}

	return r0
}

// mockMessageEmitter_WithMapLabels_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithMapLabels'
type mockMessageEmitter_WithMapLabels_Call struct {
	*mock.Call
}

// WithMapLabels is a helper method to define mock.On call
//   - _a0 map[string]string
func (_e *mockMessageEmitter_Expecter) WithMapLabels(_a0 interface{}) *mockMessageEmitter_WithMapLabels_Call {
	return &mockMessageEmitter_WithMapLabels_Call{Call: _e.mock.On("WithMapLabels", _a0)}
}

func (_c *mockMessageEmitter_WithMapLabels_Call) Run(run func(_a0 map[string]string)) *mockMessageEmitter_WithMapLabels_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]string))
	})
	return _c
}

func (_c *mockMessageEmitter_WithMapLabels_Call) Return(_a0 MessageEmitter) *mockMessageEmitter_WithMapLabels_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockMessageEmitter_WithMapLabels_Call) RunAndReturn(run func(map[string]string) MessageEmitter) *mockMessageEmitter_WithMapLabels_Call {
	_c.Call.Return(run)
	return _c
}

// newMockMessageEmitter creates a new instance of mockMessageEmitter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockMessageEmitter(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockMessageEmitter {
	mock := &mockMessageEmitter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
