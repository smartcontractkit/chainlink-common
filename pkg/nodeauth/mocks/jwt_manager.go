// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// JWTManager is an autogenerated mock type for the JWTManager type
type JWTManager struct {
	mock.Mock
}

type JWTManager_Expecter struct {
	mock *mock.Mock
}

func (_m *JWTManager) EXPECT() *JWTManager_Expecter {
	return &JWTManager_Expecter{mock: &_m.Mock}
}

// CreateJWTForRequest provides a mock function with given fields: req
func (_m *JWTManager) CreateJWTForRequest(req interface{}) (string, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for CreateJWTForRequest")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) (string, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(interface{}) string); ok {
		r0 = rf(req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JWTManager_CreateJWTForRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateJWTForRequest'
type JWTManager_CreateJWTForRequest_Call struct {
	*mock.Call
}

// CreateJWTForRequest is a helper method to define mock.On call
//   - req interface{}
func (_e *JWTManager_Expecter) CreateJWTForRequest(req interface{}) *JWTManager_CreateJWTForRequest_Call {
	return &JWTManager_CreateJWTForRequest_Call{Call: _e.mock.On("CreateJWTForRequest", req)}
}

func (_c *JWTManager_CreateJWTForRequest_Call) Run(run func(req interface{})) *JWTManager_CreateJWTForRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *JWTManager_CreateJWTForRequest_Call) Return(_a0 string, _a1 error) *JWTManager_CreateJWTForRequest_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JWTManager_CreateJWTForRequest_Call) RunAndReturn(run func(interface{}) (string, error)) *JWTManager_CreateJWTForRequest_Call {
	_c.Call.Return(run)
	return _c
}

// NewJWTManager creates a new instance of JWTManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJWTManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *JWTManager {
	mock := &JWTManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
