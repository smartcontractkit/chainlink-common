// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	pb "github.com/smartcontractkit/chainlink-common/pkg/chipingress/pb"

	v2pb "github.com/cloudevents/sdk-go/binding/format/protobuf/v2/pb"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

type Client_Expecter struct {
	mock *mock.Mock
}

func (_m *Client) EXPECT() *Client_Expecter {
	return &Client_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *Client) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Client_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type Client_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *Client_Expecter) Close() *Client_Close_Call {
	return &Client_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *Client_Close_Call) Run(run func()) *Client_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Client_Close_Call) Return(_a0 error) *Client_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Client_Close_Call) RunAndReturn(run func() error) *Client_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields: ctx, in, opts
func (_m *Client) Ping(ctx context.Context, in *pb.EmptyRequest, opts ...grpc.CallOption) (*pb.PingResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 *pb.PingResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.EmptyRequest, ...grpc.CallOption) (*pb.PingResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.EmptyRequest, ...grpc.CallOption) *pb.PingResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.PingResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.EmptyRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type Client_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
//   - in *pb.EmptyRequest
//   - opts ...grpc.CallOption
func (_e *Client_Expecter) Ping(ctx interface{}, in interface{}, opts ...interface{}) *Client_Ping_Call {
	return &Client_Ping_Call{Call: _e.mock.On("Ping",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *Client_Ping_Call) Run(run func(ctx context.Context, in *pb.EmptyRequest, opts ...grpc.CallOption)) *Client_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*pb.EmptyRequest), variadicArgs...)
	})
	return _c
}

func (_c *Client_Ping_Call) Return(_a0 *pb.PingResponse, _a1 error) *Client_Ping_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_Ping_Call) RunAndReturn(run func(context.Context, *pb.EmptyRequest, ...grpc.CallOption) (*pb.PingResponse, error)) *Client_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: ctx, in, opts
func (_m *Client) Publish(ctx context.Context, in *v2pb.CloudEvent, opts ...grpc.CallOption) (*pb.PublishResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 *pb.PublishResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *v2pb.CloudEvent, ...grpc.CallOption) (*pb.PublishResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *v2pb.CloudEvent, ...grpc.CallOption) *pb.PublishResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.PublishResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *v2pb.CloudEvent, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type Client_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - in *v2pb.CloudEvent
//   - opts ...grpc.CallOption
func (_e *Client_Expecter) Publish(ctx interface{}, in interface{}, opts ...interface{}) *Client_Publish_Call {
	return &Client_Publish_Call{Call: _e.mock.On("Publish",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *Client_Publish_Call) Run(run func(ctx context.Context, in *v2pb.CloudEvent, opts ...grpc.CallOption)) *Client_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*v2pb.CloudEvent), variadicArgs...)
	})
	return _c
}

func (_c *Client_Publish_Call) Return(_a0 *pb.PublishResponse, _a1 error) *Client_Publish_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_Publish_Call) RunAndReturn(run func(context.Context, *v2pb.CloudEvent, ...grpc.CallOption) (*pb.PublishResponse, error)) *Client_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// PublishBatch provides a mock function with given fields: ctx, in, opts
func (_m *Client) PublishBatch(ctx context.Context, in *pb.CloudEventBatch, opts ...grpc.CallOption) (*pb.PublishResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PublishBatch")
	}

	var r0 *pb.PublishResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CloudEventBatch, ...grpc.CallOption) (*pb.PublishResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.CloudEventBatch, ...grpc.CallOption) *pb.PublishResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.PublishResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.CloudEventBatch, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_PublishBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishBatch'
type Client_PublishBatch_Call struct {
	*mock.Call
}

// PublishBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - in *pb.CloudEventBatch
//   - opts ...grpc.CallOption
func (_e *Client_Expecter) PublishBatch(ctx interface{}, in interface{}, opts ...interface{}) *Client_PublishBatch_Call {
	return &Client_PublishBatch_Call{Call: _e.mock.On("PublishBatch",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *Client_PublishBatch_Call) Run(run func(ctx context.Context, in *pb.CloudEventBatch, opts ...grpc.CallOption)) *Client_PublishBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*pb.CloudEventBatch), variadicArgs...)
	})
	return _c
}

func (_c *Client_PublishBatch_Call) Return(_a0 *pb.PublishResponse, _a1 error) *Client_PublishBatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_PublishBatch_Call) RunAndReturn(run func(context.Context, *pb.CloudEventBatch, ...grpc.CallOption) (*pb.PublishResponse, error)) *Client_PublishBatch_Call {
	_c.Call.Return(run)
	return _c
}

// StreamEvents provides a mock function with given fields: ctx, opts
func (_m *Client) StreamEvents(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[pb.StreamEventsRequest, pb.StreamEventsResponse], error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StreamEvents")
	}

	var r0 grpc.BidiStreamingClient[pb.StreamEventsRequest, pb.StreamEventsResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) (grpc.BidiStreamingClient[pb.StreamEventsRequest, pb.StreamEventsResponse], error)); ok {
		return rf(ctx, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...grpc.CallOption) grpc.BidiStreamingClient[pb.StreamEventsRequest, pb.StreamEventsResponse]); ok {
		r0 = rf(ctx, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.BidiStreamingClient[pb.StreamEventsRequest, pb.StreamEventsResponse])
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Client_StreamEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StreamEvents'
type Client_StreamEvents_Call struct {
	*mock.Call
}

// StreamEvents is a helper method to define mock.On call
//   - ctx context.Context
//   - opts ...grpc.CallOption
func (_e *Client_Expecter) StreamEvents(ctx interface{}, opts ...interface{}) *Client_StreamEvents_Call {
	return &Client_StreamEvents_Call{Call: _e.mock.On("StreamEvents",
		append([]interface{}{ctx}, opts...)...)}
}

func (_c *Client_StreamEvents_Call) Run(run func(ctx context.Context, opts ...grpc.CallOption)) *Client_StreamEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *Client_StreamEvents_Call) Return(_a0 grpc.BidiStreamingClient[pb.StreamEventsRequest, pb.StreamEventsResponse], _a1 error) *Client_StreamEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Client_StreamEvents_Call) RunAndReturn(run func(context.Context, ...grpc.CallOption) (grpc.BidiStreamingClient[pb.StreamEventsRequest, pb.StreamEventsResponse], error)) *Client_StreamEvents_Call {
	_c.Call.Return(run)
	return _c
}

// NewClient creates a new instance of Client. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *Client {
	mock := &Client{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
