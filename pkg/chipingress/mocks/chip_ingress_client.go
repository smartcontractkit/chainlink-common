// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	event "github.com/cloudevents/sdk-go/v2/event"
	mock "github.com/stretchr/testify/mock"

	pb "github.com/smartcontractkit/chainlink-common/pkg/chipingress/pb"
)

// ChipIngressClient is an autogenerated mock type for the ChipIngressClient type
type ChipIngressClient struct {
	mock.Mock
}

type ChipIngressClient_Expecter struct {
	mock *mock.Mock
}

func (_m *ChipIngressClient) EXPECT() *ChipIngressClient_Expecter {
	return &ChipIngressClient_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *ChipIngressClient) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChipIngressClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type ChipIngressClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *ChipIngressClient_Expecter) Close() *ChipIngressClient_Close_Call {
	return &ChipIngressClient_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *ChipIngressClient_Close_Call) Run(run func()) *ChipIngressClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ChipIngressClient_Close_Call) Return(_a0 error) *ChipIngressClient_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ChipIngressClient_Close_Call) RunAndReturn(run func() error) *ChipIngressClient_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields: ctx
func (_m *ChipIngressClient) Ping(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChipIngressClient_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type ChipIngressClient_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ChipIngressClient_Expecter) Ping(ctx interface{}) *ChipIngressClient_Ping_Call {
	return &ChipIngressClient_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *ChipIngressClient_Ping_Call) Run(run func(ctx context.Context)) *ChipIngressClient_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ChipIngressClient_Ping_Call) Return(_a0 string, _a1 error) *ChipIngressClient_Ping_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ChipIngressClient_Ping_Call) RunAndReturn(run func(context.Context) (string, error)) *ChipIngressClient_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: ctx, _a1
func (_m *ChipIngressClient) Publish(ctx context.Context, _a1 event.Event) (*pb.PublishResponse, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 *pb.PublishResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, event.Event) (*pb.PublishResponse, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, event.Event) *pb.PublishResponse); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.PublishResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, event.Event) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChipIngressClient_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type ChipIngressClient_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 event.Event
func (_e *ChipIngressClient_Expecter) Publish(ctx interface{}, _a1 interface{}) *ChipIngressClient_Publish_Call {
	return &ChipIngressClient_Publish_Call{Call: _e.mock.On("Publish", ctx, _a1)}
}

func (_c *ChipIngressClient_Publish_Call) Run(run func(ctx context.Context, _a1 event.Event)) *ChipIngressClient_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(event.Event))
	})
	return _c
}

func (_c *ChipIngressClient_Publish_Call) Return(_a0 *pb.PublishResponse, _a1 error) *ChipIngressClient_Publish_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ChipIngressClient_Publish_Call) RunAndReturn(run func(context.Context, event.Event) (*pb.PublishResponse, error)) *ChipIngressClient_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// PublishBatch provides a mock function with given fields: ctx, events
func (_m *ChipIngressClient) PublishBatch(ctx context.Context, events []event.Event) (*pb.PublishResponse, error) {
	ret := _m.Called(ctx, events)

	if len(ret) == 0 {
		panic("no return value specified for PublishBatch")
	}

	var r0 *pb.PublishResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []event.Event) (*pb.PublishResponse, error)); ok {
		return rf(ctx, events)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []event.Event) *pb.PublishResponse); ok {
		r0 = rf(ctx, events)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.PublishResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []event.Event) error); ok {
		r1 = rf(ctx, events)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChipIngressClient_PublishBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PublishBatch'
type ChipIngressClient_PublishBatch_Call struct {
	*mock.Call
}

// PublishBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - events []event.Event
func (_e *ChipIngressClient_Expecter) PublishBatch(ctx interface{}, events interface{}) *ChipIngressClient_PublishBatch_Call {
	return &ChipIngressClient_PublishBatch_Call{Call: _e.mock.On("PublishBatch", ctx, events)}
}

func (_c *ChipIngressClient_PublishBatch_Call) Run(run func(ctx context.Context, events []event.Event)) *ChipIngressClient_PublishBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]event.Event))
	})
	return _c
}

func (_c *ChipIngressClient_PublishBatch_Call) Return(_a0 *pb.PublishResponse, _a1 error) *ChipIngressClient_PublishBatch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ChipIngressClient_PublishBatch_Call) RunAndReturn(run func(context.Context, []event.Event) (*pb.PublishResponse, error)) *ChipIngressClient_PublishBatch_Call {
	_c.Call.Return(run)
	return _c
}

// NewChipIngressClient creates a new instance of ChipIngressClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChipIngressClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChipIngressClient {
	mock := &ChipIngressClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
