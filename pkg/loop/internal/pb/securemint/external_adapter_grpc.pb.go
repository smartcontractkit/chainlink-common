// protobuf representation of https://github.com/smartcontractkit/por_mock_ocr3plugin/blob/main/por/external_adapter_interface.go

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: external_adapter.proto

package securemintpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ExternalAdapter_GetPayload_FullMethodName = "/loop.internal.pb.securemint.ExternalAdapter/GetPayload"
)

// ExternalAdapterClient is the client API for ExternalAdapter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ExternalAdapter is the component used by the secure mint plugin to request various secure mint related data points.
type ExternalAdapterClient interface {
	GetPayload(ctx context.Context, in *Blocks, opts ...grpc.CallOption) (*ExternalAdapterPayload, error)
}

type externalAdapterClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalAdapterClient(cc grpc.ClientConnInterface) ExternalAdapterClient {
	return &externalAdapterClient{cc}
}

func (c *externalAdapterClient) GetPayload(ctx context.Context, in *Blocks, opts ...grpc.CallOption) (*ExternalAdapterPayload, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExternalAdapterPayload)
	err := c.cc.Invoke(ctx, ExternalAdapter_GetPayload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalAdapterServer is the server API for ExternalAdapter service.
// All implementations must embed UnimplementedExternalAdapterServer
// for forward compatibility.
//
// ExternalAdapter is the component used by the secure mint plugin to request various secure mint related data points.
type ExternalAdapterServer interface {
	GetPayload(context.Context, *Blocks) (*ExternalAdapterPayload, error)
	mustEmbedUnimplementedExternalAdapterServer()
}

// UnimplementedExternalAdapterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedExternalAdapterServer struct{}

func (UnimplementedExternalAdapterServer) GetPayload(context.Context, *Blocks) (*ExternalAdapterPayload, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayload not implemented")
}
func (UnimplementedExternalAdapterServer) mustEmbedUnimplementedExternalAdapterServer() {}
func (UnimplementedExternalAdapterServer) testEmbeddedByValue()                         {}

// UnsafeExternalAdapterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalAdapterServer will
// result in compilation errors.
type UnsafeExternalAdapterServer interface {
	mustEmbedUnimplementedExternalAdapterServer()
}

func RegisterExternalAdapterServer(s grpc.ServiceRegistrar, srv ExternalAdapterServer) {
	// If the following call pancis, it indicates UnimplementedExternalAdapterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ExternalAdapter_ServiceDesc, srv)
}

func _ExternalAdapter_GetPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Blocks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalAdapterServer).GetPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalAdapter_GetPayload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalAdapterServer).GetPayload(ctx, req.(*Blocks))
	}
	return interceptor(ctx, in, info, handler)
}

// ExternalAdapter_ServiceDesc is the grpc.ServiceDesc for ExternalAdapter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExternalAdapter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.internal.pb.securemint.ExternalAdapter",
	HandlerType: (*ExternalAdapterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPayload",
			Handler:    _ExternalAdapter_GetPayload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "external_adapter.proto",
}
