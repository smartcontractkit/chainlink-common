// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: reporting_plugin_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReportingPluginService_NewReportingPluginFactory_FullMethodName = "/loop.ReportingPluginService/NewReportingPluginFactory"
	ReportingPluginService_NewValidationService_FullMethodName      = "/loop.ReportingPluginService/NewValidationService"
)

// ReportingPluginServiceClient is the client API for ReportingPluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReportingPluginServiceClient interface {
	NewReportingPluginFactory(ctx context.Context, in *NewReportingPluginFactoryRequest, opts ...grpc.CallOption) (*NewReportingPluginFactoryReply, error)
	NewValidationService(ctx context.Context, in *ValidationServiceRequest, opts ...grpc.CallOption) (*ValidationServiceResponse, error)
}

type reportingPluginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReportingPluginServiceClient(cc grpc.ClientConnInterface) ReportingPluginServiceClient {
	return &reportingPluginServiceClient{cc}
}

func (c *reportingPluginServiceClient) NewReportingPluginFactory(ctx context.Context, in *NewReportingPluginFactoryRequest, opts ...grpc.CallOption) (*NewReportingPluginFactoryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewReportingPluginFactoryReply)
	err := c.cc.Invoke(ctx, ReportingPluginService_NewReportingPluginFactory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingPluginServiceClient) NewValidationService(ctx context.Context, in *ValidationServiceRequest, opts ...grpc.CallOption) (*ValidationServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidationServiceResponse)
	err := c.cc.Invoke(ctx, ReportingPluginService_NewValidationService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportingPluginServiceServer is the server API for ReportingPluginService service.
// All implementations must embed UnimplementedReportingPluginServiceServer
// for forward compatibility.
type ReportingPluginServiceServer interface {
	NewReportingPluginFactory(context.Context, *NewReportingPluginFactoryRequest) (*NewReportingPluginFactoryReply, error)
	NewValidationService(context.Context, *ValidationServiceRequest) (*ValidationServiceResponse, error)
	mustEmbedUnimplementedReportingPluginServiceServer()
}

// UnimplementedReportingPluginServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReportingPluginServiceServer struct{}

func (UnimplementedReportingPluginServiceServer) NewReportingPluginFactory(context.Context, *NewReportingPluginFactoryRequest) (*NewReportingPluginFactoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewReportingPluginFactory not implemented")
}
func (UnimplementedReportingPluginServiceServer) NewValidationService(context.Context, *ValidationServiceRequest) (*ValidationServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewValidationService not implemented")
}
func (UnimplementedReportingPluginServiceServer) mustEmbedUnimplementedReportingPluginServiceServer() {
}
func (UnimplementedReportingPluginServiceServer) testEmbeddedByValue() {}

// UnsafeReportingPluginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReportingPluginServiceServer will
// result in compilation errors.
type UnsafeReportingPluginServiceServer interface {
	mustEmbedUnimplementedReportingPluginServiceServer()
}

func RegisterReportingPluginServiceServer(s grpc.ServiceRegistrar, srv ReportingPluginServiceServer) {
	// If the following call pancis, it indicates UnimplementedReportingPluginServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReportingPluginService_ServiceDesc, srv)
}

func _ReportingPluginService_NewReportingPluginFactory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewReportingPluginFactoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingPluginServiceServer).NewReportingPluginFactory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportingPluginService_NewReportingPluginFactory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingPluginServiceServer).NewReportingPluginFactory(ctx, req.(*NewReportingPluginFactoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingPluginService_NewValidationService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidationServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingPluginServiceServer).NewValidationService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportingPluginService_NewValidationService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingPluginServiceServer).NewValidationService(ctx, req.(*ValidationServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReportingPluginService_ServiceDesc is the grpc.ServiceDesc for ReportingPluginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReportingPluginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.ReportingPluginService",
	HandlerType: (*ReportingPluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewReportingPluginFactory",
			Handler:    _ReportingPluginService_NewReportingPluginFactory_Handler,
		},
		{
			MethodName: "NewValidationService",
			Handler:    _ReportingPluginService_NewValidationService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reporting_plugin_service.proto",
}
