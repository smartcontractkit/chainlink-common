// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: reporting.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReportingPluginFactory_NewReportingPlugin_FullMethodName = "/loop.ReportingPluginFactory/NewReportingPlugin"
)

// ReportingPluginFactoryClient is the client API for ReportingPluginFactory service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReportingPluginFactoryClient interface {
	NewReportingPlugin(ctx context.Context, in *NewReportingPluginRequest, opts ...grpc.CallOption) (*NewReportingPluginReply, error)
}

type reportingPluginFactoryClient struct {
	cc grpc.ClientConnInterface
}

func NewReportingPluginFactoryClient(cc grpc.ClientConnInterface) ReportingPluginFactoryClient {
	return &reportingPluginFactoryClient{cc}
}

func (c *reportingPluginFactoryClient) NewReportingPlugin(ctx context.Context, in *NewReportingPluginRequest, opts ...grpc.CallOption) (*NewReportingPluginReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewReportingPluginReply)
	err := c.cc.Invoke(ctx, ReportingPluginFactory_NewReportingPlugin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportingPluginFactoryServer is the server API for ReportingPluginFactory service.
// All implementations must embed UnimplementedReportingPluginFactoryServer
// for forward compatibility.
type ReportingPluginFactoryServer interface {
	NewReportingPlugin(context.Context, *NewReportingPluginRequest) (*NewReportingPluginReply, error)
	mustEmbedUnimplementedReportingPluginFactoryServer()
}

// UnimplementedReportingPluginFactoryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReportingPluginFactoryServer struct{}

func (UnimplementedReportingPluginFactoryServer) NewReportingPlugin(context.Context, *NewReportingPluginRequest) (*NewReportingPluginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewReportingPlugin not implemented")
}
func (UnimplementedReportingPluginFactoryServer) mustEmbedUnimplementedReportingPluginFactoryServer() {
}
func (UnimplementedReportingPluginFactoryServer) testEmbeddedByValue() {}

// UnsafeReportingPluginFactoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReportingPluginFactoryServer will
// result in compilation errors.
type UnsafeReportingPluginFactoryServer interface {
	mustEmbedUnimplementedReportingPluginFactoryServer()
}

func RegisterReportingPluginFactoryServer(s grpc.ServiceRegistrar, srv ReportingPluginFactoryServer) {
	// If the following call pancis, it indicates UnimplementedReportingPluginFactoryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReportingPluginFactory_ServiceDesc, srv)
}

func _ReportingPluginFactory_NewReportingPlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewReportingPluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingPluginFactoryServer).NewReportingPlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportingPluginFactory_NewReportingPlugin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingPluginFactoryServer).NewReportingPlugin(ctx, req.(*NewReportingPluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReportingPluginFactory_ServiceDesc is the grpc.ServiceDesc for ReportingPluginFactory service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReportingPluginFactory_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.ReportingPluginFactory",
	HandlerType: (*ReportingPluginFactoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewReportingPlugin",
			Handler:    _ReportingPluginFactory_NewReportingPlugin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reporting.proto",
}

const (
	ReportingPlugin_Query_FullMethodName                        = "/loop.ReportingPlugin/Query"
	ReportingPlugin_Observation_FullMethodName                  = "/loop.ReportingPlugin/Observation"
	ReportingPlugin_Report_FullMethodName                       = "/loop.ReportingPlugin/Report"
	ReportingPlugin_ShouldAcceptFinalizedReport_FullMethodName  = "/loop.ReportingPlugin/ShouldAcceptFinalizedReport"
	ReportingPlugin_ShouldTransmitAcceptedReport_FullMethodName = "/loop.ReportingPlugin/ShouldTransmitAcceptedReport"
	ReportingPlugin_Close_FullMethodName                        = "/loop.ReportingPlugin/Close"
)

// ReportingPluginClient is the client API for ReportingPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReportingPluginClient interface {
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error)
	Observation(ctx context.Context, in *ObservationRequest, opts ...grpc.CallOption) (*ObservationReply, error)
	Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportReply, error)
	ShouldAcceptFinalizedReport(ctx context.Context, in *ShouldAcceptFinalizedReportRequest, opts ...grpc.CallOption) (*ShouldAcceptFinalizedReportReply, error)
	ShouldTransmitAcceptedReport(ctx context.Context, in *ShouldTransmitAcceptedReportRequest, opts ...grpc.CallOption) (*ShouldTransmitAcceptedReportReply, error)
	Close(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type reportingPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewReportingPluginClient(cc grpc.ClientConnInterface) ReportingPluginClient {
	return &reportingPluginClient{cc}
}

func (c *reportingPluginClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryReply)
	err := c.cc.Invoke(ctx, ReportingPlugin_Query_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingPluginClient) Observation(ctx context.Context, in *ObservationRequest, opts ...grpc.CallOption) (*ObservationReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ObservationReply)
	err := c.cc.Invoke(ctx, ReportingPlugin_Observation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingPluginClient) Report(ctx context.Context, in *ReportRequest, opts ...grpc.CallOption) (*ReportReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportReply)
	err := c.cc.Invoke(ctx, ReportingPlugin_Report_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingPluginClient) ShouldAcceptFinalizedReport(ctx context.Context, in *ShouldAcceptFinalizedReportRequest, opts ...grpc.CallOption) (*ShouldAcceptFinalizedReportReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShouldAcceptFinalizedReportReply)
	err := c.cc.Invoke(ctx, ReportingPlugin_ShouldAcceptFinalizedReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingPluginClient) ShouldTransmitAcceptedReport(ctx context.Context, in *ShouldTransmitAcceptedReportRequest, opts ...grpc.CallOption) (*ShouldTransmitAcceptedReportReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ShouldTransmitAcceptedReportReply)
	err := c.cc.Invoke(ctx, ReportingPlugin_ShouldTransmitAcceptedReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportingPluginClient) Close(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ReportingPlugin_Close_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportingPluginServer is the server API for ReportingPlugin service.
// All implementations must embed UnimplementedReportingPluginServer
// for forward compatibility.
type ReportingPluginServer interface {
	Query(context.Context, *QueryRequest) (*QueryReply, error)
	Observation(context.Context, *ObservationRequest) (*ObservationReply, error)
	Report(context.Context, *ReportRequest) (*ReportReply, error)
	ShouldAcceptFinalizedReport(context.Context, *ShouldAcceptFinalizedReportRequest) (*ShouldAcceptFinalizedReportReply, error)
	ShouldTransmitAcceptedReport(context.Context, *ShouldTransmitAcceptedReportRequest) (*ShouldTransmitAcceptedReportReply, error)
	Close(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedReportingPluginServer()
}

// UnimplementedReportingPluginServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReportingPluginServer struct{}

func (UnimplementedReportingPluginServer) Query(context.Context, *QueryRequest) (*QueryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedReportingPluginServer) Observation(context.Context, *ObservationRequest) (*ObservationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Observation not implemented")
}
func (UnimplementedReportingPluginServer) Report(context.Context, *ReportRequest) (*ReportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Report not implemented")
}
func (UnimplementedReportingPluginServer) ShouldAcceptFinalizedReport(context.Context, *ShouldAcceptFinalizedReportRequest) (*ShouldAcceptFinalizedReportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShouldAcceptFinalizedReport not implemented")
}
func (UnimplementedReportingPluginServer) ShouldTransmitAcceptedReport(context.Context, *ShouldTransmitAcceptedReportRequest) (*ShouldTransmitAcceptedReportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShouldTransmitAcceptedReport not implemented")
}
func (UnimplementedReportingPluginServer) Close(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedReportingPluginServer) mustEmbedUnimplementedReportingPluginServer() {}
func (UnimplementedReportingPluginServer) testEmbeddedByValue()                         {}

// UnsafeReportingPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReportingPluginServer will
// result in compilation errors.
type UnsafeReportingPluginServer interface {
	mustEmbedUnimplementedReportingPluginServer()
}

func RegisterReportingPluginServer(s grpc.ServiceRegistrar, srv ReportingPluginServer) {
	// If the following call pancis, it indicates UnimplementedReportingPluginServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReportingPlugin_ServiceDesc, srv)
}

func _ReportingPlugin_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingPluginServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportingPlugin_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingPluginServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingPlugin_Observation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingPluginServer).Observation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportingPlugin_Observation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingPluginServer).Observation(ctx, req.(*ObservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingPlugin_Report_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingPluginServer).Report(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportingPlugin_Report_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingPluginServer).Report(ctx, req.(*ReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingPlugin_ShouldAcceptFinalizedReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShouldAcceptFinalizedReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingPluginServer).ShouldAcceptFinalizedReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportingPlugin_ShouldAcceptFinalizedReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingPluginServer).ShouldAcceptFinalizedReport(ctx, req.(*ShouldAcceptFinalizedReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingPlugin_ShouldTransmitAcceptedReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShouldTransmitAcceptedReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingPluginServer).ShouldTransmitAcceptedReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportingPlugin_ShouldTransmitAcceptedReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingPluginServer).ShouldTransmitAcceptedReport(ctx, req.(*ShouldTransmitAcceptedReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportingPlugin_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingPluginServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportingPlugin_Close_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingPluginServer).Close(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ReportingPlugin_ServiceDesc is the grpc.ServiceDesc for ReportingPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReportingPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.ReportingPlugin",
	HandlerType: (*ReportingPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _ReportingPlugin_Query_Handler,
		},
		{
			MethodName: "Observation",
			Handler:    _ReportingPlugin_Observation_Handler,
		},
		{
			MethodName: "Report",
			Handler:    _ReportingPlugin_Report_Handler,
		},
		{
			MethodName: "ShouldAcceptFinalizedReport",
			Handler:    _ReportingPlugin_ShouldAcceptFinalizedReport_Handler,
		},
		{
			MethodName: "ShouldTransmitAcceptedReport",
			Handler:    _ReportingPlugin_ShouldTransmitAcceptedReport_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _ReportingPlugin_Close_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reporting.proto",
}
