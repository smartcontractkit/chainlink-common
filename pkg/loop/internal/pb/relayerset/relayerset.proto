syntax = "proto3";

option go_package = "github.com/smartcontractkit/chainlink-common/pkg/loop/internal/pb/relayerset";

package loop.relayerset;

import "google/protobuf/empty.proto";
import "loop/internal/pb/contract_reader.proto";
import "loop/internal/pb/contract_writer.proto";
import "chains/evm/evm.proto";

message RelayerId {
  string network = 1;
  string chain_id = 2;
}

message GetRelayerRequest {
  RelayerId id = 1;
}

message GetRelayerResponse {
  RelayerId id = 1;
}

message ListAllRelayersRequest {
  repeated RelayerId ids = 1;
}

message ListAllRelayersResponse {
  repeated RelayerId ids = 1;
}

message RelayArgs {
  string contractID = 1;
  bytes relayConfig = 2;
  string providerType = 3;
  // TODO - this is a temporary solution to minimise refactor and allow the relayer to pass necessary credentials to the plugin - should be rolled into the relayConfig as a second step
  MercuryCredentials mercuryCredentials = 4;
}

// TODO - this is a temporary solution to minimise refactor and allow the relayer to pass necessary credentials to the plugin - should be rolled into the relayConfig as a second step
message MercuryCredentials {
  string legacy_url=1;
  string url=2;
  string username=3;
  string password=4;
}

message PluginArgs {
  string transmitterID = 1;
  bytes pluginConfig = 2;
}

message NewPluginProviderRequest {
  RelayerId relayerId = 1;
  RelayArgs relayArgs = 2;
  PluginArgs pluginArgs = 3;
}

message NewPluginProviderResponse {
  uint32 plugin_provider_id = 1;
}

message NewContractReaderRequest {
  RelayerId relayerId = 1;
  bytes contractReaderConfig = 2;
}

message NewContractReaderResponse {
  string contractReaderId = 1;
}

message NewContractWriterRequest {
  RelayerId relayerId = 1;
  bytes contractWriterConfig = 2;
}

message NewContractWriterResponse {
  uint32 contractWriterId = 1;
}

message LatestHeadRequest {
  RelayerId relayerId = 1;
}

message LatestHeadResponse {
  string height = 1;
  bytes hash = 2;
  uint64 timestamp = 3;
}

message RelayerHealthReportResponse {
  map<string, string> report = 1;
}

message RelayerNameResponse {
  string name = 1;
}

service RelayerSet {
  rpc Get(GetRelayerRequest) returns (GetRelayerResponse) {}
  rpc List(ListAllRelayersRequest) returns (ListAllRelayersResponse) {}
  rpc NewPluginProvider(NewPluginProviderRequest) returns (NewPluginProviderResponse) {}
  rpc NewContractReader(NewContractReaderRequest) returns (NewContractReaderResponse) {}
  rpc NewContractWriter(NewContractWriterRequest) returns (NewContractWriterResponse) {}

  rpc StartRelayer(RelayerId) returns (google.protobuf.Empty) {}
  rpc CloseRelayer(RelayerId) returns (google.protobuf.Empty) {}
  rpc RelayerReady(RelayerId) returns (google.protobuf.Empty) {}
  rpc RelayerHealthReport(RelayerId) returns (RelayerHealthReportResponse) {}
  rpc RelayerName(RelayerId) returns (RelayerNameResponse) {}
  rpc RelayerLatestHead(LatestHeadRequest) returns (LatestHeadResponse) {}

  rpc ContractReaderGetLatestValue (ContractReaderGetLatestValueRequest) returns (GetLatestValueReply) {}
  rpc ContractReaderGetLatestValueWithHeadData (ContractReaderGetLatestValueRequest) returns (GetLatestValueWithHeadDataReply) {}
  rpc ContractReaderBatchGetLatestValues (ContractReaderBatchGetLatestValuesRequest) returns (BatchGetLatestValuesReply) {}
  rpc ContractReaderQueryKey(ContractReaderQueryKeyRequest) returns (QueryKeyReply) {}
  rpc ContractReaderQueryKeys(ContractReaderQueryKeysRequest) returns (QueryKeysReply) {}
  rpc ContractReaderBind(ContractReaderBindRequest) returns (google.protobuf.Empty) {}
  rpc ContractReaderUnbind(ContractReaderUnbindRequest) returns (google.protobuf.Empty) {}
  rpc ContractReaderStart(ContractReaderStartRequest) returns (google.protobuf.Empty) {}
  rpc ContractReaderClose(ContractReaderCloseRequest) returns (google.protobuf.Empty) {}
}

service EVMRelayerSet {
  rpc GetTransactionFee(GetTransactionFeeRequest) returns (loop.evm.GetTransactionFeeReply) {}
  rpc CallContract(CallContractRequest) returns (loop.evm.CallContractReply);
  rpc FilterLogs(FilterLogsRequest) returns (loop.evm.FilterLogsReply);
  rpc BalanceAt(BalanceAtRequest) returns (loop.evm.BalanceAtReply);
  rpc EstimateGas(EstimateGasRequest) returns (loop.evm.EstimateGasReply);
  rpc GetTransactionByHash(GetTransactionByHashRequest) returns (loop.evm.GetTransactionByHashReply);
  rpc GetTransactionReceipt(GetTransactionReceiptRequest) returns (loop.evm.GetTransactionReceiptReply);
  rpc LatestAndFinalizedHead(LatestHeadRequest) returns (loop.evm.LatestAndFinalizedHeadReply);
  rpc QueryTrackedLogs(QueryTrackedLogsRequest) returns (loop.evm.QueryTrackedLogsReply);
  rpc RegisterLogTracking(RegisterLogTrackingRequest) returns (google.protobuf.Empty);
  rpc UnregisterLogTracking(UnregisterLogTrackingRequest) returns (google.protobuf.Empty);
  rpc GetTransactionStatus(GetTransactionStatusRequest) returns (loop.evm.GetTransactionStatusReply);
  rpc SubmitTransaction(SubmitTransactionRequest) returns (loop.evm.SubmitTransactionReply);
  rpc CalculateTransactionFee(CalculateTransactionFeeRequest) returns (loop.evm.CalculateTransactionFeeReply); 
}

message ContractReaderGetLatestValueRequest {
  string contractReaderId = 1;
  GetLatestValueRequest request = 2;
}

message ContractReaderBatchGetLatestValuesRequest {
  string contractReaderId = 1;
  BatchGetLatestValuesRequest request = 2;
}

message ContractReaderQueryKeyRequest {
  string contractReaderId = 1;
  QueryKeyRequest request = 2;
}

message ContractReaderQueryKeysRequest {
  string contractReaderId = 1;
  QueryKeysRequest request = 2;
}

message ContractReaderBindRequest {
  string contractReaderId = 1;
  BindRequest request = 2;
}

message ContractReaderUnbindRequest {
  string contractReaderId = 1;
  UnbindRequest request = 2;
}

message ContractReaderStartRequest {
  string contractReaderId = 1;
}

message ContractReaderCloseRequest {
  string contractReaderId = 1;
}

message GetTransactionFeeRequest {
  RelayerId relayerId = 1;
  loop.evm.GetTransactionFeeRequest request = 2;
}

message CallContractRequest {
  RelayerId relayerId = 1;
  loop.evm.CallContractRequest request = 2;
}

message FilterLogsRequest {
  RelayerId relayerId = 1;
  loop.evm.FilterLogsRequest request = 2;
}

message BalanceAtRequest {
  RelayerId relayerId = 1;
  loop.evm.BalanceAtRequest request = 2;
}

message EstimateGasRequest {
  RelayerId relayerId = 1;
  loop.evm.EstimateGasRequest request = 2;
}

message GetTransactionByHashRequest {
  RelayerId relayerId = 1;
  loop.evm.GetTransactionByHashRequest request = 2;
}

message GetTransactionReceiptRequest {
  RelayerId relayerId = 1;
  loop.evm.GetTransactionReceiptRequest request = 2;
}

message QueryTrackedLogsRequest {
  RelayerId relayerId = 1;
  loop.evm.QueryTrackedLogsRequest request = 2;
}

message RegisterLogTrackingRequest {
  RelayerId relayerId = 1;
  loop.evm.RegisterLogTrackingRequest request = 2;
}

message UnregisterLogTrackingRequest {
  RelayerId relayerId = 1;
  loop.evm.UnregisterLogTrackingRequest request = 2;
}

message GetTransactionStatusRequest {
  RelayerId relayerId = 1;
  loop.evm.GetTransactionStatusRequest request = 2;
}

message SubmitTransactionRequest {
   RelayerId relayerId = 1; 
   loop.evm.SubmitTransactionRequest request = 2;
}

message CalculateTransactionFeeRequest {
   RelayerId relayerId = 1; 
   loop.evm.CalculateTransactionFeeRequest request = 2;
}




