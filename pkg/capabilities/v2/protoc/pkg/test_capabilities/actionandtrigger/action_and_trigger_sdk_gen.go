// Code generated by github.com/smartcontractkit/chainlink-common/pkg/capabilities/v2/protoc, DO NOT EDIT.

package actionandtrigger

import (
	"errors"

	"google.golang.org/protobuf/types/known/anypb"

	"github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk/v2"
	sdkpb "github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk/v2/pb"
)

type Basic struct {
	// TODO: https://smartcontract-it.atlassian.net/browse/CAPPL-799 allow defaults for capabilities
}

func (c *Basic) Action(runtime sdk.Runtime, input *Input) sdk.Promise[*Output] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*Output](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
		Id:      "basic-test-action-trigger@1.0.0",
		Payload: wrapped,
		Method:  "Action",
	}), func(i *sdkpb.CapabilityResponse) (*Output, error) {
		switch payload := i.Response.(type) {
		case *sdkpb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *sdkpb.CapabilityResponse_Payload:
			output := &Output{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func Trigger(config *Config) sdk.Trigger[*TriggerEvent, *TriggerEvent] {
	configAny, _ := anypb.New(config)
	return &basicTrigger{
		config: configAny,
	}
}

type basicTrigger struct {
	config *anypb.Any
}

func (*basicTrigger) IsTrigger() {}

func (*basicTrigger) NewT() *TriggerEvent {
	return &TriggerEvent{}
}

func (*basicTrigger) CapabilityID() string {
	return "basic-test-action-trigger@1.0.0"
}

func (*basicTrigger) Method() string {
	return "Trigger"
}

func (t *basicTrigger) ConfigAsAny() *anypb.Any {
	return t.config
}

func (t *basicTrigger) Adapt(trigger *TriggerEvent) (*TriggerEvent, error) {
	return trigger, nil
}
