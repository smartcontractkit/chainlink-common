// Code generated by mockery v2.53.3. DO NOT EDIT.

package monitoring

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// SourceMock is an autogenerated mock type for the Source type
type SourceMock struct {
	mock.Mock
}

type SourceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *SourceMock) EXPECT() *SourceMock_Expecter {
	return &SourceMock_Expecter{mock: &_m.Mock}
}

// Fetch provides a mock function with given fields: _a0
func (_m *SourceMock) Fetch(_a0 context.Context) (interface{}, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Fetch")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (interface{}, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SourceMock_Fetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetch'
type SourceMock_Fetch_Call struct {
	*mock.Call
}

// Fetch is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *SourceMock_Expecter) Fetch(_a0 interface{}) *SourceMock_Fetch_Call {
	return &SourceMock_Fetch_Call{Call: _e.mock.On("Fetch", _a0)}
}

func (_c *SourceMock_Fetch_Call) Run(run func(_a0 context.Context)) *SourceMock_Fetch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SourceMock_Fetch_Call) Return(_a0 interface{}, _a1 error) *SourceMock_Fetch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SourceMock_Fetch_Call) RunAndReturn(run func(context.Context) (interface{}, error)) *SourceMock_Fetch_Call {
	_c.Call.Return(run)
	return _c
}

// NewSourceMock creates a new instance of SourceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSourceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *SourceMock {
	mock := &SourceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
