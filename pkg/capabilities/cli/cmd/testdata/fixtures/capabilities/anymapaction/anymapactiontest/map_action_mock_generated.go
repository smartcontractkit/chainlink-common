// Code generated by github.com/smartcontractkit/chainlink-common/pkg/capabilities/cli, DO NOT EDIT.

// Code generated by github.com/smartcontractkit/chainlink-common/pkg/capabilities/cli, DO NOT EDIT.

package anymapactiontest

import (
	"github.com/smartcontractkit/chainlink-common/pkg/capabilities/cli/cmd/testdata/fixtures/capabilities/anymapaction"
	"github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk/testutils"
)

// MapAction registers a new capability mock with the runner
// if another mock is registered for the same capability with for a step, it will take priority for that step.
func MapAction(runner *testutils.Runner, fn func(input anymapaction.MapActionInputs) (anymapaction.MapActionOutputs, error)) *testutils.Mock[anymapaction.MapActionInputs, anymapaction.MapActionOutputs] {
	mock := testutils.MockCapability[anymapaction.MapActionInputs, anymapaction.MapActionOutputs]("anymapaction@1.0.0", fn)
	runner.MockCapability("anymapaction@1.0.0", nil, mock)
	return mock
}

// MapActionForStep registers a new capability mock with the runner, but only for a given step.
// if another mock was registered for the same capability without a step, this mock will take priority for that step.
func MapActionForStep(runner *testutils.Runner, step string, mockFn func(input anymapaction.MapActionInputs) (anymapaction.MapActionOutputs, error)) *testutils.Mock[anymapaction.MapActionInputs, anymapaction.MapActionOutputs] {
	fn := mockFn
	mock := testutils.MockCapability[anymapaction.MapActionInputs, anymapaction.MapActionOutputs]("anymapaction@1.0.0", fn)
	runner.MockCapability("anymapaction@1.0.0", &step, mock)
	return mock
}
