// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: reporting.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NewReportingPluginRequest struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	ReportingPluginConfig *ReportingPluginConfig `protobuf:"bytes,1,opt,name=reportingPluginConfig,proto3" json:"reportingPluginConfig,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *NewReportingPluginRequest) Reset() {
	*x = NewReportingPluginRequest{}
	mi := &file_reporting_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewReportingPluginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewReportingPluginRequest) ProtoMessage() {}

func (x *NewReportingPluginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewReportingPluginRequest.ProtoReflect.Descriptor instead.
func (*NewReportingPluginRequest) Descriptor() ([]byte, []int) {
	return file_reporting_proto_rawDescGZIP(), []int{0}
}

func (x *NewReportingPluginRequest) GetReportingPluginConfig() *ReportingPluginConfig {
	if x != nil {
		return x.ReportingPluginConfig
	}
	return nil
}

type NewReportingPluginReply struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ReportingPluginID   uint32                 `protobuf:"varint,1,opt,name=reportingPluginID,proto3" json:"reportingPluginID,omitempty"`
	ReportingPluginInfo *ReportingPluginInfo   `protobuf:"bytes,2,opt,name=reportingPluginInfo,proto3" json:"reportingPluginInfo,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *NewReportingPluginReply) Reset() {
	*x = NewReportingPluginReply{}
	mi := &file_reporting_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewReportingPluginReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewReportingPluginReply) ProtoMessage() {}

func (x *NewReportingPluginReply) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewReportingPluginReply.ProtoReflect.Descriptor instead.
func (*NewReportingPluginReply) Descriptor() ([]byte, []int) {
	return file_reporting_proto_rawDescGZIP(), []int{1}
}

func (x *NewReportingPluginReply) GetReportingPluginID() uint32 {
	if x != nil {
		return x.ReportingPluginID
	}
	return 0
}

func (x *NewReportingPluginReply) GetReportingPluginInfo() *ReportingPluginInfo {
	if x != nil {
		return x.ReportingPluginInfo
	}
	return nil
}

// ReportingPluginConfig represents [github.com/smartcontractkit/libocr/offchainreporting2plus/types.ReportingPluginConfig]
type ReportingPluginConfig struct {
	state                                   protoimpl.MessageState `protogen:"open.v1"`
	ConfigDigest                            []byte                 `protobuf:"bytes,1,opt,name=configDigest,proto3" json:"configDigest,omitempty"` // [32]byte
	OracleID                                uint32                 `protobuf:"varint,2,opt,name=oracleID,proto3" json:"oracleID,omitempty"`        // uint8
	N                                       uint32                 `protobuf:"varint,3,opt,name=n,proto3" json:"n,omitempty"`
	F                                       uint32                 `protobuf:"varint,4,opt,name=f,proto3" json:"f,omitempty"`
	OnchainConfig                           []byte                 `protobuf:"bytes,5,opt,name=onchainConfig,proto3" json:"onchainConfig,omitempty"`
	OffchainConfig                          []byte                 `protobuf:"bytes,6,opt,name=offchainConfig,proto3" json:"offchainConfig,omitempty"`
	EstimatedRoundInterval                  int64                  `protobuf:"varint,7,opt,name=estimatedRoundInterval,proto3" json:"estimatedRoundInterval,omitempty"`
	MaxDurationQuery                        int64                  `protobuf:"varint,8,opt,name=maxDurationQuery,proto3" json:"maxDurationQuery,omitempty"`
	MaxDurationObservation                  int64                  `protobuf:"varint,9,opt,name=maxDurationObservation,proto3" json:"maxDurationObservation,omitempty"`
	MaxDurationReport                       int64                  `protobuf:"varint,10,opt,name=maxDurationReport,proto3" json:"maxDurationReport,omitempty"`
	MaxDurationShouldAcceptFinalizedReport  int64                  `protobuf:"varint,11,opt,name=maxDurationShouldAcceptFinalizedReport,proto3" json:"maxDurationShouldAcceptFinalizedReport,omitempty"`
	MaxDurationShouldTransmitAcceptedReport int64                  `protobuf:"varint,12,opt,name=maxDurationShouldTransmitAcceptedReport,proto3" json:"maxDurationShouldTransmitAcceptedReport,omitempty"`
	unknownFields                           protoimpl.UnknownFields
	sizeCache                               protoimpl.SizeCache
}

func (x *ReportingPluginConfig) Reset() {
	*x = ReportingPluginConfig{}
	mi := &file_reporting_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportingPluginConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportingPluginConfig) ProtoMessage() {}

func (x *ReportingPluginConfig) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportingPluginConfig.ProtoReflect.Descriptor instead.
func (*ReportingPluginConfig) Descriptor() ([]byte, []int) {
	return file_reporting_proto_rawDescGZIP(), []int{2}
}

func (x *ReportingPluginConfig) GetConfigDigest() []byte {
	if x != nil {
		return x.ConfigDigest
	}
	return nil
}

func (x *ReportingPluginConfig) GetOracleID() uint32 {
	if x != nil {
		return x.OracleID
	}
	return 0
}

func (x *ReportingPluginConfig) GetN() uint32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *ReportingPluginConfig) GetF() uint32 {
	if x != nil {
		return x.F
	}
	return 0
}

func (x *ReportingPluginConfig) GetOnchainConfig() []byte {
	if x != nil {
		return x.OnchainConfig
	}
	return nil
}

func (x *ReportingPluginConfig) GetOffchainConfig() []byte {
	if x != nil {
		return x.OffchainConfig
	}
	return nil
}

func (x *ReportingPluginConfig) GetEstimatedRoundInterval() int64 {
	if x != nil {
		return x.EstimatedRoundInterval
	}
	return 0
}

func (x *ReportingPluginConfig) GetMaxDurationQuery() int64 {
	if x != nil {
		return x.MaxDurationQuery
	}
	return 0
}

func (x *ReportingPluginConfig) GetMaxDurationObservation() int64 {
	if x != nil {
		return x.MaxDurationObservation
	}
	return 0
}

func (x *ReportingPluginConfig) GetMaxDurationReport() int64 {
	if x != nil {
		return x.MaxDurationReport
	}
	return 0
}

func (x *ReportingPluginConfig) GetMaxDurationShouldAcceptFinalizedReport() int64 {
	if x != nil {
		return x.MaxDurationShouldAcceptFinalizedReport
	}
	return 0
}

func (x *ReportingPluginConfig) GetMaxDurationShouldTransmitAcceptedReport() int64 {
	if x != nil {
		return x.MaxDurationShouldTransmitAcceptedReport
	}
	return 0
}

// ReportingPluginLimits represents [github.com/smartcontractkit/libocr/offchainreporting2plus/types.ReportingPluginLimits]
type ReportingPluginLimits struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MaxQueryLength       uint64                 `protobuf:"varint,1,opt,name=maxQueryLength,proto3" json:"maxQueryLength,omitempty"`
	MaxObservationLength uint64                 `protobuf:"varint,2,opt,name=maxObservationLength,proto3" json:"maxObservationLength,omitempty"`
	MaxReportLength      uint64                 `protobuf:"varint,3,opt,name=maxReportLength,proto3" json:"maxReportLength,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ReportingPluginLimits) Reset() {
	*x = ReportingPluginLimits{}
	mi := &file_reporting_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportingPluginLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportingPluginLimits) ProtoMessage() {}

func (x *ReportingPluginLimits) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportingPluginLimits.ProtoReflect.Descriptor instead.
func (*ReportingPluginLimits) Descriptor() ([]byte, []int) {
	return file_reporting_proto_rawDescGZIP(), []int{3}
}

func (x *ReportingPluginLimits) GetMaxQueryLength() uint64 {
	if x != nil {
		return x.MaxQueryLength
	}
	return 0
}

func (x *ReportingPluginLimits) GetMaxObservationLength() uint64 {
	if x != nil {
		return x.MaxObservationLength
	}
	return 0
}

func (x *ReportingPluginLimits) GetMaxReportLength() uint64 {
	if x != nil {
		return x.MaxReportLength
	}
	return 0
}

// ReportingPluginInfo represents [github.com/smartcontractkit/libocr/offchainreporting2plus/types.ReportingPluginInfo]
type ReportingPluginInfo struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	Name                  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	UniqueReports         bool                   `protobuf:"varint,2,opt,name=uniqueReports,proto3" json:"uniqueReports,omitempty"`
	ReportingPluginLimits *ReportingPluginLimits `protobuf:"bytes,3,opt,name=reportingPluginLimits,proto3" json:"reportingPluginLimits,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ReportingPluginInfo) Reset() {
	*x = ReportingPluginInfo{}
	mi := &file_reporting_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportingPluginInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportingPluginInfo) ProtoMessage() {}

func (x *ReportingPluginInfo) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportingPluginInfo.ProtoReflect.Descriptor instead.
func (*ReportingPluginInfo) Descriptor() ([]byte, []int) {
	return file_reporting_proto_rawDescGZIP(), []int{4}
}

func (x *ReportingPluginInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReportingPluginInfo) GetUniqueReports() bool {
	if x != nil {
		return x.UniqueReports
	}
	return false
}

func (x *ReportingPluginInfo) GetReportingPluginLimits() *ReportingPluginLimits {
	if x != nil {
		return x.ReportingPluginLimits
	}
	return nil
}

// QueryRequest has arguments for [github.com/smartcontractkit/libocr/offchainreporting2plus/types.ReportingPlugin.Query].
type QueryRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ReportTimestamp *ReportTimestamp       `protobuf:"bytes,1,opt,name=reportTimestamp,proto3" json:"reportTimestamp,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *QueryRequest) Reset() {
	*x = QueryRequest{}
	mi := &file_reporting_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryRequest) ProtoMessage() {}

func (x *QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryRequest.ProtoReflect.Descriptor instead.
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return file_reporting_proto_rawDescGZIP(), []int{5}
}

func (x *QueryRequest) GetReportTimestamp() *ReportTimestamp {
	if x != nil {
		return x.ReportTimestamp
	}
	return nil
}

// QueryReply has return arguments for [github.com/smartcontractkit/libocr/offchainreporting2plus/types.ReportingPlugin.Query].
type QueryReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Query         []byte                 `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QueryReply) Reset() {
	*x = QueryReply{}
	mi := &file_reporting_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryReply) ProtoMessage() {}

func (x *QueryReply) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryReply.ProtoReflect.Descriptor instead.
func (*QueryReply) Descriptor() ([]byte, []int) {
	return file_reporting_proto_rawDescGZIP(), []int{6}
}

func (x *QueryReply) GetQuery() []byte {
	if x != nil {
		return x.Query
	}
	return nil
}

// ObservationRequest has arguments for [github.com/smartcontractkit/libocr/offchainreporting2plus/types.ReportingPlugin.Observation].
type ObservationRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ReportTimestamp *ReportTimestamp       `protobuf:"bytes,1,opt,name=reportTimestamp,proto3" json:"reportTimestamp,omitempty"`
	Query           []byte                 `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ObservationRequest) Reset() {
	*x = ObservationRequest{}
	mi := &file_reporting_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObservationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationRequest) ProtoMessage() {}

func (x *ObservationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationRequest.ProtoReflect.Descriptor instead.
func (*ObservationRequest) Descriptor() ([]byte, []int) {
	return file_reporting_proto_rawDescGZIP(), []int{7}
}

func (x *ObservationRequest) GetReportTimestamp() *ReportTimestamp {
	if x != nil {
		return x.ReportTimestamp
	}
	return nil
}

func (x *ObservationRequest) GetQuery() []byte {
	if x != nil {
		return x.Query
	}
	return nil
}

// ObservationReply has return arguments for [github.com/smartcontractkit/libocr/offchainreporting2plus/types.ReportingPlugin.Observation].
type ObservationReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Observation   []byte                 `protobuf:"bytes,1,opt,name=observation,proto3" json:"observation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ObservationReply) Reset() {
	*x = ObservationReply{}
	mi := &file_reporting_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObservationReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationReply) ProtoMessage() {}

func (x *ObservationReply) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationReply.ProtoReflect.Descriptor instead.
func (*ObservationReply) Descriptor() ([]byte, []int) {
	return file_reporting_proto_rawDescGZIP(), []int{8}
}

func (x *ObservationReply) GetObservation() []byte {
	if x != nil {
		return x.Observation
	}
	return nil
}

// AttributedObservation represents [github.com/smartcontractkit/libocr/offchainreporting2plus/types.AttributedObservation]
type AttributedObservation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Observation   []byte                 `protobuf:"bytes,1,opt,name=observation,proto3" json:"observation,omitempty"`
	Observer      uint32                 `protobuf:"varint,2,opt,name=observer,proto3" json:"observer,omitempty"` // uint8
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttributedObservation) Reset() {
	*x = AttributedObservation{}
	mi := &file_reporting_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttributedObservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributedObservation) ProtoMessage() {}

func (x *AttributedObservation) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributedObservation.ProtoReflect.Descriptor instead.
func (*AttributedObservation) Descriptor() ([]byte, []int) {
	return file_reporting_proto_rawDescGZIP(), []int{9}
}

func (x *AttributedObservation) GetObservation() []byte {
	if x != nil {
		return x.Observation
	}
	return nil
}

func (x *AttributedObservation) GetObserver() uint32 {
	if x != nil {
		return x.Observer
	}
	return 0
}

// ReportRequest has arguments for [github.com/smartcontractkit/libocr/offchainreporting2plus/types.ReportingPlugin.Report].
type ReportRequest struct {
	state           protoimpl.MessageState   `protogen:"open.v1"`
	ReportTimestamp *ReportTimestamp         `protobuf:"bytes,1,opt,name=reportTimestamp,proto3" json:"reportTimestamp,omitempty"`
	Query           []byte                   `protobuf:"bytes,2,opt,name=query,proto3" json:"query,omitempty"`
	Observations    []*AttributedObservation `protobuf:"bytes,3,rep,name=observations,proto3" json:"observations,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ReportRequest) Reset() {
	*x = ReportRequest{}
	mi := &file_reporting_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportRequest) ProtoMessage() {}

func (x *ReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportRequest.ProtoReflect.Descriptor instead.
func (*ReportRequest) Descriptor() ([]byte, []int) {
	return file_reporting_proto_rawDescGZIP(), []int{10}
}

func (x *ReportRequest) GetReportTimestamp() *ReportTimestamp {
	if x != nil {
		return x.ReportTimestamp
	}
	return nil
}

func (x *ReportRequest) GetQuery() []byte {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ReportRequest) GetObservations() []*AttributedObservation {
	if x != nil {
		return x.Observations
	}
	return nil
}

// ReportReply has return arguments for [github.com/smartcontractkit/libocr/offchainreporting2plus/types.ReportingPlugin.Report].
type ReportReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ShouldReport  bool                   `protobuf:"varint,1,opt,name=shouldReport,proto3" json:"shouldReport,omitempty"`
	Report        []byte                 `protobuf:"bytes,2,opt,name=report,proto3" json:"report,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportReply) Reset() {
	*x = ReportReply{}
	mi := &file_reporting_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportReply) ProtoMessage() {}

func (x *ReportReply) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportReply.ProtoReflect.Descriptor instead.
func (*ReportReply) Descriptor() ([]byte, []int) {
	return file_reporting_proto_rawDescGZIP(), []int{11}
}

func (x *ReportReply) GetShouldReport() bool {
	if x != nil {
		return x.ShouldReport
	}
	return false
}

func (x *ReportReply) GetReport() []byte {
	if x != nil {
		return x.Report
	}
	return nil
}

// ShouldAcceptFinalizedReportRequest has arguments for [github.com/smartcontractkit/libocr/offchainreporting2plus/types.ReportingPlugin.ShouldAcceptFinalizedReport].
type ShouldAcceptFinalizedReportRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ReportTimestamp *ReportTimestamp       `protobuf:"bytes,1,opt,name=reportTimestamp,proto3" json:"reportTimestamp,omitempty"`
	Report          []byte                 `protobuf:"bytes,2,opt,name=report,proto3" json:"report,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ShouldAcceptFinalizedReportRequest) Reset() {
	*x = ShouldAcceptFinalizedReportRequest{}
	mi := &file_reporting_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShouldAcceptFinalizedReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShouldAcceptFinalizedReportRequest) ProtoMessage() {}

func (x *ShouldAcceptFinalizedReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShouldAcceptFinalizedReportRequest.ProtoReflect.Descriptor instead.
func (*ShouldAcceptFinalizedReportRequest) Descriptor() ([]byte, []int) {
	return file_reporting_proto_rawDescGZIP(), []int{12}
}

func (x *ShouldAcceptFinalizedReportRequest) GetReportTimestamp() *ReportTimestamp {
	if x != nil {
		return x.ReportTimestamp
	}
	return nil
}

func (x *ShouldAcceptFinalizedReportRequest) GetReport() []byte {
	if x != nil {
		return x.Report
	}
	return nil
}

// ShouldAcceptFinalizedReportReply has return arguments for [github.com/smartcontractkit/libocr/offchainreporting2plus/types.ReportingPlugin.ShouldAcceptFinalizedReport].
type ShouldAcceptFinalizedReportReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ShouldAccept  bool                   `protobuf:"varint,1,opt,name=shouldAccept,proto3" json:"shouldAccept,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShouldAcceptFinalizedReportReply) Reset() {
	*x = ShouldAcceptFinalizedReportReply{}
	mi := &file_reporting_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShouldAcceptFinalizedReportReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShouldAcceptFinalizedReportReply) ProtoMessage() {}

func (x *ShouldAcceptFinalizedReportReply) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShouldAcceptFinalizedReportReply.ProtoReflect.Descriptor instead.
func (*ShouldAcceptFinalizedReportReply) Descriptor() ([]byte, []int) {
	return file_reporting_proto_rawDescGZIP(), []int{13}
}

func (x *ShouldAcceptFinalizedReportReply) GetShouldAccept() bool {
	if x != nil {
		return x.ShouldAccept
	}
	return false
}

// ShouldTransmitAcceptedReportRequest has arguments for [github.com/smartcontractkit/libocr/offchainreporting2plus/types.ReportingPlugin.ShouldTransmitAcceptedReport].
type ShouldTransmitAcceptedReportRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ReportTimestamp *ReportTimestamp       `protobuf:"bytes,1,opt,name=reportTimestamp,proto3" json:"reportTimestamp,omitempty"`
	Report          []byte                 `protobuf:"bytes,2,opt,name=report,proto3" json:"report,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ShouldTransmitAcceptedReportRequest) Reset() {
	*x = ShouldTransmitAcceptedReportRequest{}
	mi := &file_reporting_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShouldTransmitAcceptedReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShouldTransmitAcceptedReportRequest) ProtoMessage() {}

func (x *ShouldTransmitAcceptedReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShouldTransmitAcceptedReportRequest.ProtoReflect.Descriptor instead.
func (*ShouldTransmitAcceptedReportRequest) Descriptor() ([]byte, []int) {
	return file_reporting_proto_rawDescGZIP(), []int{14}
}

func (x *ShouldTransmitAcceptedReportRequest) GetReportTimestamp() *ReportTimestamp {
	if x != nil {
		return x.ReportTimestamp
	}
	return nil
}

func (x *ShouldTransmitAcceptedReportRequest) GetReport() []byte {
	if x != nil {
		return x.Report
	}
	return nil
}

// ShouldTransmitAcceptedReportReply has return arguments for [github.com/smartcontractkit/libocr/offchainreporting2plus/types.ReportingPlugin.ShouldTransmitAcceptedReport].
type ShouldTransmitAcceptedReportReply struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	ShouldTransmit bool                   `protobuf:"varint,1,opt,name=shouldTransmit,proto3" json:"shouldTransmit,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ShouldTransmitAcceptedReportReply) Reset() {
	*x = ShouldTransmitAcceptedReportReply{}
	mi := &file_reporting_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShouldTransmitAcceptedReportReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShouldTransmitAcceptedReportReply) ProtoMessage() {}

func (x *ShouldTransmitAcceptedReportReply) ProtoReflect() protoreflect.Message {
	mi := &file_reporting_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShouldTransmitAcceptedReportReply.ProtoReflect.Descriptor instead.
func (*ShouldTransmitAcceptedReportReply) Descriptor() ([]byte, []int) {
	return file_reporting_proto_rawDescGZIP(), []int{15}
}

func (x *ShouldTransmitAcceptedReportReply) GetShouldTransmit() bool {
	if x != nil {
		return x.ShouldTransmit
	}
	return false
}

var File_reporting_proto protoreflect.FileDescriptor

const file_reporting_proto_rawDesc = "" +
	"\n" +
	"\x0freporting.proto\x12\x04loop\x1a\x1bgoogle/protobuf/empty.proto\x1a\rrelayer.proto\"n\n" +
	"\x19NewReportingPluginRequest\x12Q\n" +
	"\x15reportingPluginConfig\x18\x01 \x01(\v2\x1b.loop.ReportingPluginConfigR\x15reportingPluginConfig\"\x94\x01\n" +
	"\x17NewReportingPluginReply\x12,\n" +
	"\x11reportingPluginID\x18\x01 \x01(\rR\x11reportingPluginID\x12K\n" +
	"\x13reportingPluginInfo\x18\x02 \x01(\v2\x19.loop.ReportingPluginInfoR\x13reportingPluginInfo\"\xbd\x04\n" +
	"\x15ReportingPluginConfig\x12\"\n" +
	"\fconfigDigest\x18\x01 \x01(\fR\fconfigDigest\x12\x1a\n" +
	"\boracleID\x18\x02 \x01(\rR\boracleID\x12\f\n" +
	"\x01n\x18\x03 \x01(\rR\x01n\x12\f\n" +
	"\x01f\x18\x04 \x01(\rR\x01f\x12$\n" +
	"\ronchainConfig\x18\x05 \x01(\fR\ronchainConfig\x12&\n" +
	"\x0eoffchainConfig\x18\x06 \x01(\fR\x0eoffchainConfig\x126\n" +
	"\x16estimatedRoundInterval\x18\a \x01(\x03R\x16estimatedRoundInterval\x12*\n" +
	"\x10maxDurationQuery\x18\b \x01(\x03R\x10maxDurationQuery\x126\n" +
	"\x16maxDurationObservation\x18\t \x01(\x03R\x16maxDurationObservation\x12,\n" +
	"\x11maxDurationReport\x18\n" +
	" \x01(\x03R\x11maxDurationReport\x12V\n" +
	"&maxDurationShouldAcceptFinalizedReport\x18\v \x01(\x03R&maxDurationShouldAcceptFinalizedReport\x12X\n" +
	"'maxDurationShouldTransmitAcceptedReport\x18\f \x01(\x03R'maxDurationShouldTransmitAcceptedReport\"\x9d\x01\n" +
	"\x15ReportingPluginLimits\x12&\n" +
	"\x0emaxQueryLength\x18\x01 \x01(\x04R\x0emaxQueryLength\x122\n" +
	"\x14maxObservationLength\x18\x02 \x01(\x04R\x14maxObservationLength\x12(\n" +
	"\x0fmaxReportLength\x18\x03 \x01(\x04R\x0fmaxReportLength\"\xa2\x01\n" +
	"\x13ReportingPluginInfo\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12$\n" +
	"\runiqueReports\x18\x02 \x01(\bR\runiqueReports\x12Q\n" +
	"\x15reportingPluginLimits\x18\x03 \x01(\v2\x1b.loop.ReportingPluginLimitsR\x15reportingPluginLimits\"O\n" +
	"\fQueryRequest\x12?\n" +
	"\x0freportTimestamp\x18\x01 \x01(\v2\x15.loop.ReportTimestampR\x0freportTimestamp\"\"\n" +
	"\n" +
	"QueryReply\x12\x14\n" +
	"\x05query\x18\x01 \x01(\fR\x05query\"k\n" +
	"\x12ObservationRequest\x12?\n" +
	"\x0freportTimestamp\x18\x01 \x01(\v2\x15.loop.ReportTimestampR\x0freportTimestamp\x12\x14\n" +
	"\x05query\x18\x02 \x01(\fR\x05query\"4\n" +
	"\x10ObservationReply\x12 \n" +
	"\vobservation\x18\x01 \x01(\fR\vobservation\"U\n" +
	"\x15AttributedObservation\x12 \n" +
	"\vobservation\x18\x01 \x01(\fR\vobservation\x12\x1a\n" +
	"\bobserver\x18\x02 \x01(\rR\bobserver\"\xa7\x01\n" +
	"\rReportRequest\x12?\n" +
	"\x0freportTimestamp\x18\x01 \x01(\v2\x15.loop.ReportTimestampR\x0freportTimestamp\x12\x14\n" +
	"\x05query\x18\x02 \x01(\fR\x05query\x12?\n" +
	"\fobservations\x18\x03 \x03(\v2\x1b.loop.AttributedObservationR\fobservations\"I\n" +
	"\vReportReply\x12\"\n" +
	"\fshouldReport\x18\x01 \x01(\bR\fshouldReport\x12\x16\n" +
	"\x06report\x18\x02 \x01(\fR\x06report\"}\n" +
	"\"ShouldAcceptFinalizedReportRequest\x12?\n" +
	"\x0freportTimestamp\x18\x01 \x01(\v2\x15.loop.ReportTimestampR\x0freportTimestamp\x12\x16\n" +
	"\x06report\x18\x02 \x01(\fR\x06report\"F\n" +
	" ShouldAcceptFinalizedReportReply\x12\"\n" +
	"\fshouldAccept\x18\x01 \x01(\bR\fshouldAccept\"~\n" +
	"#ShouldTransmitAcceptedReportRequest\x12?\n" +
	"\x0freportTimestamp\x18\x01 \x01(\v2\x15.loop.ReportTimestampR\x0freportTimestamp\x12\x16\n" +
	"\x06report\x18\x02 \x01(\fR\x06report\"K\n" +
	"!ShouldTransmitAcceptedReportReply\x12&\n" +
	"\x0eshouldTransmit\x18\x01 \x01(\bR\x0eshouldTransmit2p\n" +
	"\x16ReportingPluginFactory\x12V\n" +
	"\x12NewReportingPlugin\x12\x1f.loop.NewReportingPluginRequest\x1a\x1d.loop.NewReportingPluginReply\"\x002\xdd\x03\n" +
	"\x0fReportingPlugin\x12/\n" +
	"\x05Query\x12\x12.loop.QueryRequest\x1a\x10.loop.QueryReply\"\x00\x12A\n" +
	"\vObservation\x12\x18.loop.ObservationRequest\x1a\x16.loop.ObservationReply\"\x00\x122\n" +
	"\x06Report\x12\x13.loop.ReportRequest\x1a\x11.loop.ReportReply\"\x00\x12q\n" +
	"\x1bShouldAcceptFinalizedReport\x12(.loop.ShouldAcceptFinalizedReportRequest\x1a&.loop.ShouldAcceptFinalizedReportReply\"\x00\x12t\n" +
	"\x1cShouldTransmitAcceptedReport\x12).loop.ShouldTransmitAcceptedReportRequest\x1a'.loop.ShouldTransmitAcceptedReportReply\"\x00\x129\n" +
	"\x05Close\x12\x16.google.protobuf.Empty\x1a\x16.google.protobuf.Empty\"\x00BCZAgithub.com/smartcontractkit/chainlink-common/pkg/loop/internal/pbb\x06proto3"

var (
	file_reporting_proto_rawDescOnce sync.Once
	file_reporting_proto_rawDescData []byte
)

func file_reporting_proto_rawDescGZIP() []byte {
	file_reporting_proto_rawDescOnce.Do(func() {
		file_reporting_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_reporting_proto_rawDesc), len(file_reporting_proto_rawDesc)))
	})
	return file_reporting_proto_rawDescData
}

var file_reporting_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_reporting_proto_goTypes = []any{
	(*NewReportingPluginRequest)(nil),           // 0: loop.NewReportingPluginRequest
	(*NewReportingPluginReply)(nil),             // 1: loop.NewReportingPluginReply
	(*ReportingPluginConfig)(nil),               // 2: loop.ReportingPluginConfig
	(*ReportingPluginLimits)(nil),               // 3: loop.ReportingPluginLimits
	(*ReportingPluginInfo)(nil),                 // 4: loop.ReportingPluginInfo
	(*QueryRequest)(nil),                        // 5: loop.QueryRequest
	(*QueryReply)(nil),                          // 6: loop.QueryReply
	(*ObservationRequest)(nil),                  // 7: loop.ObservationRequest
	(*ObservationReply)(nil),                    // 8: loop.ObservationReply
	(*AttributedObservation)(nil),               // 9: loop.AttributedObservation
	(*ReportRequest)(nil),                       // 10: loop.ReportRequest
	(*ReportReply)(nil),                         // 11: loop.ReportReply
	(*ShouldAcceptFinalizedReportRequest)(nil),  // 12: loop.ShouldAcceptFinalizedReportRequest
	(*ShouldAcceptFinalizedReportReply)(nil),    // 13: loop.ShouldAcceptFinalizedReportReply
	(*ShouldTransmitAcceptedReportRequest)(nil), // 14: loop.ShouldTransmitAcceptedReportRequest
	(*ShouldTransmitAcceptedReportReply)(nil),   // 15: loop.ShouldTransmitAcceptedReportReply
	(*ReportTimestamp)(nil),                     // 16: loop.ReportTimestamp
	(*emptypb.Empty)(nil),                       // 17: google.protobuf.Empty
}
var file_reporting_proto_depIdxs = []int32{
	2,  // 0: loop.NewReportingPluginRequest.reportingPluginConfig:type_name -> loop.ReportingPluginConfig
	4,  // 1: loop.NewReportingPluginReply.reportingPluginInfo:type_name -> loop.ReportingPluginInfo
	3,  // 2: loop.ReportingPluginInfo.reportingPluginLimits:type_name -> loop.ReportingPluginLimits
	16, // 3: loop.QueryRequest.reportTimestamp:type_name -> loop.ReportTimestamp
	16, // 4: loop.ObservationRequest.reportTimestamp:type_name -> loop.ReportTimestamp
	16, // 5: loop.ReportRequest.reportTimestamp:type_name -> loop.ReportTimestamp
	9,  // 6: loop.ReportRequest.observations:type_name -> loop.AttributedObservation
	16, // 7: loop.ShouldAcceptFinalizedReportRequest.reportTimestamp:type_name -> loop.ReportTimestamp
	16, // 8: loop.ShouldTransmitAcceptedReportRequest.reportTimestamp:type_name -> loop.ReportTimestamp
	0,  // 9: loop.ReportingPluginFactory.NewReportingPlugin:input_type -> loop.NewReportingPluginRequest
	5,  // 10: loop.ReportingPlugin.Query:input_type -> loop.QueryRequest
	7,  // 11: loop.ReportingPlugin.Observation:input_type -> loop.ObservationRequest
	10, // 12: loop.ReportingPlugin.Report:input_type -> loop.ReportRequest
	12, // 13: loop.ReportingPlugin.ShouldAcceptFinalizedReport:input_type -> loop.ShouldAcceptFinalizedReportRequest
	14, // 14: loop.ReportingPlugin.ShouldTransmitAcceptedReport:input_type -> loop.ShouldTransmitAcceptedReportRequest
	17, // 15: loop.ReportingPlugin.Close:input_type -> google.protobuf.Empty
	1,  // 16: loop.ReportingPluginFactory.NewReportingPlugin:output_type -> loop.NewReportingPluginReply
	6,  // 17: loop.ReportingPlugin.Query:output_type -> loop.QueryReply
	8,  // 18: loop.ReportingPlugin.Observation:output_type -> loop.ObservationReply
	11, // 19: loop.ReportingPlugin.Report:output_type -> loop.ReportReply
	13, // 20: loop.ReportingPlugin.ShouldAcceptFinalizedReport:output_type -> loop.ShouldAcceptFinalizedReportReply
	15, // 21: loop.ReportingPlugin.ShouldTransmitAcceptedReport:output_type -> loop.ShouldTransmitAcceptedReportReply
	17, // 22: loop.ReportingPlugin.Close:output_type -> google.protobuf.Empty
	16, // [16:23] is the sub-list for method output_type
	9,  // [9:16] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_reporting_proto_init() }
func file_reporting_proto_init() {
	if File_reporting_proto != nil {
		return
	}
	file_relayer_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_reporting_proto_rawDesc), len(file_reporting_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_reporting_proto_goTypes,
		DependencyIndexes: file_reporting_proto_depIdxs,
		MessageInfos:      file_reporting_proto_msgTypes,
	}.Build()
	File_reporting_proto = out.File
	file_reporting_proto_goTypes = nil
	file_reporting_proto_depIdxs = nil
}
