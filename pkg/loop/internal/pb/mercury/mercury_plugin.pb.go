// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: mercury_plugin.proto

// note: the generate.go file in this dir specifies the import path of the relative proto files

package mercurypb

import (
	pb "github.com/smartcontractkit/chainlink-common/pkg/loop/internal/pb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NewMercuryPluginRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	MercuryPluginConfig *MercuryPluginConfig   `protobuf:"bytes,1,opt,name=mercuryPluginConfig,proto3" json:"mercuryPluginConfig,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *NewMercuryPluginRequest) Reset() {
	*x = NewMercuryPluginRequest{}
	mi := &file_mercury_plugin_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewMercuryPluginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMercuryPluginRequest) ProtoMessage() {}

func (x *NewMercuryPluginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_plugin_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMercuryPluginRequest.ProtoReflect.Descriptor instead.
func (*NewMercuryPluginRequest) Descriptor() ([]byte, []int) {
	return file_mercury_plugin_proto_rawDescGZIP(), []int{0}
}

func (x *NewMercuryPluginRequest) GetMercuryPluginConfig() *MercuryPluginConfig {
	if x != nil {
		return x.MercuryPluginConfig
	}
	return nil
}

type NewMercuryPluginResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	MercuryPluginID   uint32                 `protobuf:"varint,1,opt,name=mercuryPluginID,proto3" json:"mercuryPluginID,omitempty"`
	MercuryPluginInfo *MercuryPluginInfo     `protobuf:"bytes,2,opt,name=mercuryPluginInfo,proto3" json:"mercuryPluginInfo,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *NewMercuryPluginResponse) Reset() {
	*x = NewMercuryPluginResponse{}
	mi := &file_mercury_plugin_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewMercuryPluginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMercuryPluginResponse) ProtoMessage() {}

func (x *NewMercuryPluginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_plugin_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMercuryPluginResponse.ProtoReflect.Descriptor instead.
func (*NewMercuryPluginResponse) Descriptor() ([]byte, []int) {
	return file_mercury_plugin_proto_rawDescGZIP(), []int{1}
}

func (x *NewMercuryPluginResponse) GetMercuryPluginID() uint32 {
	if x != nil {
		return x.MercuryPluginID
	}
	return 0
}

func (x *NewMercuryPluginResponse) GetMercuryPluginInfo() *MercuryPluginInfo {
	if x != nil {
		return x.MercuryPluginInfo
	}
	return nil
}

// MercuryPluginConfig represents [github.com/smartcontractkit/libocr/offchainreporting2plus/ocr3types.MercuryPluginConfig]
type MercuryPluginConfig struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	ConfigDigest           []byte                 `protobuf:"bytes,1,opt,name=configDigest,proto3" json:"configDigest,omitempty"` // [32]byte
	OracleID               uint32                 `protobuf:"varint,2,opt,name=oracleID,proto3" json:"oracleID,omitempty"`        // uint8
	N                      uint32                 `protobuf:"varint,3,opt,name=n,proto3" json:"n,omitempty"`
	F                      uint32                 `protobuf:"varint,4,opt,name=f,proto3" json:"f,omitempty"`
	OnchainConfig          []byte                 `protobuf:"bytes,5,opt,name=onchainConfig,proto3" json:"onchainConfig,omitempty"`
	OffchainConfig         []byte                 `protobuf:"bytes,6,opt,name=offchainConfig,proto3" json:"offchainConfig,omitempty"`
	EstimatedRoundInterval int64                  `protobuf:"varint,7,opt,name=estimatedRoundInterval,proto3" json:"estimatedRoundInterval,omitempty"`
	MaxDurationObservation int64                  `protobuf:"varint,8,opt,name=maxDurationObservation,proto3" json:"maxDurationObservation,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *MercuryPluginConfig) Reset() {
	*x = MercuryPluginConfig{}
	mi := &file_mercury_plugin_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MercuryPluginConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MercuryPluginConfig) ProtoMessage() {}

func (x *MercuryPluginConfig) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_plugin_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MercuryPluginConfig.ProtoReflect.Descriptor instead.
func (*MercuryPluginConfig) Descriptor() ([]byte, []int) {
	return file_mercury_plugin_proto_rawDescGZIP(), []int{2}
}

func (x *MercuryPluginConfig) GetConfigDigest() []byte {
	if x != nil {
		return x.ConfigDigest
	}
	return nil
}

func (x *MercuryPluginConfig) GetOracleID() uint32 {
	if x != nil {
		return x.OracleID
	}
	return 0
}

func (x *MercuryPluginConfig) GetN() uint32 {
	if x != nil {
		return x.N
	}
	return 0
}

func (x *MercuryPluginConfig) GetF() uint32 {
	if x != nil {
		return x.F
	}
	return 0
}

func (x *MercuryPluginConfig) GetOnchainConfig() []byte {
	if x != nil {
		return x.OnchainConfig
	}
	return nil
}

func (x *MercuryPluginConfig) GetOffchainConfig() []byte {
	if x != nil {
		return x.OffchainConfig
	}
	return nil
}

func (x *MercuryPluginConfig) GetEstimatedRoundInterval() int64 {
	if x != nil {
		return x.EstimatedRoundInterval
	}
	return 0
}

func (x *MercuryPluginConfig) GetMaxDurationObservation() int64 {
	if x != nil {
		return x.MaxDurationObservation
	}
	return 0
}

// MercuryPluginLimits represents [github.com/smartcontractkit/libocr/offchainreporting2plus/types.MercuryPluginLimits]
type MercuryPluginLimits struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	MaxObservationLength uint64                 `protobuf:"varint,1,opt,name=maxObservationLength,proto3" json:"maxObservationLength,omitempty"`
	MaxReportLength      uint64                 `protobuf:"varint,2,opt,name=maxReportLength,proto3" json:"maxReportLength,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *MercuryPluginLimits) Reset() {
	*x = MercuryPluginLimits{}
	mi := &file_mercury_plugin_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MercuryPluginLimits) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MercuryPluginLimits) ProtoMessage() {}

func (x *MercuryPluginLimits) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_plugin_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MercuryPluginLimits.ProtoReflect.Descriptor instead.
func (*MercuryPluginLimits) Descriptor() ([]byte, []int) {
	return file_mercury_plugin_proto_rawDescGZIP(), []int{3}
}

func (x *MercuryPluginLimits) GetMaxObservationLength() uint64 {
	if x != nil {
		return x.MaxObservationLength
	}
	return 0
}

func (x *MercuryPluginLimits) GetMaxReportLength() uint64 {
	if x != nil {
		return x.MaxReportLength
	}
	return 0
}

// MercuryPluginInfo represents [github.com/smartcontractkit/libocr/offchainreporting2plus/types.MercuryPluginInfo]
type MercuryPluginInfo struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Name                string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	MercuryPluginLimits *MercuryPluginLimits   `protobuf:"bytes,3,opt,name=mercuryPluginLimits,proto3" json:"mercuryPluginLimits,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *MercuryPluginInfo) Reset() {
	*x = MercuryPluginInfo{}
	mi := &file_mercury_plugin_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MercuryPluginInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MercuryPluginInfo) ProtoMessage() {}

func (x *MercuryPluginInfo) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_plugin_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MercuryPluginInfo.ProtoReflect.Descriptor instead.
func (*MercuryPluginInfo) Descriptor() ([]byte, []int) {
	return file_mercury_plugin_proto_rawDescGZIP(), []int{4}
}

func (x *MercuryPluginInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MercuryPluginInfo) GetMercuryPluginLimits() *MercuryPluginLimits {
	if x != nil {
		return x.MercuryPluginLimits
	}
	return nil
}

// ObservationRequest has arguments for [github.com/smartcontractkit/libocr/offchainreporting2plus/types.MercuryPlugin.Observation].
type ObservationRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ReportTimestamp *pb.ReportTimestamp    `protobuf:"bytes,1,opt,name=reportTimestamp,proto3" json:"reportTimestamp,omitempty"`
	PreviousReport  []byte                 `protobuf:"bytes,2,opt,name=previousReport,proto3" json:"previousReport,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ObservationRequest) Reset() {
	*x = ObservationRequest{}
	mi := &file_mercury_plugin_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObservationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationRequest) ProtoMessage() {}

func (x *ObservationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_plugin_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationRequest.ProtoReflect.Descriptor instead.
func (*ObservationRequest) Descriptor() ([]byte, []int) {
	return file_mercury_plugin_proto_rawDescGZIP(), []int{5}
}

func (x *ObservationRequest) GetReportTimestamp() *pb.ReportTimestamp {
	if x != nil {
		return x.ReportTimestamp
	}
	return nil
}

func (x *ObservationRequest) GetPreviousReport() []byte {
	if x != nil {
		return x.PreviousReport
	}
	return nil
}

// ObservationResponse has return arguments for [github.com/smartcontractkit/libocr/offchainreporting2plus/types.MercuryPlugin.Observation].
type ObservationResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Observation   []byte                 `protobuf:"bytes,1,opt,name=observation,proto3" json:"observation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ObservationResponse) Reset() {
	*x = ObservationResponse{}
	mi := &file_mercury_plugin_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObservationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservationResponse) ProtoMessage() {}

func (x *ObservationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_plugin_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservationResponse.ProtoReflect.Descriptor instead.
func (*ObservationResponse) Descriptor() ([]byte, []int) {
	return file_mercury_plugin_proto_rawDescGZIP(), []int{6}
}

func (x *ObservationResponse) GetObservation() []byte {
	if x != nil {
		return x.Observation
	}
	return nil
}

// TODO some definitions are shared with reporting plugin for ocr2. not sure to copy or share. copy for now...
// AttributedObservation represents [github.com/smartcontractkit/libocr/offchainreporting2plus/types.AttributedObservation]
type AttributedObservation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Observation   []byte                 `protobuf:"bytes,1,opt,name=observation,proto3" json:"observation,omitempty"`
	Observer      uint32                 `protobuf:"varint,2,opt,name=observer,proto3" json:"observer,omitempty"` // uint8
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AttributedObservation) Reset() {
	*x = AttributedObservation{}
	mi := &file_mercury_plugin_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttributedObservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttributedObservation) ProtoMessage() {}

func (x *AttributedObservation) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_plugin_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttributedObservation.ProtoReflect.Descriptor instead.
func (*AttributedObservation) Descriptor() ([]byte, []int) {
	return file_mercury_plugin_proto_rawDescGZIP(), []int{7}
}

func (x *AttributedObservation) GetObservation() []byte {
	if x != nil {
		return x.Observation
	}
	return nil
}

func (x *AttributedObservation) GetObserver() uint32 {
	if x != nil {
		return x.Observer
	}
	return 0
}

// ReportRequest has arguments for [github.com/smartcontractkit/libocr/offchainreporting2plus/types.MercuryPlugin.Report].
type ReportRequest struct {
	state           protoimpl.MessageState   `protogen:"open.v1"`
	ReportTimestamp *pb.ReportTimestamp      `protobuf:"bytes,1,opt,name=reportTimestamp,proto3" json:"reportTimestamp,omitempty"`
	PreviousReport  []byte                   `protobuf:"bytes,2,opt,name=previousReport,proto3" json:"previousReport,omitempty"`
	Observations    []*AttributedObservation `protobuf:"bytes,3,rep,name=observations,proto3" json:"observations,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ReportRequest) Reset() {
	*x = ReportRequest{}
	mi := &file_mercury_plugin_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportRequest) ProtoMessage() {}

func (x *ReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_plugin_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportRequest.ProtoReflect.Descriptor instead.
func (*ReportRequest) Descriptor() ([]byte, []int) {
	return file_mercury_plugin_proto_rawDescGZIP(), []int{8}
}

func (x *ReportRequest) GetReportTimestamp() *pb.ReportTimestamp {
	if x != nil {
		return x.ReportTimestamp
	}
	return nil
}

func (x *ReportRequest) GetPreviousReport() []byte {
	if x != nil {
		return x.PreviousReport
	}
	return nil
}

func (x *ReportRequest) GetObservations() []*AttributedObservation {
	if x != nil {
		return x.Observations
	}
	return nil
}

// ReportResponse has return arguments for [github.com/smartcontractkit/libocr/offchainreporting2plus/types.MercuryPlugin.Report].
type ReportResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ShouldReport  bool                   `protobuf:"varint,1,opt,name=shouldReport,proto3" json:"shouldReport,omitempty"`
	Report        []byte                 `protobuf:"bytes,2,opt,name=report,proto3" json:"report,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReportResponse) Reset() {
	*x = ReportResponse{}
	mi := &file_mercury_plugin_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportResponse) ProtoMessage() {}

func (x *ReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mercury_plugin_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportResponse.ProtoReflect.Descriptor instead.
func (*ReportResponse) Descriptor() ([]byte, []int) {
	return file_mercury_plugin_proto_rawDescGZIP(), []int{9}
}

func (x *ReportResponse) GetShouldReport() bool {
	if x != nil {
		return x.ShouldReport
	}
	return false
}

func (x *ReportResponse) GetReport() []byte {
	if x != nil {
		return x.Report
	}
	return nil
}

var File_mercury_plugin_proto protoreflect.FileDescriptor

const file_mercury_plugin_proto_rawDesc = "" +
	"\n" +
	"\x14mercury_plugin.proto\x12\x18loop.internal.pb.mercury\x1a\x1bgoogle/protobuf/empty.proto\x1a\rrelayer.proto\"z\n" +
	"\x17NewMercuryPluginRequest\x12_\n" +
	"\x13mercuryPluginConfig\x18\x01 \x01(\v2-.loop.internal.pb.mercury.MercuryPluginConfigR\x13mercuryPluginConfig\"\x9f\x01\n" +
	"\x18NewMercuryPluginResponse\x12(\n" +
	"\x0fmercuryPluginID\x18\x01 \x01(\rR\x0fmercuryPluginID\x12Y\n" +
	"\x11mercuryPluginInfo\x18\x02 \x01(\v2+.loop.internal.pb.mercury.MercuryPluginInfoR\x11mercuryPluginInfo\"\xaf\x02\n" +
	"\x13MercuryPluginConfig\x12\"\n" +
	"\fconfigDigest\x18\x01 \x01(\fR\fconfigDigest\x12\x1a\n" +
	"\boracleID\x18\x02 \x01(\rR\boracleID\x12\f\n" +
	"\x01n\x18\x03 \x01(\rR\x01n\x12\f\n" +
	"\x01f\x18\x04 \x01(\rR\x01f\x12$\n" +
	"\ronchainConfig\x18\x05 \x01(\fR\ronchainConfig\x12&\n" +
	"\x0eoffchainConfig\x18\x06 \x01(\fR\x0eoffchainConfig\x126\n" +
	"\x16estimatedRoundInterval\x18\a \x01(\x03R\x16estimatedRoundInterval\x126\n" +
	"\x16maxDurationObservation\x18\b \x01(\x03R\x16maxDurationObservation\"s\n" +
	"\x13MercuryPluginLimits\x122\n" +
	"\x14maxObservationLength\x18\x01 \x01(\x04R\x14maxObservationLength\x12(\n" +
	"\x0fmaxReportLength\x18\x02 \x01(\x04R\x0fmaxReportLength\"\x88\x01\n" +
	"\x11MercuryPluginInfo\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12_\n" +
	"\x13mercuryPluginLimits\x18\x03 \x01(\v2-.loop.internal.pb.mercury.MercuryPluginLimitsR\x13mercuryPluginLimits\"}\n" +
	"\x12ObservationRequest\x12?\n" +
	"\x0freportTimestamp\x18\x01 \x01(\v2\x15.loop.ReportTimestampR\x0freportTimestamp\x12&\n" +
	"\x0epreviousReport\x18\x02 \x01(\fR\x0epreviousReport\"7\n" +
	"\x13ObservationResponse\x12 \n" +
	"\vobservation\x18\x01 \x01(\fR\vobservation\"U\n" +
	"\x15AttributedObservation\x12 \n" +
	"\vobservation\x18\x01 \x01(\fR\vobservation\x12\x1a\n" +
	"\bobserver\x18\x02 \x01(\rR\bobserver\"\xcd\x01\n" +
	"\rReportRequest\x12?\n" +
	"\x0freportTimestamp\x18\x01 \x01(\v2\x15.loop.ReportTimestampR\x0freportTimestamp\x12&\n" +
	"\x0epreviousReport\x18\x02 \x01(\fR\x0epreviousReport\x12S\n" +
	"\fobservations\x18\x03 \x03(\v2/.loop.internal.pb.mercury.AttributedObservationR\fobservations\"L\n" +
	"\x0eReportResponse\x12\"\n" +
	"\fshouldReport\x18\x01 \x01(\bR\fshouldReport\x12\x16\n" +
	"\x06report\x18\x02 \x01(\fR\x06report2\x93\x01\n" +
	"\x14MercuryPluginFactory\x12{\n" +
	"\x10NewMercuryPlugin\x121.loop.internal.pb.mercury.NewMercuryPluginRequest\x1a2.loop.internal.pb.mercury.NewMercuryPluginResponse\"\x002\x97\x02\n" +
	"\rMercuryPlugin\x12l\n" +
	"\vObservation\x12,.loop.internal.pb.mercury.ObservationRequest\x1a-.loop.internal.pb.mercury.ObservationResponse\"\x00\x12]\n" +
	"\x06Report\x12'.loop.internal.pb.mercury.ReportRequest\x1a(.loop.internal.pb.mercury.ReportResponse\"\x00\x129\n" +
	"\x05Close\x12\x16.google.protobuf.Empty\x1a\x16.google.protobuf.Empty\"\x00BUZSgithub.com/smartcontractkit/chainlink-common/pkg/loop/internal/pb/mercury;mercurypbb\x06proto3"

var (
	file_mercury_plugin_proto_rawDescOnce sync.Once
	file_mercury_plugin_proto_rawDescData []byte
)

func file_mercury_plugin_proto_rawDescGZIP() []byte {
	file_mercury_plugin_proto_rawDescOnce.Do(func() {
		file_mercury_plugin_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_mercury_plugin_proto_rawDesc), len(file_mercury_plugin_proto_rawDesc)))
	})
	return file_mercury_plugin_proto_rawDescData
}

var file_mercury_plugin_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_mercury_plugin_proto_goTypes = []any{
	(*NewMercuryPluginRequest)(nil),  // 0: loop.internal.pb.mercury.NewMercuryPluginRequest
	(*NewMercuryPluginResponse)(nil), // 1: loop.internal.pb.mercury.NewMercuryPluginResponse
	(*MercuryPluginConfig)(nil),      // 2: loop.internal.pb.mercury.MercuryPluginConfig
	(*MercuryPluginLimits)(nil),      // 3: loop.internal.pb.mercury.MercuryPluginLimits
	(*MercuryPluginInfo)(nil),        // 4: loop.internal.pb.mercury.MercuryPluginInfo
	(*ObservationRequest)(nil),       // 5: loop.internal.pb.mercury.ObservationRequest
	(*ObservationResponse)(nil),      // 6: loop.internal.pb.mercury.ObservationResponse
	(*AttributedObservation)(nil),    // 7: loop.internal.pb.mercury.AttributedObservation
	(*ReportRequest)(nil),            // 8: loop.internal.pb.mercury.ReportRequest
	(*ReportResponse)(nil),           // 9: loop.internal.pb.mercury.ReportResponse
	(*pb.ReportTimestamp)(nil),       // 10: loop.ReportTimestamp
	(*emptypb.Empty)(nil),            // 11: google.protobuf.Empty
}
var file_mercury_plugin_proto_depIdxs = []int32{
	2,  // 0: loop.internal.pb.mercury.NewMercuryPluginRequest.mercuryPluginConfig:type_name -> loop.internal.pb.mercury.MercuryPluginConfig
	4,  // 1: loop.internal.pb.mercury.NewMercuryPluginResponse.mercuryPluginInfo:type_name -> loop.internal.pb.mercury.MercuryPluginInfo
	3,  // 2: loop.internal.pb.mercury.MercuryPluginInfo.mercuryPluginLimits:type_name -> loop.internal.pb.mercury.MercuryPluginLimits
	10, // 3: loop.internal.pb.mercury.ObservationRequest.reportTimestamp:type_name -> loop.ReportTimestamp
	10, // 4: loop.internal.pb.mercury.ReportRequest.reportTimestamp:type_name -> loop.ReportTimestamp
	7,  // 5: loop.internal.pb.mercury.ReportRequest.observations:type_name -> loop.internal.pb.mercury.AttributedObservation
	0,  // 6: loop.internal.pb.mercury.MercuryPluginFactory.NewMercuryPlugin:input_type -> loop.internal.pb.mercury.NewMercuryPluginRequest
	5,  // 7: loop.internal.pb.mercury.MercuryPlugin.Observation:input_type -> loop.internal.pb.mercury.ObservationRequest
	8,  // 8: loop.internal.pb.mercury.MercuryPlugin.Report:input_type -> loop.internal.pb.mercury.ReportRequest
	11, // 9: loop.internal.pb.mercury.MercuryPlugin.Close:input_type -> google.protobuf.Empty
	1,  // 10: loop.internal.pb.mercury.MercuryPluginFactory.NewMercuryPlugin:output_type -> loop.internal.pb.mercury.NewMercuryPluginResponse
	6,  // 11: loop.internal.pb.mercury.MercuryPlugin.Observation:output_type -> loop.internal.pb.mercury.ObservationResponse
	9,  // 12: loop.internal.pb.mercury.MercuryPlugin.Report:output_type -> loop.internal.pb.mercury.ReportResponse
	11, // 13: loop.internal.pb.mercury.MercuryPlugin.Close:output_type -> google.protobuf.Empty
	10, // [10:14] is the sub-list for method output_type
	6,  // [6:10] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_mercury_plugin_proto_init() }
func file_mercury_plugin_proto_init() {
	if File_mercury_plugin_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_mercury_plugin_proto_rawDesc), len(file_mercury_plugin_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_mercury_plugin_proto_goTypes,
		DependencyIndexes: file_mercury_plugin_proto_depIdxs,
		MessageInfos:      file_mercury_plugin_proto_msgTypes,
	}.Build()
	File_mercury_plugin_proto = out.File
	file_mercury_plugin_proto_goTypes = nil
	file_mercury_plugin_proto_depIdxs = nil
}
