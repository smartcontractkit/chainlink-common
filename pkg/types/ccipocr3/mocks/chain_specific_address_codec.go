// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ChainSpecificAddressCodec is an autogenerated mock type for the ChainSpecificAddressCodec type
type ChainSpecificAddressCodec struct {
	mock.Mock
}

type ChainSpecificAddressCodec_Expecter struct {
	mock *mock.Mock
}

func (_m *ChainSpecificAddressCodec) EXPECT() *ChainSpecificAddressCodec_Expecter {
	return &ChainSpecificAddressCodec_Expecter{mock: &_m.Mock}
}

// AddressBytesToString provides a mock function with given fields: _a0
func (_m *ChainSpecificAddressCodec) AddressBytesToString(_a0 []byte) (string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddressBytesToString")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]byte) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChainSpecificAddressCodec_AddressBytesToString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddressBytesToString'
type ChainSpecificAddressCodec_AddressBytesToString_Call struct {
	*mock.Call
}

// AddressBytesToString is a helper method to define mock.On call
//   - _a0 []byte
func (_e *ChainSpecificAddressCodec_Expecter) AddressBytesToString(_a0 interface{}) *ChainSpecificAddressCodec_AddressBytesToString_Call {
	return &ChainSpecificAddressCodec_AddressBytesToString_Call{Call: _e.mock.On("AddressBytesToString", _a0)}
}

func (_c *ChainSpecificAddressCodec_AddressBytesToString_Call) Run(run func(_a0 []byte)) *ChainSpecificAddressCodec_AddressBytesToString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *ChainSpecificAddressCodec_AddressBytesToString_Call) Return(_a0 string, _a1 error) *ChainSpecificAddressCodec_AddressBytesToString_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ChainSpecificAddressCodec_AddressBytesToString_Call) RunAndReturn(run func([]byte) (string, error)) *ChainSpecificAddressCodec_AddressBytesToString_Call {
	_c.Call.Return(run)
	return _c
}

// AddressStringToBytes provides a mock function with given fields: _a0
func (_m *ChainSpecificAddressCodec) AddressStringToBytes(_a0 string) ([]byte, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddressStringToBytes")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChainSpecificAddressCodec_AddressStringToBytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddressStringToBytes'
type ChainSpecificAddressCodec_AddressStringToBytes_Call struct {
	*mock.Call
}

// AddressStringToBytes is a helper method to define mock.On call
//   - _a0 string
func (_e *ChainSpecificAddressCodec_Expecter) AddressStringToBytes(_a0 interface{}) *ChainSpecificAddressCodec_AddressStringToBytes_Call {
	return &ChainSpecificAddressCodec_AddressStringToBytes_Call{Call: _e.mock.On("AddressStringToBytes", _a0)}
}

func (_c *ChainSpecificAddressCodec_AddressStringToBytes_Call) Run(run func(_a0 string)) *ChainSpecificAddressCodec_AddressStringToBytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ChainSpecificAddressCodec_AddressStringToBytes_Call) Return(_a0 []byte, _a1 error) *ChainSpecificAddressCodec_AddressStringToBytes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ChainSpecificAddressCodec_AddressStringToBytes_Call) RunAndReturn(run func(string) ([]byte, error)) *ChainSpecificAddressCodec_AddressStringToBytes_Call {
	_c.Call.Return(run)
	return _c
}

// OracleIDAsAddressBytes provides a mock function with given fields: oracleID
func (_m *ChainSpecificAddressCodec) OracleIDAsAddressBytes(oracleID uint8) ([]byte, error) {
	ret := _m.Called(oracleID)

	if len(ret) == 0 {
		panic("no return value specified for OracleIDAsAddressBytes")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(uint8) ([]byte, error)); ok {
		return rf(oracleID)
	}
	if rf, ok := ret.Get(0).(func(uint8) []byte); ok {
		r0 = rf(oracleID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(uint8) error); ok {
		r1 = rf(oracleID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChainSpecificAddressCodec_OracleIDAsAddressBytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OracleIDAsAddressBytes'
type ChainSpecificAddressCodec_OracleIDAsAddressBytes_Call struct {
	*mock.Call
}

// OracleIDAsAddressBytes is a helper method to define mock.On call
//   - oracleID uint8
func (_e *ChainSpecificAddressCodec_Expecter) OracleIDAsAddressBytes(oracleID interface{}) *ChainSpecificAddressCodec_OracleIDAsAddressBytes_Call {
	return &ChainSpecificAddressCodec_OracleIDAsAddressBytes_Call{Call: _e.mock.On("OracleIDAsAddressBytes", oracleID)}
}

func (_c *ChainSpecificAddressCodec_OracleIDAsAddressBytes_Call) Run(run func(oracleID uint8)) *ChainSpecificAddressCodec_OracleIDAsAddressBytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint8))
	})
	return _c
}

func (_c *ChainSpecificAddressCodec_OracleIDAsAddressBytes_Call) Return(_a0 []byte, _a1 error) *ChainSpecificAddressCodec_OracleIDAsAddressBytes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ChainSpecificAddressCodec_OracleIDAsAddressBytes_Call) RunAndReturn(run func(uint8) ([]byte, error)) *ChainSpecificAddressCodec_OracleIDAsAddressBytes_Call {
	_c.Call.Return(run)
	return _c
}

// TransmitterBytesToString provides a mock function with given fields: _a0
func (_m *ChainSpecificAddressCodec) TransmitterBytesToString(_a0 []byte) (string, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for TransmitterBytesToString")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (string, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]byte) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChainSpecificAddressCodec_TransmitterBytesToString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TransmitterBytesToString'
type ChainSpecificAddressCodec_TransmitterBytesToString_Call struct {
	*mock.Call
}

// TransmitterBytesToString is a helper method to define mock.On call
//   - _a0 []byte
func (_e *ChainSpecificAddressCodec_Expecter) TransmitterBytesToString(_a0 interface{}) *ChainSpecificAddressCodec_TransmitterBytesToString_Call {
	return &ChainSpecificAddressCodec_TransmitterBytesToString_Call{Call: _e.mock.On("TransmitterBytesToString", _a0)}
}

func (_c *ChainSpecificAddressCodec_TransmitterBytesToString_Call) Run(run func(_a0 []byte)) *ChainSpecificAddressCodec_TransmitterBytesToString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *ChainSpecificAddressCodec_TransmitterBytesToString_Call) Return(_a0 string, _a1 error) *ChainSpecificAddressCodec_TransmitterBytesToString_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ChainSpecificAddressCodec_TransmitterBytesToString_Call) RunAndReturn(run func([]byte) (string, error)) *ChainSpecificAddressCodec_TransmitterBytesToString_Call {
	_c.Call.Return(run)
	return _c
}

// NewChainSpecificAddressCodec creates a new instance of ChainSpecificAddressCodec. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewChainSpecificAddressCodec(t interface {
	mock.TestingT
	Cleanup(func())
}) *ChainSpecificAddressCodec {
	mock := &ChainSpecificAddressCodec{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
