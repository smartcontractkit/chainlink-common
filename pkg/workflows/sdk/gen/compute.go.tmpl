package sdk

import (
    "encoding/json"
    "github.com/smartcontractkit/chainlink-common/pkg/capabilities"
    "github.com/smartcontractkit/chainlink-common/pkg/values"
)

{{- range . }}
type Compute{{.}}Inputs[{{range RangeNum . }}T{{.}} any,{{ end }}] struct {
    {{- range RangeNum .}}
    Arg{{.}} CapDefinition[T{{.}}]
    {{- end }}
}

type runtime{{.}}Inputs[{{range RangeNum . }}T{{.}} any,{{ end }}] struct {
    {{- range RangeNum .}}
    Arg{{.}} T{{.}}
    {{- end }}
}


func (input Compute{{.}}Inputs[{{range RangeNum . }}I{{.}},{{ end }}]) ToSteps() StepInputs {
    return StepInputs{
       Mapping: map[string]any{
        {{- range  RangeNum . }}
        "Arg{{.}}" : input.Arg{{.}}.Ref(),
        {{- end }}
       },
   }
}

func Compute{{.}}[{{range  RangeNum .}}I{{.}} any, {{ end }}O any](w *WorkflowSpecFactory, ref string, input Compute{{.}}Inputs[{{range RangeNum . }}I{{.}},{{ end }}], compute func(Runtime, {{range RangeNum . }}I{{.}},{{ end }})(O, error)) ComputeOutputCap[O] {
    adaptedComputeFunc := func(r Runtime, _ struct{}, {{range RangeNum .}}i{{.}} I{{.}},{{end}}) (O, error) {
        return compute(r, {{range RangeNum .}}i{{.}},{{end}})
    }
    return Compute{{.}}WithConfig[{{range  RangeNum .}}I{{.}}, {{ end }}O](w, ref, EmptyComputeConfig(), input, adaptedComputeFunc)
}

func Compute{{.}}WithConfig[{{range  RangeNum .}}I{{.}} any, {{ end }}O any, C any](w *WorkflowSpecFactory, ref string, config *ComputeConfig[C], input Compute{{.}}Inputs[{{range RangeNum . }}I{{.}},{{ end }}], compute func(Runtime, C, {{range RangeNum . }}I{{.}},{{ end }})(O, error)) ComputeOutputCap[O] {
    cm, err := config.ToMap()
    if err != nil {
       w.AddErr(fmt.Errorf("could not convert config for compute step %s to config: %w", ref, err))
       return nil
    }

    def := StepDefinition{
       ID: "custom-compute@1.0.0",
       Ref: ref,
       Inputs: input.ToSteps(),
       Config: cm,
       CapabilityType: capabilities.CapabilityTypeAction,
    }

    capFn := func(runtime Runtime, request capabilities.CapabilityRequest) (capabilities.CapabilityResponse, error) {
        var inputs runtime{{.}}Inputs[{{range RangeNum . }}I{{.}},{{ end }}]
        if err := request.Inputs.UnwrapTo(&inputs); err != nil {
            return capabilities.CapabilityResponse{}, err
        }

        // verify against any schema by marshalling and unmarshalling
        ji, err := json.Marshal(inputs)
        if err != nil {
            return capabilities.CapabilityResponse{}, err
        }

        // use a temp variable to unmarshal to avoid type loss if the inputs has an any in it
        var tmp runtime{{.}}Inputs[{{range RangeNum . }}I{{.}},{{ end }}]
        if err := json.Unmarshal(ji, &tmp); err != nil {
            return capabilities.CapabilityResponse{}, err
        }

        var conf C
        if request.Config != nil {
            err = request.Config.UnwrapTo(&conf)
            if err != nil {
                return capabilities.CapabilityResponse{}, err
            }
        }

        output, err := compute(runtime, conf, {{range RangeNum . }}inputs.Arg{{.}},{{ end }})
        if err != nil {
            return capabilities.CapabilityResponse{}, err
        }

        computeOutput := ComputeOutput[O]{Value: output}
        wrapped, err := values.CreateMapFromStruct(computeOutput)
        if err != nil {
            return capabilities.CapabilityResponse{}, err
        }

        return capabilities.CapabilityResponse{Value: wrapped}, nil
    }

    if w.fns == nil {
        w.fns = map[string]func(runtime Runtime, request capabilities.CapabilityRequest) (capabilities.CapabilityResponse, error){}
    }
    w.fns[ref] = capFn
    return &computeOutputCap[O]{(&Step[ComputeOutput[O]]{Definition: def}).AddTo(w)}
}

// Compute{{.}}WithMetadata DO NOT USE, this functions is for internal local testing while other tools are being developed and is temporary
func Compute{{.}}WithMetadata[{{range  RangeNum .}}I{{.}} any, {{ end }}O any](w *WorkflowSpecFactory, ref string, input Compute{{.}}Inputs[{{range RangeNum . }}I{{.}},{{ end }}], compute func(Runtime, {{range RangeNum . }}I{{.}},{{ end }} capabilities.RequestMetadata) (O, error)) ComputeOutputCap[O] {
    def := StepDefinition{
		ID:     "custom-compute@1.0.0",
		Ref:    ref,
		Inputs: input.ToSteps(),
		Config: map[string]any{
			"config": "$(ENV.config)",
			"binary": "$(ENV.binary)",
		},
		CapabilityType: capabilities.CapabilityTypeAction,
	}

	capFn := func(runtime Runtime, request capabilities.CapabilityRequest) (capabilities.CapabilityResponse, error) {
		var inputs runtime{{.}}Inputs[{{range RangeNum . }}I{{.}},{{ end }}]
		if err := request.Inputs.UnwrapTo(&inputs); err != nil {
			return capabilities.CapabilityResponse{}, err
		}

		// verify against any schema by marshalling and unmarshalling
		ji, err := json.Marshal(inputs)
		if err != nil {
			return capabilities.CapabilityResponse{}, err
		}

		// use a temp variable to unmarshal to avoid type loss if the inputs has an any in it
		var tmp runtime{{.}}Inputs[{{range RangeNum . }}I{{.}},{{ end }}]
		if err := json.Unmarshal(ji, &tmp); err != nil {
			return capabilities.CapabilityResponse{}, err
		}

		output, err := compute(runtime, {{range RangeNum . }}inputs.Arg{{.}},{{ end }} request.Metadata)
		if err != nil {
			return capabilities.CapabilityResponse{}, err
		}

		computeOutput := ComputeOutput[O]{Value: output}
		wrapped, err := values.CreateMapFromStruct(computeOutput)
		if err != nil {
			return capabilities.CapabilityResponse{}, err
		}

		return capabilities.CapabilityResponse{Value: wrapped}, nil
	}

	if w.fns == nil {
		w.fns = map[string]func(runtime Runtime, request capabilities.CapabilityRequest) (capabilities.CapabilityResponse, error){}
	}
	w.fns[ref] = capFn
	return &computeOutputCap[O]{(&Step[ComputeOutput[O]]{Definition: def}).AddTo(w)}
}
{{- end }}
