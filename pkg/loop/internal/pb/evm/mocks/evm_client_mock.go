// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	evmpb "github.com/smartcontractkit/chainlink-common/pkg/loop/internal/pb/evm"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	pb "github.com/smartcontractkit/chainlink-common/pkg/loop/internal/pb"
)

// EVMClient is an autogenerated mock type for the EVMClient type
type EVMClient struct {
	mock.Mock
}

type EVMClient_Expecter struct {
	mock *mock.Mock
}

func (_m *EVMClient) EXPECT() *EVMClient_Expecter {
	return &EVMClient_Expecter{mock: &_m.Mock}
}

// BalanceAt provides a mock function with given fields: ctx, in, opts
func (_m *EVMClient) BalanceAt(ctx context.Context, in *evmpb.BalanceAtRequest, opts ...grpc.CallOption) (*evmpb.BalanceAtReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BalanceAt")
	}

	var r0 *evmpb.BalanceAtReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evmpb.BalanceAtRequest, ...grpc.CallOption) (*evmpb.BalanceAtReply, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evmpb.BalanceAtRequest, ...grpc.CallOption) *evmpb.BalanceAtReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evmpb.BalanceAtReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evmpb.BalanceAtRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EVMClient_BalanceAt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BalanceAt'
type EVMClient_BalanceAt_Call struct {
	*mock.Call
}

// BalanceAt is a helper method to define mock.On call
//   - ctx context.Context
//   - in *evmpb.BalanceAtRequest
//   - opts ...grpc.CallOption
func (_e *EVMClient_Expecter) BalanceAt(ctx interface{}, in interface{}, opts ...interface{}) *EVMClient_BalanceAt_Call {
	return &EVMClient_BalanceAt_Call{Call: _e.mock.On("BalanceAt",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *EVMClient_BalanceAt_Call) Run(run func(ctx context.Context, in *evmpb.BalanceAtRequest, opts ...grpc.CallOption)) *EVMClient_BalanceAt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*evmpb.BalanceAtRequest), variadicArgs...)
	})
	return _c
}

func (_c *EVMClient_BalanceAt_Call) Return(_a0 *evmpb.BalanceAtReply, _a1 error) *EVMClient_BalanceAt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EVMClient_BalanceAt_Call) RunAndReturn(run func(context.Context, *evmpb.BalanceAtRequest, ...grpc.CallOption) (*evmpb.BalanceAtReply, error)) *EVMClient_BalanceAt_Call {
	_c.Call.Return(run)
	return _c
}

// CallContract provides a mock function with given fields: ctx, in, opts
func (_m *EVMClient) CallContract(ctx context.Context, in *evmpb.CallContractRequest, opts ...grpc.CallOption) (*evmpb.CallContractReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CallContract")
	}

	var r0 *evmpb.CallContractReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evmpb.CallContractRequest, ...grpc.CallOption) (*evmpb.CallContractReply, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evmpb.CallContractRequest, ...grpc.CallOption) *evmpb.CallContractReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evmpb.CallContractReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evmpb.CallContractRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EVMClient_CallContract_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CallContract'
type EVMClient_CallContract_Call struct {
	*mock.Call
}

// CallContract is a helper method to define mock.On call
//   - ctx context.Context
//   - in *evmpb.CallContractRequest
//   - opts ...grpc.CallOption
func (_e *EVMClient_Expecter) CallContract(ctx interface{}, in interface{}, opts ...interface{}) *EVMClient_CallContract_Call {
	return &EVMClient_CallContract_Call{Call: _e.mock.On("CallContract",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *EVMClient_CallContract_Call) Run(run func(ctx context.Context, in *evmpb.CallContractRequest, opts ...grpc.CallOption)) *EVMClient_CallContract_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*evmpb.CallContractRequest), variadicArgs...)
	})
	return _c
}

func (_c *EVMClient_CallContract_Call) Return(_a0 *evmpb.CallContractReply, _a1 error) *EVMClient_CallContract_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EVMClient_CallContract_Call) RunAndReturn(run func(context.Context, *evmpb.CallContractRequest, ...grpc.CallOption) (*evmpb.CallContractReply, error)) *EVMClient_CallContract_Call {
	_c.Call.Return(run)
	return _c
}

// EstimateGas provides a mock function with given fields: ctx, in, opts
func (_m *EVMClient) EstimateGas(ctx context.Context, in *evmpb.EstimateGasRequest, opts ...grpc.CallOption) (*evmpb.EstimateGasReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EstimateGas")
	}

	var r0 *evmpb.EstimateGasReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evmpb.EstimateGasRequest, ...grpc.CallOption) (*evmpb.EstimateGasReply, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evmpb.EstimateGasRequest, ...grpc.CallOption) *evmpb.EstimateGasReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evmpb.EstimateGasReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evmpb.EstimateGasRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EVMClient_EstimateGas_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EstimateGas'
type EVMClient_EstimateGas_Call struct {
	*mock.Call
}

// EstimateGas is a helper method to define mock.On call
//   - ctx context.Context
//   - in *evmpb.EstimateGasRequest
//   - opts ...grpc.CallOption
func (_e *EVMClient_Expecter) EstimateGas(ctx interface{}, in interface{}, opts ...interface{}) *EVMClient_EstimateGas_Call {
	return &EVMClient_EstimateGas_Call{Call: _e.mock.On("EstimateGas",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *EVMClient_EstimateGas_Call) Run(run func(ctx context.Context, in *evmpb.EstimateGasRequest, opts ...grpc.CallOption)) *EVMClient_EstimateGas_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*evmpb.EstimateGasRequest), variadicArgs...)
	})
	return _c
}

func (_c *EVMClient_EstimateGas_Call) Return(_a0 *evmpb.EstimateGasReply, _a1 error) *EVMClient_EstimateGas_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EVMClient_EstimateGas_Call) RunAndReturn(run func(context.Context, *evmpb.EstimateGasRequest, ...grpc.CallOption) (*evmpb.EstimateGasReply, error)) *EVMClient_EstimateGas_Call {
	_c.Call.Return(run)
	return _c
}

// GetLogs provides a mock function with given fields: ctx, in, opts
func (_m *EVMClient) GetLogs(ctx context.Context, in *evmpb.GetLogsRequest, opts ...grpc.CallOption) (*evmpb.GetLogsReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLogs")
	}

	var r0 *evmpb.GetLogsReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evmpb.GetLogsRequest, ...grpc.CallOption) (*evmpb.GetLogsReply, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evmpb.GetLogsRequest, ...grpc.CallOption) *evmpb.GetLogsReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evmpb.GetLogsReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evmpb.GetLogsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EVMClient_GetLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogs'
type EVMClient_GetLogs_Call struct {
	*mock.Call
}

// GetLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - in *evmpb.GetLogsRequest
//   - opts ...grpc.CallOption
func (_e *EVMClient_Expecter) GetLogs(ctx interface{}, in interface{}, opts ...interface{}) *EVMClient_GetLogs_Call {
	return &EVMClient_GetLogs_Call{Call: _e.mock.On("GetLogs",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *EVMClient_GetLogs_Call) Run(run func(ctx context.Context, in *evmpb.GetLogsRequest, opts ...grpc.CallOption)) *EVMClient_GetLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*evmpb.GetLogsRequest), variadicArgs...)
	})
	return _c
}

func (_c *EVMClient_GetLogs_Call) Return(_a0 *evmpb.GetLogsReply, _a1 error) *EVMClient_GetLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EVMClient_GetLogs_Call) RunAndReturn(run func(context.Context, *evmpb.GetLogsRequest, ...grpc.CallOption) (*evmpb.GetLogsReply, error)) *EVMClient_GetLogs_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionByHash provides a mock function with given fields: ctx, in, opts
func (_m *EVMClient) GetTransactionByHash(ctx context.Context, in *evmpb.GetTransactionByHashRequest, opts ...grpc.CallOption) (*evmpb.GetTransactionByHashReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionByHash")
	}

	var r0 *evmpb.GetTransactionByHashReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evmpb.GetTransactionByHashRequest, ...grpc.CallOption) (*evmpb.GetTransactionByHashReply, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evmpb.GetTransactionByHashRequest, ...grpc.CallOption) *evmpb.GetTransactionByHashReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evmpb.GetTransactionByHashReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evmpb.GetTransactionByHashRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EVMClient_GetTransactionByHash_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionByHash'
type EVMClient_GetTransactionByHash_Call struct {
	*mock.Call
}

// GetTransactionByHash is a helper method to define mock.On call
//   - ctx context.Context
//   - in *evmpb.GetTransactionByHashRequest
//   - opts ...grpc.CallOption
func (_e *EVMClient_Expecter) GetTransactionByHash(ctx interface{}, in interface{}, opts ...interface{}) *EVMClient_GetTransactionByHash_Call {
	return &EVMClient_GetTransactionByHash_Call{Call: _e.mock.On("GetTransactionByHash",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *EVMClient_GetTransactionByHash_Call) Run(run func(ctx context.Context, in *evmpb.GetTransactionByHashRequest, opts ...grpc.CallOption)) *EVMClient_GetTransactionByHash_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*evmpb.GetTransactionByHashRequest), variadicArgs...)
	})
	return _c
}

func (_c *EVMClient_GetTransactionByHash_Call) Return(_a0 *evmpb.GetTransactionByHashReply, _a1 error) *EVMClient_GetTransactionByHash_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EVMClient_GetTransactionByHash_Call) RunAndReturn(run func(context.Context, *evmpb.GetTransactionByHashRequest, ...grpc.CallOption) (*evmpb.GetTransactionByHashReply, error)) *EVMClient_GetTransactionByHash_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionFee provides a mock function with given fields: ctx, in, opts
func (_m *EVMClient) GetTransactionFee(ctx context.Context, in *evmpb.GetTransactionFeeRequest, opts ...grpc.CallOption) (*evmpb.GetTransactionFeeReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionFee")
	}

	var r0 *evmpb.GetTransactionFeeReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evmpb.GetTransactionFeeRequest, ...grpc.CallOption) (*evmpb.GetTransactionFeeReply, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evmpb.GetTransactionFeeRequest, ...grpc.CallOption) *evmpb.GetTransactionFeeReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evmpb.GetTransactionFeeReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evmpb.GetTransactionFeeRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EVMClient_GetTransactionFee_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionFee'
type EVMClient_GetTransactionFee_Call struct {
	*mock.Call
}

// GetTransactionFee is a helper method to define mock.On call
//   - ctx context.Context
//   - in *evmpb.GetTransactionFeeRequest
//   - opts ...grpc.CallOption
func (_e *EVMClient_Expecter) GetTransactionFee(ctx interface{}, in interface{}, opts ...interface{}) *EVMClient_GetTransactionFee_Call {
	return &EVMClient_GetTransactionFee_Call{Call: _e.mock.On("GetTransactionFee",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *EVMClient_GetTransactionFee_Call) Run(run func(ctx context.Context, in *evmpb.GetTransactionFeeRequest, opts ...grpc.CallOption)) *EVMClient_GetTransactionFee_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*evmpb.GetTransactionFeeRequest), variadicArgs...)
	})
	return _c
}

func (_c *EVMClient_GetTransactionFee_Call) Return(_a0 *evmpb.GetTransactionFeeReply, _a1 error) *EVMClient_GetTransactionFee_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EVMClient_GetTransactionFee_Call) RunAndReturn(run func(context.Context, *evmpb.GetTransactionFeeRequest, ...grpc.CallOption) (*evmpb.GetTransactionFeeReply, error)) *EVMClient_GetTransactionFee_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionReceipt provides a mock function with given fields: ctx, in, opts
func (_m *EVMClient) GetTransactionReceipt(ctx context.Context, in *evmpb.GetReceiptRequest, opts ...grpc.CallOption) (*evmpb.GetReceiptReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionReceipt")
	}

	var r0 *evmpb.GetReceiptReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evmpb.GetReceiptRequest, ...grpc.CallOption) (*evmpb.GetReceiptReply, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evmpb.GetReceiptRequest, ...grpc.CallOption) *evmpb.GetReceiptReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evmpb.GetReceiptReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evmpb.GetReceiptRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EVMClient_GetTransactionReceipt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionReceipt'
type EVMClient_GetTransactionReceipt_Call struct {
	*mock.Call
}

// GetTransactionReceipt is a helper method to define mock.On call
//   - ctx context.Context
//   - in *evmpb.GetReceiptRequest
//   - opts ...grpc.CallOption
func (_e *EVMClient_Expecter) GetTransactionReceipt(ctx interface{}, in interface{}, opts ...interface{}) *EVMClient_GetTransactionReceipt_Call {
	return &EVMClient_GetTransactionReceipt_Call{Call: _e.mock.On("GetTransactionReceipt",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *EVMClient_GetTransactionReceipt_Call) Run(run func(ctx context.Context, in *evmpb.GetReceiptRequest, opts ...grpc.CallOption)) *EVMClient_GetTransactionReceipt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*evmpb.GetReceiptRequest), variadicArgs...)
	})
	return _c
}

func (_c *EVMClient_GetTransactionReceipt_Call) Return(_a0 *evmpb.GetReceiptReply, _a1 error) *EVMClient_GetTransactionReceipt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EVMClient_GetTransactionReceipt_Call) RunAndReturn(run func(context.Context, *evmpb.GetReceiptRequest, ...grpc.CallOption) (*evmpb.GetReceiptReply, error)) *EVMClient_GetTransactionReceipt_Call {
	_c.Call.Return(run)
	return _c
}

// GetTransactionStatus provides a mock function with given fields: ctx, in, opts
func (_m *EVMClient) GetTransactionStatus(ctx context.Context, in *pb.GetTransactionStatusRequest, opts ...grpc.CallOption) (*pb.GetTransactionStatusReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTransactionStatus")
	}

	var r0 *pb.GetTransactionStatusReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetTransactionStatusRequest, ...grpc.CallOption) (*pb.GetTransactionStatusReply, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetTransactionStatusRequest, ...grpc.CallOption) *pb.GetTransactionStatusReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetTransactionStatusReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetTransactionStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EVMClient_GetTransactionStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTransactionStatus'
type EVMClient_GetTransactionStatus_Call struct {
	*mock.Call
}

// GetTransactionStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - in *pb.GetTransactionStatusRequest
//   - opts ...grpc.CallOption
func (_e *EVMClient_Expecter) GetTransactionStatus(ctx interface{}, in interface{}, opts ...interface{}) *EVMClient_GetTransactionStatus_Call {
	return &EVMClient_GetTransactionStatus_Call{Call: _e.mock.On("GetTransactionStatus",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *EVMClient_GetTransactionStatus_Call) Run(run func(ctx context.Context, in *pb.GetTransactionStatusRequest, opts ...grpc.CallOption)) *EVMClient_GetTransactionStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*pb.GetTransactionStatusRequest), variadicArgs...)
	})
	return _c
}

func (_c *EVMClient_GetTransactionStatus_Call) Return(_a0 *pb.GetTransactionStatusReply, _a1 error) *EVMClient_GetTransactionStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EVMClient_GetTransactionStatus_Call) RunAndReturn(run func(context.Context, *pb.GetTransactionStatusRequest, ...grpc.CallOption) (*pb.GetTransactionStatusReply, error)) *EVMClient_GetTransactionStatus_Call {
	_c.Call.Return(run)
	return _c
}

// LatestAndFinalizedHead provides a mock function with given fields: ctx, in, opts
func (_m *EVMClient) LatestAndFinalizedHead(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*evmpb.LatestAndFinalizedHeadReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LatestAndFinalizedHead")
	}

	var r0 *evmpb.LatestAndFinalizedHeadReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) (*evmpb.LatestAndFinalizedHeadReply, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) *evmpb.LatestAndFinalizedHeadReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evmpb.LatestAndFinalizedHeadReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EVMClient_LatestAndFinalizedHead_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LatestAndFinalizedHead'
type EVMClient_LatestAndFinalizedHead_Call struct {
	*mock.Call
}

// LatestAndFinalizedHead is a helper method to define mock.On call
//   - ctx context.Context
//   - in *emptypb.Empty
//   - opts ...grpc.CallOption
func (_e *EVMClient_Expecter) LatestAndFinalizedHead(ctx interface{}, in interface{}, opts ...interface{}) *EVMClient_LatestAndFinalizedHead_Call {
	return &EVMClient_LatestAndFinalizedHead_Call{Call: _e.mock.On("LatestAndFinalizedHead",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *EVMClient_LatestAndFinalizedHead_Call) Run(run func(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption)) *EVMClient_LatestAndFinalizedHead_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*emptypb.Empty), variadicArgs...)
	})
	return _c
}

func (_c *EVMClient_LatestAndFinalizedHead_Call) Return(_a0 *evmpb.LatestAndFinalizedHeadReply, _a1 error) *EVMClient_LatestAndFinalizedHead_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EVMClient_LatestAndFinalizedHead_Call) RunAndReturn(run func(context.Context, *emptypb.Empty, ...grpc.CallOption) (*evmpb.LatestAndFinalizedHeadReply, error)) *EVMClient_LatestAndFinalizedHead_Call {
	_c.Call.Return(run)
	return _c
}

// QueryLogsFromCache provides a mock function with given fields: ctx, in, opts
func (_m *EVMClient) QueryLogsFromCache(ctx context.Context, in *evmpb.QueryLogsFromCacheRequest, opts ...grpc.CallOption) (*evmpb.QueryLogsFromCacheReply, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryLogsFromCache")
	}

	var r0 *evmpb.QueryLogsFromCacheReply
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evmpb.QueryLogsFromCacheRequest, ...grpc.CallOption) (*evmpb.QueryLogsFromCacheReply, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evmpb.QueryLogsFromCacheRequest, ...grpc.CallOption) *evmpb.QueryLogsFromCacheReply); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evmpb.QueryLogsFromCacheReply)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evmpb.QueryLogsFromCacheRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EVMClient_QueryLogsFromCache_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryLogsFromCache'
type EVMClient_QueryLogsFromCache_Call struct {
	*mock.Call
}

// QueryLogsFromCache is a helper method to define mock.On call
//   - ctx context.Context
//   - in *evmpb.QueryLogsFromCacheRequest
//   - opts ...grpc.CallOption
func (_e *EVMClient_Expecter) QueryLogsFromCache(ctx interface{}, in interface{}, opts ...interface{}) *EVMClient_QueryLogsFromCache_Call {
	return &EVMClient_QueryLogsFromCache_Call{Call: _e.mock.On("QueryLogsFromCache",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *EVMClient_QueryLogsFromCache_Call) Run(run func(ctx context.Context, in *evmpb.QueryLogsFromCacheRequest, opts ...grpc.CallOption)) *EVMClient_QueryLogsFromCache_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*evmpb.QueryLogsFromCacheRequest), variadicArgs...)
	})
	return _c
}

func (_c *EVMClient_QueryLogsFromCache_Call) Return(_a0 *evmpb.QueryLogsFromCacheReply, _a1 error) *EVMClient_QueryLogsFromCache_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EVMClient_QueryLogsFromCache_Call) RunAndReturn(run func(context.Context, *evmpb.QueryLogsFromCacheRequest, ...grpc.CallOption) (*evmpb.QueryLogsFromCacheReply, error)) *EVMClient_QueryLogsFromCache_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterLogTracking provides a mock function with given fields: ctx, in, opts
func (_m *EVMClient) RegisterLogTracking(ctx context.Context, in *evmpb.RegisterLogTrackingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterLogTracking")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evmpb.RegisterLogTrackingRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evmpb.RegisterLogTrackingRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evmpb.RegisterLogTrackingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EVMClient_RegisterLogTracking_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterLogTracking'
type EVMClient_RegisterLogTracking_Call struct {
	*mock.Call
}

// RegisterLogTracking is a helper method to define mock.On call
//   - ctx context.Context
//   - in *evmpb.RegisterLogTrackingRequest
//   - opts ...grpc.CallOption
func (_e *EVMClient_Expecter) RegisterLogTracking(ctx interface{}, in interface{}, opts ...interface{}) *EVMClient_RegisterLogTracking_Call {
	return &EVMClient_RegisterLogTracking_Call{Call: _e.mock.On("RegisterLogTracking",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *EVMClient_RegisterLogTracking_Call) Run(run func(ctx context.Context, in *evmpb.RegisterLogTrackingRequest, opts ...grpc.CallOption)) *EVMClient_RegisterLogTracking_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*evmpb.RegisterLogTrackingRequest), variadicArgs...)
	})
	return _c
}

func (_c *EVMClient_RegisterLogTracking_Call) Return(_a0 *emptypb.Empty, _a1 error) *EVMClient_RegisterLogTracking_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EVMClient_RegisterLogTracking_Call) RunAndReturn(run func(context.Context, *evmpb.RegisterLogTrackingRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *EVMClient_RegisterLogTracking_Call {
	_c.Call.Return(run)
	return _c
}

// UnregisterLogTracking provides a mock function with given fields: ctx, in, opts
func (_m *EVMClient) UnregisterLogTracking(ctx context.Context, in *evmpb.UnregisterLogTrackingRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnregisterLogTracking")
	}

	var r0 *emptypb.Empty
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evmpb.UnregisterLogTrackingRequest, ...grpc.CallOption) (*emptypb.Empty, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evmpb.UnregisterLogTrackingRequest, ...grpc.CallOption) *emptypb.Empty); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evmpb.UnregisterLogTrackingRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EVMClient_UnregisterLogTracking_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterLogTracking'
type EVMClient_UnregisterLogTracking_Call struct {
	*mock.Call
}

// UnregisterLogTracking is a helper method to define mock.On call
//   - ctx context.Context
//   - in *evmpb.UnregisterLogTrackingRequest
//   - opts ...grpc.CallOption
func (_e *EVMClient_Expecter) UnregisterLogTracking(ctx interface{}, in interface{}, opts ...interface{}) *EVMClient_UnregisterLogTracking_Call {
	return &EVMClient_UnregisterLogTracking_Call{Call: _e.mock.On("UnregisterLogTracking",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *EVMClient_UnregisterLogTracking_Call) Run(run func(ctx context.Context, in *evmpb.UnregisterLogTrackingRequest, opts ...grpc.CallOption)) *EVMClient_UnregisterLogTracking_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*evmpb.UnregisterLogTrackingRequest), variadicArgs...)
	})
	return _c
}

func (_c *EVMClient_UnregisterLogTracking_Call) Return(_a0 *emptypb.Empty, _a1 error) *EVMClient_UnregisterLogTracking_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EVMClient_UnregisterLogTracking_Call) RunAndReturn(run func(context.Context, *evmpb.UnregisterLogTrackingRequest, ...grpc.CallOption) (*emptypb.Empty, error)) *EVMClient_UnregisterLogTracking_Call {
	_c.Call.Return(run)
	return _c
}

// NewEVMClient creates a new instance of EVMClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEVMClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *EVMClient {
	mock := &EVMClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
