// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: chain_capabilities.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChainCapabilities_FindProgramAddress_FullMethodName     = "/loop.ChainCapabilities/FindProgramAddress"
	ChainCapabilities_GetAccountData_FullMethodName         = "/loop.ChainCapabilities/GetAccountData"
	ChainCapabilities_GetMultipleAccountData_FullMethodName = "/loop.ChainCapabilities/GetMultipleAccountData"
	ChainCapabilities_ReadContract_FullMethodName           = "/loop.ChainCapabilities/ReadContract"
)

// ChainCapabilitiesClient is the client API for ChainCapabilities service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service that aggregates both Solana and EVM chain reading capabilities.
type ChainCapabilitiesClient interface {
	// Solana-related methods
	FindProgramAddress(ctx context.Context, in *FindProgramAddressRequest, opts ...grpc.CallOption) (*FindProgramAddressReply, error)
	GetAccountData(ctx context.Context, in *GetAccountDataRequest, opts ...grpc.CallOption) (*GetAccountDataReply, error)
	GetMultipleAccountData(ctx context.Context, in *GetMultipleAccountDataRequest, opts ...grpc.CallOption) (*GetMultipleAccountDataReply, error)
	// EVM-related method
	ReadContract(ctx context.Context, in *ReadContractRequest, opts ...grpc.CallOption) (*ReadContractReply, error)
}

type chainCapabilitiesClient struct {
	cc grpc.ClientConnInterface
}

func NewChainCapabilitiesClient(cc grpc.ClientConnInterface) ChainCapabilitiesClient {
	return &chainCapabilitiesClient{cc}
}

func (c *chainCapabilitiesClient) FindProgramAddress(ctx context.Context, in *FindProgramAddressRequest, opts ...grpc.CallOption) (*FindProgramAddressReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindProgramAddressReply)
	err := c.cc.Invoke(ctx, ChainCapabilities_FindProgramAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainCapabilitiesClient) GetAccountData(ctx context.Context, in *GetAccountDataRequest, opts ...grpc.CallOption) (*GetAccountDataReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountDataReply)
	err := c.cc.Invoke(ctx, ChainCapabilities_GetAccountData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainCapabilitiesClient) GetMultipleAccountData(ctx context.Context, in *GetMultipleAccountDataRequest, opts ...grpc.CallOption) (*GetMultipleAccountDataReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMultipleAccountDataReply)
	err := c.cc.Invoke(ctx, ChainCapabilities_GetMultipleAccountData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chainCapabilitiesClient) ReadContract(ctx context.Context, in *ReadContractRequest, opts ...grpc.CallOption) (*ReadContractReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadContractReply)
	err := c.cc.Invoke(ctx, ChainCapabilities_ReadContract_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChainCapabilitiesServer is the server API for ChainCapabilities service.
// All implementations must embed UnimplementedChainCapabilitiesServer
// for forward compatibility.
//
// Service that aggregates both Solana and EVM chain reading capabilities.
type ChainCapabilitiesServer interface {
	// Solana-related methods
	FindProgramAddress(context.Context, *FindProgramAddressRequest) (*FindProgramAddressReply, error)
	GetAccountData(context.Context, *GetAccountDataRequest) (*GetAccountDataReply, error)
	GetMultipleAccountData(context.Context, *GetMultipleAccountDataRequest) (*GetMultipleAccountDataReply, error)
	// EVM-related method
	ReadContract(context.Context, *ReadContractRequest) (*ReadContractReply, error)
	mustEmbedUnimplementedChainCapabilitiesServer()
}

// UnimplementedChainCapabilitiesServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChainCapabilitiesServer struct{}

func (UnimplementedChainCapabilitiesServer) FindProgramAddress(context.Context, *FindProgramAddressRequest) (*FindProgramAddressReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindProgramAddress not implemented")
}
func (UnimplementedChainCapabilitiesServer) GetAccountData(context.Context, *GetAccountDataRequest) (*GetAccountDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountData not implemented")
}
func (UnimplementedChainCapabilitiesServer) GetMultipleAccountData(context.Context, *GetMultipleAccountDataRequest) (*GetMultipleAccountDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMultipleAccountData not implemented")
}
func (UnimplementedChainCapabilitiesServer) ReadContract(context.Context, *ReadContractRequest) (*ReadContractReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadContract not implemented")
}
func (UnimplementedChainCapabilitiesServer) mustEmbedUnimplementedChainCapabilitiesServer() {}
func (UnimplementedChainCapabilitiesServer) testEmbeddedByValue()                           {}

// UnsafeChainCapabilitiesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChainCapabilitiesServer will
// result in compilation errors.
type UnsafeChainCapabilitiesServer interface {
	mustEmbedUnimplementedChainCapabilitiesServer()
}

func RegisterChainCapabilitiesServer(s grpc.ServiceRegistrar, srv ChainCapabilitiesServer) {
	// If the following call pancis, it indicates UnimplementedChainCapabilitiesServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChainCapabilities_ServiceDesc, srv)
}

func _ChainCapabilities_FindProgramAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindProgramAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainCapabilitiesServer).FindProgramAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainCapabilities_FindProgramAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainCapabilitiesServer).FindProgramAddress(ctx, req.(*FindProgramAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainCapabilities_GetAccountData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainCapabilitiesServer).GetAccountData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainCapabilities_GetAccountData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainCapabilitiesServer).GetAccountData(ctx, req.(*GetAccountDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainCapabilities_GetMultipleAccountData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMultipleAccountDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainCapabilitiesServer).GetMultipleAccountData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainCapabilities_GetMultipleAccountData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainCapabilitiesServer).GetMultipleAccountData(ctx, req.(*GetMultipleAccountDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChainCapabilities_ReadContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadContractRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChainCapabilitiesServer).ReadContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChainCapabilities_ReadContract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChainCapabilitiesServer).ReadContract(ctx, req.(*ReadContractRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChainCapabilities_ServiceDesc is the grpc.ServiceDesc for ChainCapabilities service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChainCapabilities_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.ChainCapabilities",
	HandlerType: (*ChainCapabilitiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindProgramAddress",
			Handler:    _ChainCapabilities_FindProgramAddress_Handler,
		},
		{
			MethodName: "GetAccountData",
			Handler:    _ChainCapabilities_GetAccountData_Handler,
		},
		{
			MethodName: "GetMultipleAccountData",
			Handler:    _ChainCapabilities_GetMultipleAccountData_Handler,
		},
		{
			MethodName: "ReadContract",
			Handler:    _ChainCapabilities_ReadContract_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chain_capabilities.proto",
}
