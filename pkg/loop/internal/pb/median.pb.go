// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: median.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// NewMedianFactoryRequest has arguments for [github.com/smartcontractkit/chainlink-common/pkg/loop.Relayer.NewMedianFactory].
type NewMedianFactoryRequest struct {
	state                        protoimpl.MessageState `protogen:"open.v1"`
	MedianProviderID             uint32                 `protobuf:"varint,1,opt,name=medianProviderID,proto3" json:"medianProviderID,omitempty"`
	ContractID                   string                 `protobuf:"bytes,2,opt,name=contractID,proto3" json:"contractID,omitempty"`
	DataSourceID                 uint32                 `protobuf:"varint,3,opt,name=dataSourceID,proto3" json:"dataSourceID,omitempty"`
	JuelsPerFeeCoinDataSourceID  uint32                 `protobuf:"varint,4,opt,name=juelsPerFeeCoinDataSourceID,proto3" json:"juelsPerFeeCoinDataSourceID,omitempty"`
	ErrorLogID                   uint32                 `protobuf:"varint,5,opt,name=errorLogID,proto3" json:"errorLogID,omitempty"`
	GasPriceSubunitsDataSourceID uint32                 `protobuf:"varint,6,opt,name=gasPriceSubunitsDataSourceID,proto3" json:"gasPriceSubunitsDataSourceID,omitempty"`
	DeviationFuncDefinition      []byte                 `protobuf:"bytes,7,opt,name=deviationFuncDefinition,proto3,oneof" json:"deviationFuncDefinition,omitempty"` // serialized JSON, may be nil
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *NewMedianFactoryRequest) Reset() {
	*x = NewMedianFactoryRequest{}
	mi := &file_median_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewMedianFactoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMedianFactoryRequest) ProtoMessage() {}

func (x *NewMedianFactoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_median_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMedianFactoryRequest.ProtoReflect.Descriptor instead.
func (*NewMedianFactoryRequest) Descriptor() ([]byte, []int) {
	return file_median_proto_rawDescGZIP(), []int{0}
}

func (x *NewMedianFactoryRequest) GetMedianProviderID() uint32 {
	if x != nil {
		return x.MedianProviderID
	}
	return 0
}

func (x *NewMedianFactoryRequest) GetContractID() string {
	if x != nil {
		return x.ContractID
	}
	return ""
}

func (x *NewMedianFactoryRequest) GetDataSourceID() uint32 {
	if x != nil {
		return x.DataSourceID
	}
	return 0
}

func (x *NewMedianFactoryRequest) GetJuelsPerFeeCoinDataSourceID() uint32 {
	if x != nil {
		return x.JuelsPerFeeCoinDataSourceID
	}
	return 0
}

func (x *NewMedianFactoryRequest) GetErrorLogID() uint32 {
	if x != nil {
		return x.ErrorLogID
	}
	return 0
}

func (x *NewMedianFactoryRequest) GetGasPriceSubunitsDataSourceID() uint32 {
	if x != nil {
		return x.GasPriceSubunitsDataSourceID
	}
	return 0
}

func (x *NewMedianFactoryRequest) GetDeviationFuncDefinition() []byte {
	if x != nil {
		return x.DeviationFuncDefinition
	}
	return nil
}

// NewMedianFactoryRequest has return arguments for [github.com/smartcontractkit/chainlink-common/pkg/loop.Relayer.NewMedianFactory].
type NewMedianFactoryReply struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	ReportingPluginFactoryID uint32                 `protobuf:"varint,1,opt,name=reportingPluginFactoryID,proto3" json:"reportingPluginFactoryID,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *NewMedianFactoryReply) Reset() {
	*x = NewMedianFactoryReply{}
	mi := &file_median_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NewMedianFactoryReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewMedianFactoryReply) ProtoMessage() {}

func (x *NewMedianFactoryReply) ProtoReflect() protoreflect.Message {
	mi := &file_median_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewMedianFactoryReply.ProtoReflect.Descriptor instead.
func (*NewMedianFactoryReply) Descriptor() ([]byte, []int) {
	return file_median_proto_rawDescGZIP(), []int{1}
}

func (x *NewMedianFactoryReply) GetReportingPluginFactoryID() uint32 {
	if x != nil {
		return x.ReportingPluginFactoryID
	}
	return 0
}

// SaveErrorRequest has arguments for [github.com/smartcontractkit/chainlink-common/pkg/loop.ErrorLog.SaveErrorRequest].
type SaveErrorRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveErrorRequest) Reset() {
	*x = SaveErrorRequest{}
	mi := &file_median_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveErrorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveErrorRequest) ProtoMessage() {}

func (x *SaveErrorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_median_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveErrorRequest.ProtoReflect.Descriptor instead.
func (*SaveErrorRequest) Descriptor() ([]byte, []int) {
	return file_median_proto_rawDescGZIP(), []int{2}
}

func (x *SaveErrorRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// ParsedAttributedObservation represents [github.com/smartcontractkit/libocr/offchainreporting2/reportingplugin/median.ParsedAttributedObservation].
type ParsedAttributedObservation struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Timestamp        uint32                 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Value            *BigInt                `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	JulesPerFeeCoin  *BigInt                `protobuf:"bytes,3,opt,name=julesPerFeeCoin,proto3" json:"julesPerFeeCoin,omitempty"`
	Observer         uint32                 `protobuf:"varint,4,opt,name=observer,proto3" json:"observer,omitempty"` // uint8
	GasPriceSubunits *BigInt                `protobuf:"bytes,5,opt,name=gasPriceSubunits,proto3" json:"gasPriceSubunits,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ParsedAttributedObservation) Reset() {
	*x = ParsedAttributedObservation{}
	mi := &file_median_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParsedAttributedObservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParsedAttributedObservation) ProtoMessage() {}

func (x *ParsedAttributedObservation) ProtoReflect() protoreflect.Message {
	mi := &file_median_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParsedAttributedObservation.ProtoReflect.Descriptor instead.
func (*ParsedAttributedObservation) Descriptor() ([]byte, []int) {
	return file_median_proto_rawDescGZIP(), []int{3}
}

func (x *ParsedAttributedObservation) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ParsedAttributedObservation) GetValue() *BigInt {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ParsedAttributedObservation) GetJulesPerFeeCoin() *BigInt {
	if x != nil {
		return x.JulesPerFeeCoin
	}
	return nil
}

func (x *ParsedAttributedObservation) GetObserver() uint32 {
	if x != nil {
		return x.Observer
	}
	return 0
}

func (x *ParsedAttributedObservation) GetGasPriceSubunits() *BigInt {
	if x != nil {
		return x.GasPriceSubunits
	}
	return nil
}

// BuildReportRequest has arguments for [github.com/smartcontractkit/libocr/offchainreporting2/reportingplugin/median.ReportCodec.BuildReport].
type BuildReportRequest struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Observations  []*ParsedAttributedObservation `protobuf:"bytes,1,rep,name=observations,proto3" json:"observations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BuildReportRequest) Reset() {
	*x = BuildReportRequest{}
	mi := &file_median_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildReportRequest) ProtoMessage() {}

func (x *BuildReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_median_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildReportRequest.ProtoReflect.Descriptor instead.
func (*BuildReportRequest) Descriptor() ([]byte, []int) {
	return file_median_proto_rawDescGZIP(), []int{4}
}

func (x *BuildReportRequest) GetObservations() []*ParsedAttributedObservation {
	if x != nil {
		return x.Observations
	}
	return nil
}

// BuildReportReply has return arguments for [github.com/smartcontractkit/libocr/offchainreporting2/reportingplugin/median.ReportCodec.BuildReport].
type BuildReportReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Report        []byte                 `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BuildReportReply) Reset() {
	*x = BuildReportReply{}
	mi := &file_median_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildReportReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildReportReply) ProtoMessage() {}

func (x *BuildReportReply) ProtoReflect() protoreflect.Message {
	mi := &file_median_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildReportReply.ProtoReflect.Descriptor instead.
func (*BuildReportReply) Descriptor() ([]byte, []int) {
	return file_median_proto_rawDescGZIP(), []int{5}
}

func (x *BuildReportReply) GetReport() []byte {
	if x != nil {
		return x.Report
	}
	return nil
}

// MedianFromReportRequest has arguments for [github.com/smartcontractkit/libocr/offchainreporting2/reportingplugin/median.ReportCodec.MedianFromReport].
type MedianFromReportRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Report        []byte                 `protobuf:"bytes,1,opt,name=report,proto3" json:"report,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MedianFromReportRequest) Reset() {
	*x = MedianFromReportRequest{}
	mi := &file_median_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MedianFromReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedianFromReportRequest) ProtoMessage() {}

func (x *MedianFromReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_median_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedianFromReportRequest.ProtoReflect.Descriptor instead.
func (*MedianFromReportRequest) Descriptor() ([]byte, []int) {
	return file_median_proto_rawDescGZIP(), []int{6}
}

func (x *MedianFromReportRequest) GetReport() []byte {
	if x != nil {
		return x.Report
	}
	return nil
}

// MedianFromReportReply has return arguments for [github.com/smartcontractkit/libocr/offchainreporting2/reportingplugin/median.ReportCodec.MedianFromReport].
type MedianFromReportReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Median        *BigInt                `protobuf:"bytes,1,opt,name=median,proto3" json:"median,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MedianFromReportReply) Reset() {
	*x = MedianFromReportReply{}
	mi := &file_median_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MedianFromReportReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MedianFromReportReply) ProtoMessage() {}

func (x *MedianFromReportReply) ProtoReflect() protoreflect.Message {
	mi := &file_median_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MedianFromReportReply.ProtoReflect.Descriptor instead.
func (*MedianFromReportReply) Descriptor() ([]byte, []int) {
	return file_median_proto_rawDescGZIP(), []int{7}
}

func (x *MedianFromReportReply) GetMedian() *BigInt {
	if x != nil {
		return x.Median
	}
	return nil
}

// MaxReportLengthRequest has arguments for [github.com/smartcontractkit/libocr/offchainreporting2/reportingplugin/median.ReportCodec.MaxReportLength].
type MaxReportLengthRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	N             int64                  `protobuf:"varint,1,opt,name=n,proto3" json:"n,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MaxReportLengthRequest) Reset() {
	*x = MaxReportLengthRequest{}
	mi := &file_median_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MaxReportLengthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxReportLengthRequest) ProtoMessage() {}

func (x *MaxReportLengthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_median_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxReportLengthRequest.ProtoReflect.Descriptor instead.
func (*MaxReportLengthRequest) Descriptor() ([]byte, []int) {
	return file_median_proto_rawDescGZIP(), []int{8}
}

func (x *MaxReportLengthRequest) GetN() int64 {
	if x != nil {
		return x.N
	}
	return 0
}

// MaxReportLengthReply has return arguments for [github.com/smartcontractkit/libocr/offchainreporting2/reportingplugin/median.ReportCodec.MaxReportLength].
type MaxReportLengthReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Max           int64                  `protobuf:"varint,1,opt,name=max,proto3" json:"max,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MaxReportLengthReply) Reset() {
	*x = MaxReportLengthReply{}
	mi := &file_median_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MaxReportLengthReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaxReportLengthReply) ProtoMessage() {}

func (x *MaxReportLengthReply) ProtoReflect() protoreflect.Message {
	mi := &file_median_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaxReportLengthReply.ProtoReflect.Descriptor instead.
func (*MaxReportLengthReply) Descriptor() ([]byte, []int) {
	return file_median_proto_rawDescGZIP(), []int{9}
}

func (x *MaxReportLengthReply) GetMax() int64 {
	if x != nil {
		return x.Max
	}
	return 0
}

type LatestTransmissionDetailsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LatestTransmissionDetailsRequest) Reset() {
	*x = LatestTransmissionDetailsRequest{}
	mi := &file_median_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LatestTransmissionDetailsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestTransmissionDetailsRequest) ProtoMessage() {}

func (x *LatestTransmissionDetailsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_median_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestTransmissionDetailsRequest.ProtoReflect.Descriptor instead.
func (*LatestTransmissionDetailsRequest) Descriptor() ([]byte, []int) {
	return file_median_proto_rawDescGZIP(), []int{10}
}

// LatestTransmissionDetailsReply has return arguments for [github.com/smartcontractkit/libocr/offchainreporting2/reportingplugin/median.MedianContract.LatestTransmissionDetails].
type LatestTransmissionDetailsReply struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ConfigDigest    []byte                 `protobuf:"bytes,1,opt,name=configDigest,proto3" json:"configDigest,omitempty"` // [32]byte
	Epoch           uint32                 `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Round           uint32                 `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"` // uint8
	LatestAnswer    *BigInt                `protobuf:"bytes,4,opt,name=latestAnswer,proto3" json:"latestAnswer,omitempty"`
	LatestTimestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=latestTimestamp,proto3" json:"latestTimestamp,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *LatestTransmissionDetailsReply) Reset() {
	*x = LatestTransmissionDetailsReply{}
	mi := &file_median_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LatestTransmissionDetailsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestTransmissionDetailsReply) ProtoMessage() {}

func (x *LatestTransmissionDetailsReply) ProtoReflect() protoreflect.Message {
	mi := &file_median_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestTransmissionDetailsReply.ProtoReflect.Descriptor instead.
func (*LatestTransmissionDetailsReply) Descriptor() ([]byte, []int) {
	return file_median_proto_rawDescGZIP(), []int{11}
}

func (x *LatestTransmissionDetailsReply) GetConfigDigest() []byte {
	if x != nil {
		return x.ConfigDigest
	}
	return nil
}

func (x *LatestTransmissionDetailsReply) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *LatestTransmissionDetailsReply) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

func (x *LatestTransmissionDetailsReply) GetLatestAnswer() *BigInt {
	if x != nil {
		return x.LatestAnswer
	}
	return nil
}

func (x *LatestTransmissionDetailsReply) GetLatestTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LatestTimestamp
	}
	return nil
}

// LatestRoundRequestedRequest has arguments for [github.com/smartcontractkit/libocr/offchainreporting2/reportingplugin/median.MedianContract.LatestRoundRequested].
type LatestRoundRequestedRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Lookback      int64                  `protobuf:"varint,1,opt,name=lookback,proto3" json:"lookback,omitempty"` // milliseconds
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LatestRoundRequestedRequest) Reset() {
	*x = LatestRoundRequestedRequest{}
	mi := &file_median_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LatestRoundRequestedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestRoundRequestedRequest) ProtoMessage() {}

func (x *LatestRoundRequestedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_median_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestRoundRequestedRequest.ProtoReflect.Descriptor instead.
func (*LatestRoundRequestedRequest) Descriptor() ([]byte, []int) {
	return file_median_proto_rawDescGZIP(), []int{12}
}

func (x *LatestRoundRequestedRequest) GetLookback() int64 {
	if x != nil {
		return x.Lookback
	}
	return 0
}

// LatestRoundRequestedReply has return arguments for [github.com/smartcontractkit/libocr/offchainreporting2/reportingplugin/median.MedianContract.LatestRoundRequested].
type LatestRoundRequestedReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ConfigDigest  []byte                 `protobuf:"bytes,1,opt,name=configDigest,proto3" json:"configDigest,omitempty"` // [32]byte
	Epoch         uint32                 `protobuf:"varint,2,opt,name=epoch,proto3" json:"epoch,omitempty"`
	Round         uint32                 `protobuf:"varint,3,opt,name=round,proto3" json:"round,omitempty"` // uint8
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LatestRoundRequestedReply) Reset() {
	*x = LatestRoundRequestedReply{}
	mi := &file_median_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LatestRoundRequestedReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LatestRoundRequestedReply) ProtoMessage() {}

func (x *LatestRoundRequestedReply) ProtoReflect() protoreflect.Message {
	mi := &file_median_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LatestRoundRequestedReply.ProtoReflect.Descriptor instead.
func (*LatestRoundRequestedReply) Descriptor() ([]byte, []int) {
	return file_median_proto_rawDescGZIP(), []int{13}
}

func (x *LatestRoundRequestedReply) GetConfigDigest() []byte {
	if x != nil {
		return x.ConfigDigest
	}
	return nil
}

func (x *LatestRoundRequestedReply) GetEpoch() uint32 {
	if x != nil {
		return x.Epoch
	}
	return 0
}

func (x *LatestRoundRequestedReply) GetRound() uint32 {
	if x != nil {
		return x.Round
	}
	return 0
}

// OnchainConfig represents [github.com/smartcontractkit/libocr/offchainreporting2/reportingplugin/median.OnchainConfig].
type OnchainConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Min           *BigInt                `protobuf:"bytes,1,opt,name=min,proto3" json:"min,omitempty"`
	Max           *BigInt                `protobuf:"bytes,2,opt,name=max,proto3" json:"max,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OnchainConfig) Reset() {
	*x = OnchainConfig{}
	mi := &file_median_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OnchainConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnchainConfig) ProtoMessage() {}

func (x *OnchainConfig) ProtoReflect() protoreflect.Message {
	mi := &file_median_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnchainConfig.ProtoReflect.Descriptor instead.
func (*OnchainConfig) Descriptor() ([]byte, []int) {
	return file_median_proto_rawDescGZIP(), []int{14}
}

func (x *OnchainConfig) GetMin() *BigInt {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *OnchainConfig) GetMax() *BigInt {
	if x != nil {
		return x.Max
	}
	return nil
}

// EncodeRequest has arguments for [github.com/smartcontractkit/libocr/offchainreporting2/reportingplugin/median.OnchainConfigCodec.Encode].
type EncodeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OnchainConfig *OnchainConfig         `protobuf:"bytes,1,opt,name=onchainConfig,proto3" json:"onchainConfig,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncodeRequest) Reset() {
	*x = EncodeRequest{}
	mi := &file_median_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodeRequest) ProtoMessage() {}

func (x *EncodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_median_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodeRequest.ProtoReflect.Descriptor instead.
func (*EncodeRequest) Descriptor() ([]byte, []int) {
	return file_median_proto_rawDescGZIP(), []int{15}
}

func (x *EncodeRequest) GetOnchainConfig() *OnchainConfig {
	if x != nil {
		return x.OnchainConfig
	}
	return nil
}

// EncodeReply has return arguments for [github.com/smartcontractkit/libocr/offchainreporting2/reportingplugin/median.OnchainConfigCodec.Encode].
type EncodeReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Encoded       []byte                 `protobuf:"bytes,1,opt,name=encoded,proto3" json:"encoded,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EncodeReply) Reset() {
	*x = EncodeReply{}
	mi := &file_median_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EncodeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncodeReply) ProtoMessage() {}

func (x *EncodeReply) ProtoReflect() protoreflect.Message {
	mi := &file_median_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncodeReply.ProtoReflect.Descriptor instead.
func (*EncodeReply) Descriptor() ([]byte, []int) {
	return file_median_proto_rawDescGZIP(), []int{16}
}

func (x *EncodeReply) GetEncoded() []byte {
	if x != nil {
		return x.Encoded
	}
	return nil
}

// DecodeRequest has arguments for [github.com/smartcontractkit/libocr/offchainreporting2/reportingplugin/median.OnchainConfigCodec.Decode].
type DecodeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Encoded       []byte                 `protobuf:"bytes,1,opt,name=encoded,proto3" json:"encoded,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecodeRequest) Reset() {
	*x = DecodeRequest{}
	mi := &file_median_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeRequest) ProtoMessage() {}

func (x *DecodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_median_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeRequest.ProtoReflect.Descriptor instead.
func (*DecodeRequest) Descriptor() ([]byte, []int) {
	return file_median_proto_rawDescGZIP(), []int{17}
}

func (x *DecodeRequest) GetEncoded() []byte {
	if x != nil {
		return x.Encoded
	}
	return nil
}

// DecodeReply has return arguments for [github.com/smartcontractkit/libocr/offchainreporting2/reportingplugin/median.OnchainConfigCodec.Decode].
type DecodeReply struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OnchainConfig *OnchainConfig         `protobuf:"bytes,1,opt,name=onchainConfig,proto3" json:"onchainConfig,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DecodeReply) Reset() {
	*x = DecodeReply{}
	mi := &file_median_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DecodeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecodeReply) ProtoMessage() {}

func (x *DecodeReply) ProtoReflect() protoreflect.Message {
	mi := &file_median_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecodeReply.ProtoReflect.Descriptor instead.
func (*DecodeReply) Descriptor() ([]byte, []int) {
	return file_median_proto_rawDescGZIP(), []int{18}
}

func (x *DecodeReply) GetOnchainConfig() *OnchainConfig {
	if x != nil {
		return x.OnchainConfig
	}
	return nil
}

var File_median_proto protoreflect.FileDescriptor

var file_median_proto_rawDesc = string([]byte{
	0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04,
	0x6c, 0x6f, 0x6f, 0x70, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x8a, 0x03, 0x0a, 0x17, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a,
	0x10, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x74,
	0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x64, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x12, 0x40, 0x0a,
	0x1b, 0x6a, 0x75, 0x65, 0x6c, 0x73, 0x50, 0x65, 0x72, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x69, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x1b, 0x6a, 0x75, 0x65, 0x6c, 0x73, 0x50, 0x65, 0x72, 0x46, 0x65, 0x65, 0x43,
	0x6f, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x49, 0x44, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x49, 0x44, 0x12,
	0x42, 0x0a, 0x1c, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x75, 0x62, 0x75, 0x6e,
	0x69, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53,
	0x75, 0x62, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x44, 0x12, 0x3d, 0x0a, 0x17, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x75, 0x6e, 0x63, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x17, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x75, 0x6e, 0x63, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x75, 0x6e, 0x63, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x53,
	0x0a, 0x15, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3a, 0x0a, 0x18, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x18, 0x72, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x44, 0x22, 0x2c, 0x0a, 0x10, 0x53, 0x61, 0x76, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0xed, 0x01, 0x0a, 0x1b, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x36, 0x0a, 0x0f, 0x6a, 0x75, 0x6c, 0x65, 0x73, 0x50, 0x65, 0x72, 0x46,
	0x65, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x0f, 0x6a, 0x75, 0x6c, 0x65,
	0x73, 0x50, 0x65, 0x72, 0x46, 0x65, 0x65, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x10, 0x67, 0x61, 0x73, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x53, 0x75, 0x62, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52,
	0x10, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x53, 0x75, 0x62, 0x75, 0x6e, 0x69, 0x74,
	0x73, 0x22, 0x5b, 0x0a, 0x12, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0c, 0x6f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x2a,
	0x0a, 0x10, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x31, 0x0a, 0x17, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x3d, 0x0a,
	0x15, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x24, 0x0a, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x42, 0x69,
	0x67, 0x49, 0x6e, 0x74, 0x52, 0x06, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x22, 0x26, 0x0a, 0x16,
	0x4d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x01, 0x6e, 0x22, 0x28, 0x0a, 0x14, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x61, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0x22,
	0x0a, 0x20, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0xe8, 0x01, 0x0a, 0x1e, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x6f,
	0x6f, 0x70, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e, 0x74, 0x52, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0f, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x39, 0x0a,
	0x1b, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x6f, 0x6f, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6c, 0x6f, 0x6f, 0x6b, 0x62, 0x61, 0x63, 0x6b, 0x22, 0x6b, 0x0a, 0x19, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x70, 0x6f,
	0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x4f, 0x0a, 0x0d, 0x4f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1e, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e,
	0x74, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x42, 0x69, 0x67, 0x49, 0x6e,
	0x74, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x22, 0x4a, 0x0a, 0x0d, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0d, 0x6f, 0x6e, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0d, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0x27, 0x0a, 0x0b, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x22, 0x29, 0x0a, 0x0d, 0x44,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x22, 0x48, 0x0a, 0x0b, 0x44, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x39, 0x0a, 0x0d, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x2e, 0x4f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x0d, 0x6f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x32, 0x60, 0x0a, 0x0c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x6e,
	0x12, 0x50, 0x0a, 0x10, 0x4e, 0x65, 0x77, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4e, 0x65, 0x77, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x32, 0x49, 0x0a, 0x08, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4c, 0x6f, 0x67, 0x12, 0x3d,
	0x0a, 0x09, 0x53, 0x61, 0x76, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x16, 0x2e, 0x6c, 0x6f,
	0x6f, 0x70, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x32, 0xf1, 0x01,
	0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x41, 0x0a,
	0x0b, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x12, 0x50, 0x0a, 0x10, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x1d, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0f, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c,
	0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1c, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4d, 0x61, 0x78,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4d, 0x61, 0x78, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x32, 0xdb, 0x01, 0x0a, 0x0e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x12, 0x6b, 0x0a, 0x19, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x26, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6c, 0x6f, 0x6f, 0x70,
	0x2e, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x12, 0x5c, 0x0a, 0x14, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x21, 0x2e, 0x6c, 0x6f, 0x6f, 0x70,
	0x2e, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6c,
	0x6f, 0x6f, 0x70, 0x2e, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32,
	0x7c, 0x0a, 0x12, 0x4f, 0x6e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x43, 0x6f, 0x64, 0x65, 0x63, 0x12, 0x32, 0x0a, 0x06, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x13, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x45, 0x6e, 0x63, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x06, 0x44, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x13, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e, 0x44, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6c, 0x6f, 0x6f, 0x70, 0x2e,
	0x44, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x43, 0x5a,
	0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6d, 0x61, 0x72,
	0x74, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x6b, 0x69, 0x74, 0x2f, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x6c, 0x6f, 0x6f, 0x70, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_median_proto_rawDescOnce sync.Once
	file_median_proto_rawDescData []byte
)

func file_median_proto_rawDescGZIP() []byte {
	file_median_proto_rawDescOnce.Do(func() {
		file_median_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_median_proto_rawDesc), len(file_median_proto_rawDesc)))
	})
	return file_median_proto_rawDescData
}

var file_median_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_median_proto_goTypes = []any{
	(*NewMedianFactoryRequest)(nil),          // 0: loop.NewMedianFactoryRequest
	(*NewMedianFactoryReply)(nil),            // 1: loop.NewMedianFactoryReply
	(*SaveErrorRequest)(nil),                 // 2: loop.SaveErrorRequest
	(*ParsedAttributedObservation)(nil),      // 3: loop.ParsedAttributedObservation
	(*BuildReportRequest)(nil),               // 4: loop.BuildReportRequest
	(*BuildReportReply)(nil),                 // 5: loop.BuildReportReply
	(*MedianFromReportRequest)(nil),          // 6: loop.MedianFromReportRequest
	(*MedianFromReportReply)(nil),            // 7: loop.MedianFromReportReply
	(*MaxReportLengthRequest)(nil),           // 8: loop.MaxReportLengthRequest
	(*MaxReportLengthReply)(nil),             // 9: loop.MaxReportLengthReply
	(*LatestTransmissionDetailsRequest)(nil), // 10: loop.LatestTransmissionDetailsRequest
	(*LatestTransmissionDetailsReply)(nil),   // 11: loop.LatestTransmissionDetailsReply
	(*LatestRoundRequestedRequest)(nil),      // 12: loop.LatestRoundRequestedRequest
	(*LatestRoundRequestedReply)(nil),        // 13: loop.LatestRoundRequestedReply
	(*OnchainConfig)(nil),                    // 14: loop.OnchainConfig
	(*EncodeRequest)(nil),                    // 15: loop.EncodeRequest
	(*EncodeReply)(nil),                      // 16: loop.EncodeReply
	(*DecodeRequest)(nil),                    // 17: loop.DecodeRequest
	(*DecodeReply)(nil),                      // 18: loop.DecodeReply
	(*BigInt)(nil),                           // 19: loop.BigInt
	(*timestamppb.Timestamp)(nil),            // 20: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                    // 21: google.protobuf.Empty
}
var file_median_proto_depIdxs = []int32{
	19, // 0: loop.ParsedAttributedObservation.value:type_name -> loop.BigInt
	19, // 1: loop.ParsedAttributedObservation.julesPerFeeCoin:type_name -> loop.BigInt
	19, // 2: loop.ParsedAttributedObservation.gasPriceSubunits:type_name -> loop.BigInt
	3,  // 3: loop.BuildReportRequest.observations:type_name -> loop.ParsedAttributedObservation
	19, // 4: loop.MedianFromReportReply.median:type_name -> loop.BigInt
	19, // 5: loop.LatestTransmissionDetailsReply.latestAnswer:type_name -> loop.BigInt
	20, // 6: loop.LatestTransmissionDetailsReply.latestTimestamp:type_name -> google.protobuf.Timestamp
	19, // 7: loop.OnchainConfig.min:type_name -> loop.BigInt
	19, // 8: loop.OnchainConfig.max:type_name -> loop.BigInt
	14, // 9: loop.EncodeRequest.onchainConfig:type_name -> loop.OnchainConfig
	14, // 10: loop.DecodeReply.onchainConfig:type_name -> loop.OnchainConfig
	0,  // 11: loop.PluginMedian.NewMedianFactory:input_type -> loop.NewMedianFactoryRequest
	2,  // 12: loop.ErrorLog.SaveError:input_type -> loop.SaveErrorRequest
	4,  // 13: loop.ReportCodec.BuildReport:input_type -> loop.BuildReportRequest
	6,  // 14: loop.ReportCodec.MedianFromReport:input_type -> loop.MedianFromReportRequest
	8,  // 15: loop.ReportCodec.MaxReportLength:input_type -> loop.MaxReportLengthRequest
	10, // 16: loop.MedianContract.LatestTransmissionDetails:input_type -> loop.LatestTransmissionDetailsRequest
	12, // 17: loop.MedianContract.LatestRoundRequested:input_type -> loop.LatestRoundRequestedRequest
	15, // 18: loop.OnchainConfigCodec.Encode:input_type -> loop.EncodeRequest
	17, // 19: loop.OnchainConfigCodec.Decode:input_type -> loop.DecodeRequest
	1,  // 20: loop.PluginMedian.NewMedianFactory:output_type -> loop.NewMedianFactoryReply
	21, // 21: loop.ErrorLog.SaveError:output_type -> google.protobuf.Empty
	5,  // 22: loop.ReportCodec.BuildReport:output_type -> loop.BuildReportReply
	7,  // 23: loop.ReportCodec.MedianFromReport:output_type -> loop.MedianFromReportReply
	9,  // 24: loop.ReportCodec.MaxReportLength:output_type -> loop.MaxReportLengthReply
	11, // 25: loop.MedianContract.LatestTransmissionDetails:output_type -> loop.LatestTransmissionDetailsReply
	13, // 26: loop.MedianContract.LatestRoundRequested:output_type -> loop.LatestRoundRequestedReply
	16, // 27: loop.OnchainConfigCodec.Encode:output_type -> loop.EncodeReply
	18, // 28: loop.OnchainConfigCodec.Decode:output_type -> loop.DecodeReply
	20, // [20:29] is the sub-list for method output_type
	11, // [11:20] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_median_proto_init() }
func file_median_proto_init() {
	if File_median_proto != nil {
		return
	}
	file_relayer_proto_init()
	file_median_proto_msgTypes[0].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_median_proto_rawDesc), len(file_median_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_median_proto_goTypes,
		DependencyIndexes: file_median_proto_depIdxs,
		MessageInfos:      file_median_proto_msgTypes,
	}.Build()
	File_median_proto = out.File
	file_median_proto_goTypes = nil
	file_median_proto_depIdxs = nil
}
