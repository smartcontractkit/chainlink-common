syntax = "proto3";

package pb;

import "google/protobuf/timestamp.proto";
import "capabilities/pb/capabilities.proto";

option go_package = "./pb";

// ------------------------------------------
// Shared messages
// ------------------------------------------

message EmptyRequest {}
message EmptyResponse {
  string message = 1;
}

message AccountCreditsInput {
  float credits = 1;
  string credit_type = 2; // TODO make ENUM
}

message AllocateCreditsRequest {
  string account_id = 1;
  repeated AccountCreditsInput credits = 2;
}

message AllocateCreditsResponse {
  bool Success = 1;
}

message BillAccountRequest {
  string account_id = 1;
  float amt = 2;
  string currency = 3;
  string idempotency_key = 4;
}

message BillAccountResponse {
  string bill_id = 1;
}


message GetAccountCreditsRequest {
  string account_id = 1;
}
message GetAccountCreditsResponse {
  string account_id = 1;
  repeated AccountCredits credits = 2;
}
message BatchGetCreditsForAccountsRequest {
  repeated string account_ids = 1;
}
message BatchGetCreditsForAccountsResponse {
  repeated AccountWithCredits accounts = 1;
}

message AccountCredits {
  float credits = 1;
  float credits_reserved = 2;
  string credit_type = 3; // TODO make ENUM
  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
}

message AccountWithCredits {
  string account_id = 1;
  repeated AccountCredits credits = 2;
}

// Reserve/Consume messages
message ReserveCreditsRequest {
  string account_id = 1;
  string workflow_id = 2;
  string workflow_execution_id = 3;
  repeated AccountCreditsInput credits = 4;
}
message ReserveCreditsResponse {
  bool success = 1;
}
message ReleaseReservationRequest {
  string account_id = 1;
  string workflow_id = 2;
  string workflow_execution_id = 3;
}
message ReleaseReservationResponse {
  bool success = 1;
}
message ConsumeCreditsRequest {
  string account_id = 1;
  string workflow_id = 2;
  repeated AccountCreditsInput credits = 3;
}
message ConsumeCreditsResponse {
  bool success = 1;
}
message ConsumeReservationRequest {
  string account_id = 1;
  string workflow_id = 2;
  string workflow_execution_id = 3;
}
message ConsumeReservationResponse {
  bool success = 1;
}
message SubmitWorkflowReceiptRequest {
  string account_id = 1;
  string workflow_id = 2;
  string workflow_execution_id = 3;
  capabilities.MeteringReport metering = 4;
}
message SubmitWorkflowReceiptResponse {
  bool success = 1;
}

// SubscriptionService
service SubscriptionService {
  rpc GetAccountCredits(GetAccountCreditsRequest) returns (GetAccountCreditsResponse);
  rpc AllocateCredits(AllocateCreditsRequest) returns (AllocateCreditsResponse);
  rpc BillAccount(BillAccountRequest) returns (BillAccountResponse);
}

// WorkflowService
service WorkflowService {
  rpc GetAccountCredits(GetAccountCreditsRequest) returns (GetAccountCreditsResponse);
  rpc BatchGetCreditsForAccounts(BatchGetCreditsForAccountsRequest) returns (BatchGetCreditsForAccountsResponse);
  rpc ReserveCredits(ReserveCreditsRequest) returns (ReserveCreditsResponse);
  rpc ReleaseReservation(ReleaseReservationRequest) returns (ReleaseReservationResponse);
  rpc ConsumeCredits(ConsumeCreditsRequest) returns (ConsumeCreditsResponse);
  rpc ConsumeReservation(ConsumeReservationRequest) returns (ConsumeReservationResponse);
  rpc WorkflowReceipt(SubmitWorkflowReceiptRequest) returns (SubmitWorkflowReceiptResponse);
}
