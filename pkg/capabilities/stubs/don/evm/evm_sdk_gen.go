// Code generated by github.com/smartcontractkit/chainlink-common/pkg/capabilities/v2/protoc, DO NOT EDIT.

package evm

import (
	"errors"

	"google.golang.org/protobuf/types/known/anypb"

	"google.golang.org/protobuf/types/known/emptypb"

	"github.com/smartcontractkit/chainlink-common/pkg/capabilities/stubs/don/crosschain"
	"github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk/v2"
	"github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk/v2/pb"
)

type Client struct {
	// TODO: https://smartcontract-it.atlassian.net/browse/CAPPL-799 allow defaults for capabilities
	// TODO: https://smartcontract-it.atlassian.net/browse/CAPPL-797 ID should be allowed to require a parameter.
}

func (c *Client) GetTxResult(runtime sdk.DonRuntime, input *TxID) sdk.Promise[*crosschain.TxResult] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*crosschain.TxResult](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&pb.CapabilityRequest{
		Id:      "evm@1.0.0",
		Payload: wrapped,
		Method:  "GetTxResult",
	}), func(i *pb.CapabilityResponse) (*crosschain.TxResult, error) {
		switch payload := i.Response.(type) {
		case *pb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *pb.CapabilityResponse_Payload:
			output := &crosschain.TxResult{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *Client) ReadMethod(runtime sdk.DonRuntime, input *ReadMethodRequest) sdk.Promise[*crosschain.ByteArray] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*crosschain.ByteArray](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&pb.CapabilityRequest{
		Id:      "evm@1.0.0",
		Payload: wrapped,
		Method:  "ReadMethod",
	}), func(i *pb.CapabilityResponse) (*crosschain.ByteArray, error) {
		switch payload := i.Response.(type) {
		case *pb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *pb.CapabilityResponse_Payload:
			output := &crosschain.ByteArray{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *Client) QueryLogs(runtime sdk.DonRuntime, input *QueryLogsRequest) sdk.Promise[*LogList] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*LogList](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&pb.CapabilityRequest{
		Id:      "evm@1.0.0",
		Payload: wrapped,
		Method:  "QueryLogs",
	}), func(i *pb.CapabilityResponse) (*LogList, error) {
		switch payload := i.Response.(type) {
		case *pb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *pb.CapabilityResponse_Payload:
			output := &LogList{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c *Client) SubmitTransaction(runtime sdk.DonRuntime, input *SubmitTransactionRequest) sdk.Promise[*TxID] {
	wrapped, err := anypb.New(input)
	if err != nil {
		return sdk.PromiseFromResult[*TxID](nil, err)
	}
	return sdk.Then(runtime.CallCapability(&pb.CapabilityRequest{
		Id:      "evm@1.0.0",
		Payload: wrapped,
		Method:  "SubmitTransaction",
	}), func(i *pb.CapabilityResponse) (*TxID, error) {
		switch payload := i.Response.(type) {
		case *pb.CapabilityResponse_Error:
			return nil, errors.New(payload.Error)
		case *pb.CapabilityResponse_Payload:
			output := &TxID{}
			err = payload.Payload.UnmarshalTo(output)
			return output, err
		default:
			return nil, errors.New("unexpected response type")
		}
	})
}

func (c Client) OnFinalityViolation(config *emptypb.Empty) sdk.DonTrigger[*crosschain.BlockRange] {
	configAny, _ := anypb.New(config)
	return &clientOnFinalityViolation{
		config: configAny,
	}
}

type clientOnFinalityViolation struct {
	config *anypb.Any
}

func (*clientOnFinalityViolation) IsDonTrigger() {}

func (*clientOnFinalityViolation) NewT() *crosschain.BlockRange {
	return &crosschain.BlockRange{}
}

func (*clientOnFinalityViolation) Id() string {
	return "evm@1.0.0"
}

func (*clientOnFinalityViolation) Method() string {
	return "OnFinalityViolation"
}

func (t *clientOnFinalityViolation) ConfigAsAny() *anypb.Any {
	return t.config
}
