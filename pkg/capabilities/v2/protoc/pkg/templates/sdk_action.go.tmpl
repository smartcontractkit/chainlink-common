{{define "action_method"}}
func (c *{{.Service.GoName}}) {{.Method.GoName}}(runtime sdk.{{.Mode}}Runtime, input *{{name .InputType .GoPackageName}}) sdk.Promise[*{{name .OutputType .GoPackageName}}] {
    wrapped, err := anypb.New(input)
    if err != nil {
        return sdk.PromiseFromResult[*{{name .OutputType .GoPackageName}}](nil, err)
    }
    return sdk.Then(runtime.CallCapability(&sdkpb.CapabilityRequest{
        Id:      "{{.CapabilityId}}",
        Payload: wrapped,
        Method:  "{{.Method.GoName}}",
    }), func(i *sdkpb.CapabilityResponse) (*{{name .OutputType .GoPackageName}}, error) {
        switch payload := i.Response.(type) {
        case *sdkpb.CapabilityResponse_Error:
            return nil, errors.New(payload.Error)
        case *sdkpb.CapabilityResponse_Payload:
            output := &{{name .OutputType .GoPackageName}}{}
            err = payload.Payload.UnmarshalTo(output)
            return output, err
        default:
            return nil, errors.New("unexpected response type")
        }
    })
}
{{end}}
