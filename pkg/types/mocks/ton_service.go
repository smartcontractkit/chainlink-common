// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	ton "github.com/smartcontractkit/chainlink-common/pkg/types/chains/ton"
	mock "github.com/stretchr/testify/mock"

	types "github.com/smartcontractkit/chainlink-common/pkg/types"
)

// TONService is an autogenerated mock type for the TONService type
type TONService struct {
	mock.Mock
}

type TONService_Expecter struct {
	mock *mock.Mock
}

func (_m *TONService) EXPECT() *TONService_Expecter {
	return &TONService_Expecter{mock: &_m.Mock}
}

// GetAccountBalance provides a mock function with given fields: ctx, address, block
func (_m *TONService) GetAccountBalance(ctx context.Context, address string, block *ton.BlockIDExt) (*ton.Balance, error) {
	ret := _m.Called(ctx, address, block)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountBalance")
	}

	var r0 *ton.Balance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *ton.BlockIDExt) (*ton.Balance, error)); ok {
		return rf(ctx, address, block)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *ton.BlockIDExt) *ton.Balance); ok {
		r0 = rf(ctx, address, block)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ton.Balance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *ton.BlockIDExt) error); ok {
		r1 = rf(ctx, address, block)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TONService_GetAccountBalance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccountBalance'
type TONService_GetAccountBalance_Call struct {
	*mock.Call
}

// GetAccountBalance is a helper method to define mock.On call
//   - ctx context.Context
//   - address string
//   - block *ton.BlockIDExt
func (_e *TONService_Expecter) GetAccountBalance(ctx interface{}, address interface{}, block interface{}) *TONService_GetAccountBalance_Call {
	return &TONService_GetAccountBalance_Call{Call: _e.mock.On("GetAccountBalance", ctx, address, block)}
}

func (_c *TONService_GetAccountBalance_Call) Run(run func(ctx context.Context, address string, block *ton.BlockIDExt)) *TONService_GetAccountBalance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(*ton.BlockIDExt))
	})
	return _c
}

func (_c *TONService_GetAccountBalance_Call) Return(_a0 *ton.Balance, _a1 error) *TONService_GetAccountBalance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TONService_GetAccountBalance_Call) RunAndReturn(run func(context.Context, string, *ton.BlockIDExt) (*ton.Balance, error)) *TONService_GetAccountBalance_Call {
	_c.Call.Return(run)
	return _c
}

// GetBlockData provides a mock function with given fields: ctx, block
func (_m *TONService) GetBlockData(ctx context.Context, block *ton.BlockIDExt) (*ton.Block, error) {
	ret := _m.Called(ctx, block)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockData")
	}

	var r0 *ton.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ton.BlockIDExt) (*ton.Block, error)); ok {
		return rf(ctx, block)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ton.BlockIDExt) *ton.Block); ok {
		r0 = rf(ctx, block)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ton.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ton.BlockIDExt) error); ok {
		r1 = rf(ctx, block)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TONService_GetBlockData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBlockData'
type TONService_GetBlockData_Call struct {
	*mock.Call
}

// GetBlockData is a helper method to define mock.On call
//   - ctx context.Context
//   - block *ton.BlockIDExt
func (_e *TONService_Expecter) GetBlockData(ctx interface{}, block interface{}) *TONService_GetBlockData_Call {
	return &TONService_GetBlockData_Call{Call: _e.mock.On("GetBlockData", ctx, block)}
}

func (_c *TONService_GetBlockData_Call) Run(run func(ctx context.Context, block *ton.BlockIDExt)) *TONService_GetBlockData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*ton.BlockIDExt))
	})
	return _c
}

func (_c *TONService_GetBlockData_Call) Return(_a0 *ton.Block, _a1 error) *TONService_GetBlockData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TONService_GetBlockData_Call) RunAndReturn(run func(context.Context, *ton.BlockIDExt) (*ton.Block, error)) *TONService_GetBlockData_Call {
	_c.Call.Return(run)
	return _c
}

// GetMasterchainInfo provides a mock function with given fields: ctx
func (_m *TONService) GetMasterchainInfo(ctx context.Context) (*ton.BlockIDExt, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetMasterchainInfo")
	}

	var r0 *ton.BlockIDExt
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*ton.BlockIDExt, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *ton.BlockIDExt); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ton.BlockIDExt)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TONService_GetMasterchainInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMasterchainInfo'
type TONService_GetMasterchainInfo_Call struct {
	*mock.Call
}

// GetMasterchainInfo is a helper method to define mock.On call
//   - ctx context.Context
func (_e *TONService_Expecter) GetMasterchainInfo(ctx interface{}) *TONService_GetMasterchainInfo_Call {
	return &TONService_GetMasterchainInfo_Call{Call: _e.mock.On("GetMasterchainInfo", ctx)}
}

func (_c *TONService_GetMasterchainInfo_Call) Run(run func(ctx context.Context)) *TONService_GetMasterchainInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *TONService_GetMasterchainInfo_Call) Return(_a0 *ton.BlockIDExt, _a1 error) *TONService_GetMasterchainInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TONService_GetMasterchainInfo_Call) RunAndReturn(run func(context.Context) (*ton.BlockIDExt, error)) *TONService_GetMasterchainInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetTxExecutionFees provides a mock function with given fields: ctx, lt
func (_m *TONService) GetTxExecutionFees(ctx context.Context, lt uint64) (*ton.TransactionFee, error) {
	ret := _m.Called(ctx, lt)

	if len(ret) == 0 {
		panic("no return value specified for GetTxExecutionFees")
	}

	var r0 *ton.TransactionFee
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*ton.TransactionFee, error)); ok {
		return rf(ctx, lt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *ton.TransactionFee); ok {
		r0 = rf(ctx, lt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ton.TransactionFee)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, lt)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TONService_GetTxExecutionFees_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTxExecutionFees'
type TONService_GetTxExecutionFees_Call struct {
	*mock.Call
}

// GetTxExecutionFees is a helper method to define mock.On call
//   - ctx context.Context
//   - lt uint64
func (_e *TONService_Expecter) GetTxExecutionFees(ctx interface{}, lt interface{}) *TONService_GetTxExecutionFees_Call {
	return &TONService_GetTxExecutionFees_Call{Call: _e.mock.On("GetTxExecutionFees", ctx, lt)}
}

func (_c *TONService_GetTxExecutionFees_Call) Run(run func(ctx context.Context, lt uint64)) *TONService_GetTxExecutionFees_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *TONService_GetTxExecutionFees_Call) Return(_a0 *ton.TransactionFee, _a1 error) *TONService_GetTxExecutionFees_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TONService_GetTxExecutionFees_Call) RunAndReturn(run func(context.Context, uint64) (*ton.TransactionFee, error)) *TONService_GetTxExecutionFees_Call {
	_c.Call.Return(run)
	return _c
}

// GetTxStatus provides a mock function with given fields: ctx, lt
func (_m *TONService) GetTxStatus(ctx context.Context, lt uint64) (types.TransactionStatus, int32, error) {
	ret := _m.Called(ctx, lt)

	if len(ret) == 0 {
		panic("no return value specified for GetTxStatus")
	}

	var r0 types.TransactionStatus
	var r1 int32
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (types.TransactionStatus, int32, error)); ok {
		return rf(ctx, lt)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) types.TransactionStatus); ok {
		r0 = rf(ctx, lt)
	} else {
		r0 = ret.Get(0).(types.TransactionStatus)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) int32); ok {
		r1 = rf(ctx, lt)
	} else {
		r1 = ret.Get(1).(int32)
	}

	if rf, ok := ret.Get(2).(func(context.Context, uint64) error); ok {
		r2 = rf(ctx, lt)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TONService_GetTxStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTxStatus'
type TONService_GetTxStatus_Call struct {
	*mock.Call
}

// GetTxStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - lt uint64
func (_e *TONService_Expecter) GetTxStatus(ctx interface{}, lt interface{}) *TONService_GetTxStatus_Call {
	return &TONService_GetTxStatus_Call{Call: _e.mock.On("GetTxStatus", ctx, lt)}
}

func (_c *TONService_GetTxStatus_Call) Run(run func(ctx context.Context, lt uint64)) *TONService_GetTxStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64))
	})
	return _c
}

func (_c *TONService_GetTxStatus_Call) Return(_a0 types.TransactionStatus, _a1 int32, _a2 error) *TONService_GetTxStatus_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *TONService_GetTxStatus_Call) RunAndReturn(run func(context.Context, uint64) (types.TransactionStatus, int32, error)) *TONService_GetTxStatus_Call {
	_c.Call.Return(run)
	return _c
}

// HasFilter provides a mock function with given fields: ctx, name
func (_m *TONService) HasFilter(ctx context.Context, name string) bool {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for HasFilter")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// TONService_HasFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasFilter'
type TONService_HasFilter_Call struct {
	*mock.Call
}

// HasFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *TONService_Expecter) HasFilter(ctx interface{}, name interface{}) *TONService_HasFilter_Call {
	return &TONService_HasFilter_Call{Call: _e.mock.On("HasFilter", ctx, name)}
}

func (_c *TONService_HasFilter_Call) Run(run func(ctx context.Context, name string)) *TONService_HasFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TONService_HasFilter_Call) Return(_a0 bool) *TONService_HasFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TONService_HasFilter_Call) RunAndReturn(run func(context.Context, string) bool) *TONService_HasFilter_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterFilter provides a mock function with given fields: ctx, filter
func (_m *TONService) RegisterFilter(ctx context.Context, filter ton.LPFilterQuery) error {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for RegisterFilter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ton.LPFilterQuery) error); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TONService_RegisterFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterFilter'
type TONService_RegisterFilter_Call struct {
	*mock.Call
}

// RegisterFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - filter ton.LPFilterQuery
func (_e *TONService_Expecter) RegisterFilter(ctx interface{}, filter interface{}) *TONService_RegisterFilter_Call {
	return &TONService_RegisterFilter_Call{Call: _e.mock.On("RegisterFilter", ctx, filter)}
}

func (_c *TONService_RegisterFilter_Call) Run(run func(ctx context.Context, filter ton.LPFilterQuery)) *TONService_RegisterFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ton.LPFilterQuery))
	})
	return _c
}

func (_c *TONService_RegisterFilter_Call) Return(_a0 error) *TONService_RegisterFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TONService_RegisterFilter_Call) RunAndReturn(run func(context.Context, ton.LPFilterQuery) error) *TONService_RegisterFilter_Call {
	_c.Call.Return(run)
	return _c
}

// SendTx provides a mock function with given fields: ctx, msg
func (_m *TONService) SendTx(ctx context.Context, msg ton.Message) error {
	ret := _m.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for SendTx")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ton.Message) error); ok {
		r0 = rf(ctx, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TONService_SendTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendTx'
type TONService_SendTx_Call struct {
	*mock.Call
}

// SendTx is a helper method to define mock.On call
//   - ctx context.Context
//   - msg ton.Message
func (_e *TONService_Expecter) SendTx(ctx interface{}, msg interface{}) *TONService_SendTx_Call {
	return &TONService_SendTx_Call{Call: _e.mock.On("SendTx", ctx, msg)}
}

func (_c *TONService_SendTx_Call) Run(run func(ctx context.Context, msg ton.Message)) *TONService_SendTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(ton.Message))
	})
	return _c
}

func (_c *TONService_SendTx_Call) Return(_a0 error) *TONService_SendTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TONService_SendTx_Call) RunAndReturn(run func(context.Context, ton.Message) error) *TONService_SendTx_Call {
	_c.Call.Return(run)
	return _c
}

// UnregisterFilter provides a mock function with given fields: ctx, name
func (_m *TONService) UnregisterFilter(ctx context.Context, name string) error {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for UnregisterFilter")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TONService_UnregisterFilter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterFilter'
type TONService_UnregisterFilter_Call struct {
	*mock.Call
}

// UnregisterFilter is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *TONService_Expecter) UnregisterFilter(ctx interface{}, name interface{}) *TONService_UnregisterFilter_Call {
	return &TONService_UnregisterFilter_Call{Call: _e.mock.On("UnregisterFilter", ctx, name)}
}

func (_c *TONService_UnregisterFilter_Call) Run(run func(ctx context.Context, name string)) *TONService_UnregisterFilter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *TONService_UnregisterFilter_Call) Return(_a0 error) *TONService_UnregisterFilter_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TONService_UnregisterFilter_Call) RunAndReturn(run func(context.Context, string) error) *TONService_UnregisterFilter_Call {
	_c.Call.Return(run)
	return _c
}

// NewTONService creates a new instance of TONService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTONService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TONService {
	mock := &TONService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
