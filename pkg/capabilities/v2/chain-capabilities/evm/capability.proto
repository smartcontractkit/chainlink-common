syntax = "proto3";

option go_package = "github.com/smartcontractkit/chainlink-common/pkg/capabilities/v2/chain-capabilities/evm;evm";

package cre.sdk.v2.evm;

import "google/protobuf/empty.proto";
import "values/v1/values.proto";
import "tools/generator/v1alpha/cre_metadata.proto";


enum ConfidenceLevel {
  SAFE = 0;
  LATEST = 1;
  FINALIZED = 2;
}

message TopicValues {
  repeated bytes values = 1; // list of possible values for any topic, in [32]byte fix-sized array format
}

message FilterLogTriggerRequest {
  repeated bytes addresses = 1; // list of addresses to include in evm address [20]byte fix-sized array format, at least one address is required
  /*
    TopicValues is a fixed 4 length array of possible values for any topic where:
      a) the first element is an array of the event signatures (keccak256 of the event name and indexed args types), it has to have at least one value
      b) the second element is an array of possible values for the first indexed argument, can be empty
      c) the third element is an array of possible values for the second indexed argument, can be empty
      d) the fourth element is an array of possible values for the third indexed argument, can be empty
   */
  repeated TopicValues topics = 2;
  ConfidenceLevel Confidence = 3; // optional, defaults to "SAFE"
}

// CallContractRequest has arguments for reading a contract as specified in the call message at a block height defined by blockNumber where:
// blockNumber :
//	nil (default) or (-2) → use the latest mined block (“latest”)
//	FinalizedBlockNumber(-3) → last finalized block (“finalized”)
//
// Any positive value is treated as an explicit block height.
message CallContractRequest {
  CallMsg call = 1;
  values.v1.BigInt block_number = 2;
}

message CallContractReply {
  bytes data = 1; // solidity-spec abi encoded bytes
}

message FilterLogsRequest {
  FilterQuery filter_query = 1;
}

message FilterLogsReply {
  repeated Log logs = 1;
}

// represents evm-style log
message Log {
  bytes address = 1; // address of the contract emitted the log in evm address [20]byte fix-sized array format
  repeated bytes topics = 2; // indexed log fields, in [32]byte fix-sized array format
  bytes tx_hash = 3; // hash of the transaction containing the log, in [32]byte fix-sized array format
  bytes block_hash = 4; // hash of the block containing the log, in [32]byte fix-sized array format
  bytes data = 5; // solidity-spec abi encoded log Data
  bytes eventSig = 6; // keccak256 of event signature, in [32]byte fix-sized array format
  values.v1.BigInt block_number = 7;  // block number containing the log
  uint32 tx_index = 8;  // index of transaction emmited the log
  uint32 index = 9;  // index of the Log within the intire block
  bool removed = 10;  // flag if the log was removed during reorg
}

// represents simplified evm-style CallMsg
message CallMsg {
  bytes from = 1; // sender address in evm address [20]byte fix-sized array format
  bytes to = 2; // contract address in evm address [20]byte fix-sized array format
  bytes data = 3; // solidity-spec abi encoded bytes
}

// represents evm-style filter query
message FilterQuery {
  bytes block_hash = 1; // exact block (cant use from/to), in [32]byte fix-sized array format
  values.v1.BigInt fromBlock = 2; // start block range
  values.v1.BigInt toBlock = 3; // end block range
  repeated bytes addresses = 4; // contract(s) to filter logs from in evm address [20]byte fix-sized array format
  repeated Topics topics = 5;  // filter log by event signature and indexed args
}

message Topics {
  repeated bytes topic = 1; // in [32]byte fix-sized array format
}

message BalanceAtRequest {
  bytes account = 1; // in evm address [20]byte fix-sized array format
  values.v1.BigInt block_number = 2;
}

message BalanceAtReply {
  values.v1.BigInt balance = 1; // Balance of the account in wei (10^-18 eth)
}

message EstimateGasRequest {
  CallMsg msg = 1; // simulates tx execution returns approximate amount of gas units needed
}

message EstimateGasReply {
  uint64 gas = 1; // estimated amount of gas in gas units, needed for tx execution
}


message GetTransactionByHashRequest {
  bytes hash = 1; // in [32]byte fix-sized array format
}

message GetTransactionByHashReply {
  Transaction transaction = 1;
}

// represents evm-style transaction
message Transaction {
  uint64 nonce = 1; // number of txs sent from sender
  uint64 gas = 2; // max gas allowed per execution (in gas units)
  bytes to = 3; // recipient address in evm address [20]byte fix-sized array format
  bytes data = 4; // solidity-spec abi encoded input data for function call payload
  bytes hash = 5; // transaction hash, in [32]byte fix-sized array format
  values.v1.BigInt value = 6; // amount of eth sent in wei
  values.v1.BigInt gas_price = 7; // price for a single gas unit in wei
}

message GetTransactionReceiptRequest {
  bytes hash = 1; // in [32]byte fix-sized array format
}

message GetTransactionReceiptReply {
  Receipt receipt = 1;
}

// represents evm-style receipt
message Receipt {
  uint64 status = 1; // 1 for success 0 for failure
  uint64 gas_used = 2; // gas used by this transaction (in gas units)
  uint64 tx_index = 3; // index of the transaction inside of the block
  bytes block_hash = 4; // block hash containing the transaction
  repeated Log logs = 6; // logs emitted by this transaction
  bytes tx_hash = 7; // hash of the transaction this receipt is for, in [32]byte fix-sized array format
  values.v1.BigInt effective_gas_price = 8; // actual gas price paid in wei (include after EIP-1559)
  values.v1.BigInt block_number = 9; // block number containing the transaction
  bytes contract_address = 10; // address of the contract if this transaction created one in evm address [20]byte fix-sized array format
}

// ----- Request/Reply Wrappers -----
message LatestAndFinalizedHeadReply {
  Head latest = 1;
  Head finalized = 2;
}

message Head {
  uint64 timestamp = 1; // unix timestamp
  values.v1.BigInt block_number = 2;
  bytes hash = 3; // in [32]byte fix-sized array format
  bytes parent_hash = 4; // in [32]byte fix-sized array format
}

message RegisterLogTrackingRequest {
  LPFilter filter = 1;
}

message LPFilter {
  uint64 max_logs_kept = 1; // maximum number of logs to retain ( 0 = unlimited )
  int64 retention_time = 2; // maximum amount of time to retain logs in seconds
  uint64 logs_per_block = 3; // rate limit ( maximum # of logs per block, 0 = unlimited )
  string name = 4; // filter name, has to persist for removing filter
  repeated bytes addresses = 5; // list of addresses to include in evm address [20]byte fix-sized array format
  repeated bytes event_sigs = 6; // list of possible signatures (aka topic1), in [32]byte fix-sized array format
  repeated bytes topic2 = 7; // list of possible values for topic2, in [32]byte fix-sized array format
  repeated bytes topic3 = 8; // list of possible values for topic3, in [32]byte fix-sized array format
  repeated bytes topic4 = 9; // list of possible values for topic4, in [32]byte fix-sized array format
}

message UnregisterLogTrackingRequest {
  string filter_name = 1;
}

service Client {
  option (tools.generator.v1alpha.capability) = {
    mode: MODE_DON
    capability_id: "evm@1.0.0"
  };
  rpc CallContract(CallContractRequest) returns (CallContractReply);
  rpc FilterLogs(FilterLogsRequest) returns (FilterLogsReply);
  rpc BalanceAt(BalanceAtRequest) returns (BalanceAtReply);
  rpc EstimateGas(EstimateGasRequest) returns (EstimateGasReply);
  rpc GetTransactionByHash(GetTransactionByHashRequest) returns (GetTransactionByHashReply);
  rpc GetTransactionReceipt(GetTransactionReceiptRequest) returns (GetTransactionReceiptReply);
  rpc LatestAndFinalizedHead(google.protobuf.Empty) returns (LatestAndFinalizedHeadReply);
  rpc RegisterLogTracking(RegisterLogTrackingRequest) returns (google.protobuf.Empty);
  rpc UnregisterLogTracking(UnregisterLogTrackingRequest) returns (google.protobuf.Empty);
  rpc LogTrigger(FilterLogTriggerRequest) returns (stream Log);
  rpc WriteReport(WriteReportRequest) returns (WriteReportReply);
}

message SignedReport {
  bytes raw_report = 1;
  bytes report_context = 2;
  repeated bytes signatures = 3;
  bytes id = 4;
}

enum ReceiverContractExecutionStatus {
  SUCCESS = 0;
  REVERTED = 1;
}

message WriteReportRequest {
    bytes receiver = 1;
    SignedReport report = 2;
    optional GasConfig gas_config = 3; 
}

message GasConfig {
  uint64 gas_limit = 1;
}

enum TxStatus {
  TX_FATAL = 0;
  TX_REVERTED = 1;
  TX_SUCCESS = 2;
}

message WriteReportReply {
  TxStatus tx_status = 1;
  optional ReceiverContractExecutionStatus receiver_contract_execution_status = 2;
  optional bytes tx_hash = 3;
  optional values.v1.BigInt transaction_fee = 4;
  optional string error_message = 5;
}