// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: reportcodec.proto

package ccipocr3pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CommitPluginCodec_Encode_FullMethodName = "/loop.internal.pb.ccipocr3.CommitPluginCodec/Encode"
	CommitPluginCodec_Decode_FullMethodName = "/loop.internal.pb.ccipocr3.CommitPluginCodec/Decode"
)

// CommitPluginCodecClient is the client API for CommitPluginCodec service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// CommitPluginCodec is a service that can encode and decode reports generated by the Commit Plugin.
// Every chain family defines its own encoding schemes.
// For example an EVM implementation of CommitPluginCodec would use ABI encoding.
type CommitPluginCodecClient interface {
	Encode(ctx context.Context, in *EncodeCommitPluginReportInput, opts ...grpc.CallOption) (*EncodeCommitPluginReportOutput, error)
	Decode(ctx context.Context, in *DecodeCommitPluginReportInput, opts ...grpc.CallOption) (*EncodeCommitPluginReportOutput, error)
}

type commitPluginCodecClient struct {
	cc grpc.ClientConnInterface
}

func NewCommitPluginCodecClient(cc grpc.ClientConnInterface) CommitPluginCodecClient {
	return &commitPluginCodecClient{cc}
}

func (c *commitPluginCodecClient) Encode(ctx context.Context, in *EncodeCommitPluginReportInput, opts ...grpc.CallOption) (*EncodeCommitPluginReportOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EncodeCommitPluginReportOutput)
	err := c.cc.Invoke(ctx, CommitPluginCodec_Encode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commitPluginCodecClient) Decode(ctx context.Context, in *DecodeCommitPluginReportInput, opts ...grpc.CallOption) (*EncodeCommitPluginReportOutput, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EncodeCommitPluginReportOutput)
	err := c.cc.Invoke(ctx, CommitPluginCodec_Decode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommitPluginCodecServer is the server API for CommitPluginCodec service.
// All implementations must embed UnimplementedCommitPluginCodecServer
// for forward compatibility.
//
// CommitPluginCodec is a service that can encode and decode reports generated by the Commit Plugin.
// Every chain family defines its own encoding schemes.
// For example an EVM implementation of CommitPluginCodec would use ABI encoding.
type CommitPluginCodecServer interface {
	Encode(context.Context, *EncodeCommitPluginReportInput) (*EncodeCommitPluginReportOutput, error)
	Decode(context.Context, *DecodeCommitPluginReportInput) (*EncodeCommitPluginReportOutput, error)
	mustEmbedUnimplementedCommitPluginCodecServer()
}

// UnimplementedCommitPluginCodecServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommitPluginCodecServer struct{}

func (UnimplementedCommitPluginCodecServer) Encode(context.Context, *EncodeCommitPluginReportInput) (*EncodeCommitPluginReportOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Encode not implemented")
}
func (UnimplementedCommitPluginCodecServer) Decode(context.Context, *DecodeCommitPluginReportInput) (*EncodeCommitPluginReportOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decode not implemented")
}
func (UnimplementedCommitPluginCodecServer) mustEmbedUnimplementedCommitPluginCodecServer() {}
func (UnimplementedCommitPluginCodecServer) testEmbeddedByValue()                           {}

// UnsafeCommitPluginCodecServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommitPluginCodecServer will
// result in compilation errors.
type UnsafeCommitPluginCodecServer interface {
	mustEmbedUnimplementedCommitPluginCodecServer()
}

func RegisterCommitPluginCodecServer(s grpc.ServiceRegistrar, srv CommitPluginCodecServer) {
	// If the following call pancis, it indicates UnimplementedCommitPluginCodecServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CommitPluginCodec_ServiceDesc, srv)
}

func _CommitPluginCodec_Encode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncodeCommitPluginReportInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitPluginCodecServer).Encode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommitPluginCodec_Encode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitPluginCodecServer).Encode(ctx, req.(*EncodeCommitPluginReportInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommitPluginCodec_Decode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecodeCommitPluginReportInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommitPluginCodecServer).Decode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommitPluginCodec_Decode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommitPluginCodecServer).Decode(ctx, req.(*DecodeCommitPluginReportInput))
	}
	return interceptor(ctx, in, info, handler)
}

// CommitPluginCodec_ServiceDesc is the grpc.ServiceDesc for CommitPluginCodec service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommitPluginCodec_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.internal.pb.ccipocr3.CommitPluginCodec",
	HandlerType: (*CommitPluginCodecServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Encode",
			Handler:    _CommitPluginCodec_Encode_Handler,
		},
		{
			MethodName: "Decode",
			Handler:    _CommitPluginCodec_Decode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reportcodec.proto",
}
