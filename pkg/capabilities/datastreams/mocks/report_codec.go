// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	datastreams "github.com/smartcontractkit/chainlink-common/pkg/capabilities/datastreams"
	mock "github.com/stretchr/testify/mock"

	values "github.com/smartcontractkit/chainlink-common/pkg/values"
)

// ReportCodec is an autogenerated mock type for the ReportCodec type
type ReportCodec struct {
	mock.Mock
}

type ReportCodec_Expecter struct {
	mock *mock.Mock
}

func (_m *ReportCodec) EXPECT() *ReportCodec_Expecter {
	return &ReportCodec_Expecter{mock: &_m.Mock}
}

// Unwrap provides a mock function with given fields: wrapped
func (_m *ReportCodec) Unwrap(wrapped values.Value) ([]datastreams.FeedReport, error) {
	ret := _m.Called(wrapped)

	if len(ret) == 0 {
		panic("no return value specified for Unwrap")
	}

	var r0 []datastreams.FeedReport
	var r1 error
	if rf, ok := ret.Get(0).(func(values.Value) ([]datastreams.FeedReport, error)); ok {
		return rf(wrapped)
	}
	if rf, ok := ret.Get(0).(func(values.Value) []datastreams.FeedReport); ok {
		r0 = rf(wrapped)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]datastreams.FeedReport)
		}
	}

	if rf, ok := ret.Get(1).(func(values.Value) error); ok {
		r1 = rf(wrapped)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReportCodec_Unwrap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unwrap'
type ReportCodec_Unwrap_Call struct {
	*mock.Call
}

// Unwrap is a helper method to define mock.On call
//   - wrapped values.Value
func (_e *ReportCodec_Expecter) Unwrap(wrapped interface{}) *ReportCodec_Unwrap_Call {
	return &ReportCodec_Unwrap_Call{Call: _e.mock.On("Unwrap", wrapped)}
}

func (_c *ReportCodec_Unwrap_Call) Run(run func(wrapped values.Value)) *ReportCodec_Unwrap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(values.Value))
	})
	return _c
}

func (_c *ReportCodec_Unwrap_Call) Return(_a0 []datastreams.FeedReport, _a1 error) *ReportCodec_Unwrap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReportCodec_Unwrap_Call) RunAndReturn(run func(values.Value) ([]datastreams.FeedReport, error)) *ReportCodec_Unwrap_Call {
	_c.Call.Return(run)
	return _c
}

// Validate provides a mock function with given fields: feedReport, allowedSigners, minRequiredSignatures
func (_m *ReportCodec) Validate(feedReport datastreams.FeedReport, allowedSigners [][]byte, minRequiredSignatures int) error {
	ret := _m.Called(feedReport, allowedSigners, minRequiredSignatures)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(datastreams.FeedReport, [][]byte, int) error); ok {
		r0 = rf(feedReport, allowedSigners, minRequiredSignatures)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReportCodec_Validate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Validate'
type ReportCodec_Validate_Call struct {
	*mock.Call
}

// Validate is a helper method to define mock.On call
//   - feedReport datastreams.FeedReport
//   - allowedSigners [][]byte
//   - minRequiredSignatures int
func (_e *ReportCodec_Expecter) Validate(feedReport interface{}, allowedSigners interface{}, minRequiredSignatures interface{}) *ReportCodec_Validate_Call {
	return &ReportCodec_Validate_Call{Call: _e.mock.On("Validate", feedReport, allowedSigners, minRequiredSignatures)}
}

func (_c *ReportCodec_Validate_Call) Run(run func(feedReport datastreams.FeedReport, allowedSigners [][]byte, minRequiredSignatures int)) *ReportCodec_Validate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(datastreams.FeedReport), args[1].([][]byte), args[2].(int))
	})
	return _c
}

func (_c *ReportCodec_Validate_Call) Return(_a0 error) *ReportCodec_Validate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ReportCodec_Validate_Call) RunAndReturn(run func(datastreams.FeedReport, [][]byte, int) error) *ReportCodec_Validate_Call {
	_c.Call.Return(run)
	return _c
}

// Wrap provides a mock function with given fields: reports
func (_m *ReportCodec) Wrap(reports []datastreams.FeedReport) (values.Value, error) {
	ret := _m.Called(reports)

	if len(ret) == 0 {
		panic("no return value specified for Wrap")
	}

	var r0 values.Value
	var r1 error
	if rf, ok := ret.Get(0).(func([]datastreams.FeedReport) (values.Value, error)); ok {
		return rf(reports)
	}
	if rf, ok := ret.Get(0).(func([]datastreams.FeedReport) values.Value); ok {
		r0 = rf(reports)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(values.Value)
		}
	}

	if rf, ok := ret.Get(1).(func([]datastreams.FeedReport) error); ok {
		r1 = rf(reports)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReportCodec_Wrap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Wrap'
type ReportCodec_Wrap_Call struct {
	*mock.Call
}

// Wrap is a helper method to define mock.On call
//   - reports []datastreams.FeedReport
func (_e *ReportCodec_Expecter) Wrap(reports interface{}) *ReportCodec_Wrap_Call {
	return &ReportCodec_Wrap_Call{Call: _e.mock.On("Wrap", reports)}
}

func (_c *ReportCodec_Wrap_Call) Run(run func(reports []datastreams.FeedReport)) *ReportCodec_Wrap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]datastreams.FeedReport))
	})
	return _c
}

func (_c *ReportCodec_Wrap_Call) Return(_a0 values.Value, _a1 error) *ReportCodec_Wrap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ReportCodec_Wrap_Call) RunAndReturn(run func([]datastreams.FeedReport) (values.Value, error)) *ReportCodec_Wrap_Call {
	_c.Call.Return(run)
	return _c
}

// NewReportCodec creates a new instance of ReportCodec. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReportCodec(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReportCodec {
	mock := &ReportCodec{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
