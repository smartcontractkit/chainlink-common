syntax = "proto3";

option go_package = "github.com/smartcontractkit/chainlink-common/pkg/loop/internal/pb";

package loop;

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "relayer.proto";
import "contract_reader.proto";
import "contract_writer.proto";

service EVM{
  rpc GetTransactionFee(GetTransactionFeeRequest) returns (GetTransactionFeeReply) {}
  rpc CallContract(CallContractRequest) returns (CallContractReply);
  rpc GetLogs(GetLogsRequest) returns (GetLogsReply);
  rpc BalanceAt(BalanceAtRequest) returns (BalanceAtReply);
  rpc EstimateGas(EstimateGasRequest) returns (EstimateGasReply);
  rpc GetTransactionByHash(GetTransactionByHashRequest) returns (GetTransactionByHashReply);
  rpc GetTransactionReceipt(GetReceiptRequest) returns (GetReceiptReply);
  rpc LatestAndFinalizedHead(google.protobuf.Empty) returns (LatestAndFinalizedHeadReply);
  rpc QueryLogsFromCache(QueryLogsFromCacheRequest) returns (QueryLogsFromCacheReply);
  rpc RegisterLogTracking(RegisterLogTrackingRequest) returns (google.protobuf.Empty);
  rpc UnregisterLogTracking(UnregisterLogTrackingRequest) returns (google.protobuf.Empty);
  rpc GetTransactionStatus(GetTransactionStatusRequest) returns (GetTransactionStatusReply);
}

// ----- Message Types -----
// represents simplified evm-style CallMsg
message CallMsg {
  string from = 1;
  string to = 2;
  bytes data = 3;
}

// represents evm-style log
message Log {
  string address = 1; // common.Address represented as bytes
  repeated string topics = 2; // []common.Hash represented as repeated string
  string tx_hash = 3; // common.Address represented as string
  string block_hash = 4; // common.Hash represented as string
  bytes data = 5; //
  bytes eventSig = 6;
  BigInt block_number = 7; 
  uint32 tx_index = 8; 
  uint32 index = 9; 
  bool removed = 10; 
}

message EVMFilterQuery {
  string block_hash = 1;
  BigInt fromBlock = 2;
  BigInt toBlock = 3;
  repeated string addresses = 4;
  repeated string topics = 5;
}

message EVMTransaction {
  uint64 nonce = 1;
  uint64 gas = 2;
  string to = 3;
  bytes data = 4;
  string hash = 5;
  BigInt value = 6;
  BigInt gas_price = 7;
}

message EVMReceipt {
  uint64 status = 1;
  uint64 gas_used = 2;
  uint64 tx_index = 3;
  string block_hash = 4;
  bytes post_state = 5;
  repeated Log logs = 6;
  string tx_hash = 7;
  BigInt effective_gas_price = 8;
  BigInt block_number = 9;
  string contract_address = 10;
}

message LPFilter {
  uint64 max_logs_kept = 1;
  int64 retention_time = 2; // Retention time in seconds 
  uint64 logs_per_block = 3; 
  string name = 4;
  repeated string addresses = 5;
  repeated string event_sigs = 6;
  repeated string topic2 = 7;
  repeated string topic3 = 8;
  repeated string topic4 = 9;
}

// ----- Request/Reply Wrappers -----
message LatestAndFinalizedHeadReply {
  Head latest = 1;
  Head finalized = 2;
}

message CallContractRequest {
  CallMsg call = 1;
  Confidence confidenceLevel = 2; // confidenceLevel will be handled by evm loop to difine finalty
}

message CallContractReply {
  bytes data = 1;
}

// GetTransactionFeeRequest has arguments for [github.com/smartcontractkit/chainlink-common/pkg/types.EVMRElayer.GetTransactionFee].
message GetTransactionFeeRequest {
  string transaction_id = 1; // idempotency key used when transaction was submitted
}

// GetTransactionFeeReply has return arguments for [github.com/smartcontractkit/chainlink-common/pkg/types.EVMRElayer.GetTransactionFee].
message GetTransactionFeeReply {
  BigInt transation_fee = 1; // transaction fee is the cost of transaction execution in Wei
}

message GetLogsRequest {
  EVMFilterQuery filter_query = 1;
}

message GetLogsReply {
  repeated Log logs = 1;
}

message BalanceAtRequest {
  string account = 1;
  BigInt block_number = 2;
}

message BalanceAtReply {
  BigInt balance = 1;
}

message EstimateGasRequest {
  CallMsg msg = 1;
}

message EstimateGasReply {
  uint64 gas = 1;
}

message GetTransactionByHashRequest {
  string hash = 1;
}

message GetTransactionByHashReply {
  EVMTransaction transaction = 1;
}

message GetReceiptRequest {
  string hash = 1;
} 

message GetReceiptReply {
  EVMReceipt receipt = 1;
}

message RegisterLogTrackingRequest {
  LPFilter filter = 1;
}

message UnregisterLogTrackingRequest {
  string filter_name = 1;
}

message QueryLogsFromCacheRequest {
  repeated Expression expression = 1;
}

message QueryLogsFromCacheReply {
  repeated Log logs = 1;
}


