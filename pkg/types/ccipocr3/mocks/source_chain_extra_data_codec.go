// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	ccipocr3 "github.com/smartcontractkit/chainlink-common/pkg/types/ccipocr3"
	mock "github.com/stretchr/testify/mock"
)

// SourceChainExtraDataCodec is an autogenerated mock type for the SourceChainExtraDataCodec type
type SourceChainExtraDataCodec struct {
	mock.Mock
}

type SourceChainExtraDataCodec_Expecter struct {
	mock *mock.Mock
}

func (_m *SourceChainExtraDataCodec) EXPECT() *SourceChainExtraDataCodec_Expecter {
	return &SourceChainExtraDataCodec_Expecter{mock: &_m.Mock}
}

// DecodeDestExecDataToMap provides a mock function with given fields: destExecData
func (_m *SourceChainExtraDataCodec) DecodeDestExecDataToMap(destExecData ccipocr3.Bytes) (map[string]interface{}, error) {
	ret := _m.Called(destExecData)

	if len(ret) == 0 {
		panic("no return value specified for DecodeDestExecDataToMap")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(ccipocr3.Bytes) (map[string]interface{}, error)); ok {
		return rf(destExecData)
	}
	if rf, ok := ret.Get(0).(func(ccipocr3.Bytes) map[string]interface{}); ok {
		r0 = rf(destExecData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(ccipocr3.Bytes) error); ok {
		r1 = rf(destExecData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SourceChainExtraDataCodec_DecodeDestExecDataToMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecodeDestExecDataToMap'
type SourceChainExtraDataCodec_DecodeDestExecDataToMap_Call struct {
	*mock.Call
}

// DecodeDestExecDataToMap is a helper method to define mock.On call
//   - destExecData ccipocr3.Bytes
func (_e *SourceChainExtraDataCodec_Expecter) DecodeDestExecDataToMap(destExecData interface{}) *SourceChainExtraDataCodec_DecodeDestExecDataToMap_Call {
	return &SourceChainExtraDataCodec_DecodeDestExecDataToMap_Call{Call: _e.mock.On("DecodeDestExecDataToMap", destExecData)}
}

func (_c *SourceChainExtraDataCodec_DecodeDestExecDataToMap_Call) Run(run func(destExecData ccipocr3.Bytes)) *SourceChainExtraDataCodec_DecodeDestExecDataToMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ccipocr3.Bytes))
	})
	return _c
}

func (_c *SourceChainExtraDataCodec_DecodeDestExecDataToMap_Call) Return(_a0 map[string]interface{}, _a1 error) *SourceChainExtraDataCodec_DecodeDestExecDataToMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SourceChainExtraDataCodec_DecodeDestExecDataToMap_Call) RunAndReturn(run func(ccipocr3.Bytes) (map[string]interface{}, error)) *SourceChainExtraDataCodec_DecodeDestExecDataToMap_Call {
	_c.Call.Return(run)
	return _c
}

// DecodeExtraArgsToMap provides a mock function with given fields: extraArgs
func (_m *SourceChainExtraDataCodec) DecodeExtraArgsToMap(extraArgs ccipocr3.Bytes) (map[string]interface{}, error) {
	ret := _m.Called(extraArgs)

	if len(ret) == 0 {
		panic("no return value specified for DecodeExtraArgsToMap")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(ccipocr3.Bytes) (map[string]interface{}, error)); ok {
		return rf(extraArgs)
	}
	if rf, ok := ret.Get(0).(func(ccipocr3.Bytes) map[string]interface{}); ok {
		r0 = rf(extraArgs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(ccipocr3.Bytes) error); ok {
		r1 = rf(extraArgs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SourceChainExtraDataCodec_DecodeExtraArgsToMap_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DecodeExtraArgsToMap'
type SourceChainExtraDataCodec_DecodeExtraArgsToMap_Call struct {
	*mock.Call
}

// DecodeExtraArgsToMap is a helper method to define mock.On call
//   - extraArgs ccipocr3.Bytes
func (_e *SourceChainExtraDataCodec_Expecter) DecodeExtraArgsToMap(extraArgs interface{}) *SourceChainExtraDataCodec_DecodeExtraArgsToMap_Call {
	return &SourceChainExtraDataCodec_DecodeExtraArgsToMap_Call{Call: _e.mock.On("DecodeExtraArgsToMap", extraArgs)}
}

func (_c *SourceChainExtraDataCodec_DecodeExtraArgsToMap_Call) Run(run func(extraArgs ccipocr3.Bytes)) *SourceChainExtraDataCodec_DecodeExtraArgsToMap_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(ccipocr3.Bytes))
	})
	return _c
}

func (_c *SourceChainExtraDataCodec_DecodeExtraArgsToMap_Call) Return(_a0 map[string]interface{}, _a1 error) *SourceChainExtraDataCodec_DecodeExtraArgsToMap_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SourceChainExtraDataCodec_DecodeExtraArgsToMap_Call) RunAndReturn(run func(ccipocr3.Bytes) (map[string]interface{}, error)) *SourceChainExtraDataCodec_DecodeExtraArgsToMap_Call {
	_c.Call.Return(run)
	return _c
}

// NewSourceChainExtraDataCodec creates a new instance of SourceChainExtraDataCodec. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSourceChainExtraDataCodec(t interface {
	mock.TestingT
	Cleanup(func())
}) *SourceChainExtraDataCodec {
	mock := &SourceChainExtraDataCodec{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
