syntax = "proto3";

option go_package = "github.com/smartcontractkit/chainlink-common/pkg/capabilities/pb";

package capabilities;

import "values/pb/values.proto";
import "capabilities/pb/triggers.proto";
import "google/protobuf/empty.proto";

service BaseCapability {
  rpc Info (google.protobuf.Empty) returns (CapabilityInfoReply) {}
}

enum CapabilityType {
  CAPABILITY_TYPE_UNKNOWN = 0;
  CAPABILITY_TYPE_TRIGGER = 1;
  CAPABILITY_TYPE_ACTION = 2;
  CAPABILITY_TYPE_CONSENSUS = 3;
  CAPABILITY_TYPE_TARGET = 4;
}

message CapabilityInfoReply {
  string id = 1; 
  CapabilityType capability_type = 2;
  string description = 3;
  string version = 4;
  bool isLocal = 5;
}

message RequestMetadata {
  reserved 5;
  string workflow_id = 1;
  string workflow_execution_id = 2;
  string workflow_owner = 3;
  string workflow_name = 4;
  uint32 workflow_don_id = 6;
  uint32 workflow_don_config_version = 7;
  string reference_id = 8;
  string decoded_workflow_name = 9;
}

message CapabilityRequest {
  RequestMetadata metadata = 1;
  values.Map config = 2;
  values.Map inputs = 3;
}

message TriggerRegistrationRequest {
  string triggerId = 1;
  RequestMetadata metadata = 2;
  values.Map config = 3;
}

message TriggerEvent {
  string triggerType = 1;
  string id = 2;
  values.Map outputs = 4;
  v1.OCRTriggerEvent ocr_event = 5;
}

message TriggerResponse {
  TriggerEvent event = 1;
  string error = 2;
}

message TriggerResponseMessage {
  oneof message {
    google.protobuf.Empty ack = 1;
    TriggerResponse response = 2;
  }
}

service TriggerExecutable {
  rpc RegisterTrigger (TriggerRegistrationRequest) returns (stream TriggerResponseMessage) {}
  rpc UnregisterTrigger (TriggerRegistrationRequest) returns (google.protobuf.Empty) {}
}

message CapabilityResponse {
  values.Map value = 1;
  string error = 2;
  ResponseMetadata metadata = 3;
}

message ResponseMetadata {
  repeated MeteringReportNodeDetail metering = 1;
}

message RegistrationMetadata {
  string workflow_id = 1;
  string reference_id = 2;
  string workflow_owner = 3;
}

message RegisterToWorkflowRequest {
  RegistrationMetadata metadata = 1;
  values.Map config = 2;
}

message UnregisterFromWorkflowRequest {
  RegistrationMetadata metadata = 1;
  values.Map config = 2;
}

service Executable {
  rpc RegisterToWorkflow (RegisterToWorkflowRequest) returns (google.protobuf.Empty) {}
  rpc UnregisterFromWorkflow (UnregisterFromWorkflowRequest) returns (google.protobuf.Empty) {}
  rpc Execute(CapabilityRequest) returns (stream CapabilityResponse) {}
}

service StandardCapabilities {
  rpc Initialise(InitialiseRequest) returns (google.protobuf.Empty) {}
  rpc Infos(google.protobuf.Empty) returns (CapabilityInfosReply) {}
}

message InitialiseRequest {
  string config = 1;
  uint32 error_log_id = 2;
  uint32 pipeline_runner_id = 3;
  uint32 telemetry_id = 4;
  uint32 capRegistry_id = 5;
  uint32 keyValueStore_id = 6;
  uint32 relayer_set_id = 7;
  uint32 oracle_factory_id = 8;
}

message CapabilityInfosReply {
  repeated CapabilityInfoReply infos = 1;
}

message MeteringReportNodeDetail {
	string peer_2_peer_id = 1;
	string spend_unit = 2;
	string spend_value = 3;
}

message MeteringReportStep {
  repeated MeteringReportNodeDetail nodes = 1;
}

message MeteringReport {
  map<string, MeteringReportStep> steps = 1;
}