// Code generated by github.com/smartcontractkit/chainlink-common/pkg/capabilities/protoc, DO NOT EDIT.

package server

import (
	"context"

	"google.golang.org/protobuf/types/known/emptypb"

	"github.com/smartcontractkit/chainlink-common/pkg/capabilities/stubs/don/crosschain"
	"github.com/smartcontractkit/chainlink-common/pkg/capabilities/stubs/don/evm"

	"github.com/smartcontractkit/chainlink-common/pkg/workflows/sdk/testutils"

	"github.com/stretchr/testify/mock"
)

type ClientCapability struct {
	m mock.Mock
}

// TODO register?
func OnClient(func(ctx context.Context, input *evm.TxID /* TODO this isn't right */, config *evm.TxID) (*crosschain.TxResult, error)) testutils.MockCapabilityCall[crosschain.TxResult] {
	return &testutils.MockCapabilityCall[crosschain.TxResult]{
		Call: c.m.On("OnGetTxResult", mock.AnythingOfType(ctx), mock.AnythingOfType(input)),
	}
}

// TODO register if needed...
func OnClient(func(ctx context.Context, input *evm.ReadMethodRequest /* TODO this isn't right */, config *evm.ReadMethodRequest) (*crosschain.ByteArray, error)) testutils.MockCapabilityCall[crosschain.ByteArray] {
	return &testutils.MockCapabilityCall[crosschain.ByteArray]{
		Call: c.m.On("OnReadMethod", mock.AnythingOfType(ctx), mock.AnythingOfType(input)),
	}
}

// TODO register if needed...
func OnClient(func(ctx context.Context, input *evm.QueryLogsRequest /* TODO this isn't right */, config *evm.QueryLogsRequest) (*evm.LogList, error)) testutils.MockCapabilityCall[evm.LogList] {
	return &testutils.MockCapabilityCall[evm.LogList]{
		Call: c.m.On("OnQueryLogs", mock.AnythingOfType(ctx), mock.AnythingOfType(input)),
	}
}

// TODO register if needed...
func OnClient(func(ctx context.Context, input *evm.SubmitTransactionRequest /* TODO this isn't right */, config *evm.SubmitTransactionRequest) (*evm.TxID, error)) testutils.MockCapabilityCall[evm.TxID] {
	return &testutils.MockCapabilityCall[evm.TxID]{
		Call: c.m.On("OnSubmitTransaction", mock.AnythingOfType(ctx), mock.AnythingOfType(input)),
	}
}

// TODO register if needed...
func (c *ClientCapability) OnOnFinalityViolation(func(ctx context.Context, input *emptypb.Empty)) *testutils.MockCapabilityCall[crosschain.BlockRange] {
	return &testutils.MockCapabilityCall[crosschain.BlockRange]{
		Call: c.m.On("OnOnFinalityViolation", mock.AnythingOfType(ctx), mock.AnythingOfType(input)),
	}
}
