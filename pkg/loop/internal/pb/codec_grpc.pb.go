// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: codec.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Codec_GetEncoding_FullMethodName = "/loop.Codec/GetEncoding"
	Codec_GetDecoding_FullMethodName = "/loop.Codec/GetDecoding"
	Codec_GetMaxSize_FullMethodName  = "/loop.Codec/GetMaxSize"
)

// CodecClient is the client API for Codec service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CodecClient interface {
	GetEncoding(ctx context.Context, in *GetEncodingRequest, opts ...grpc.CallOption) (*GetEncodingResponse, error)
	GetDecoding(ctx context.Context, in *GetDecodingRequest, opts ...grpc.CallOption) (*GetDecodingResponse, error)
	GetMaxSize(ctx context.Context, in *GetMaxSizeRequest, opts ...grpc.CallOption) (*GetMaxSizeResponse, error)
}

type codecClient struct {
	cc grpc.ClientConnInterface
}

func NewCodecClient(cc grpc.ClientConnInterface) CodecClient {
	return &codecClient{cc}
}

func (c *codecClient) GetEncoding(ctx context.Context, in *GetEncodingRequest, opts ...grpc.CallOption) (*GetEncodingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEncodingResponse)
	err := c.cc.Invoke(ctx, Codec_GetEncoding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codecClient) GetDecoding(ctx context.Context, in *GetDecodingRequest, opts ...grpc.CallOption) (*GetDecodingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDecodingResponse)
	err := c.cc.Invoke(ctx, Codec_GetDecoding_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codecClient) GetMaxSize(ctx context.Context, in *GetMaxSizeRequest, opts ...grpc.CallOption) (*GetMaxSizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMaxSizeResponse)
	err := c.cc.Invoke(ctx, Codec_GetMaxSize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CodecServer is the server API for Codec service.
// All implementations must embed UnimplementedCodecServer
// for forward compatibility.
type CodecServer interface {
	GetEncoding(context.Context, *GetEncodingRequest) (*GetEncodingResponse, error)
	GetDecoding(context.Context, *GetDecodingRequest) (*GetDecodingResponse, error)
	GetMaxSize(context.Context, *GetMaxSizeRequest) (*GetMaxSizeResponse, error)
	mustEmbedUnimplementedCodecServer()
}

// UnimplementedCodecServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCodecServer struct{}

func (UnimplementedCodecServer) GetEncoding(context.Context, *GetEncodingRequest) (*GetEncodingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEncoding not implemented")
}
func (UnimplementedCodecServer) GetDecoding(context.Context, *GetDecodingRequest) (*GetDecodingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDecoding not implemented")
}
func (UnimplementedCodecServer) GetMaxSize(context.Context, *GetMaxSizeRequest) (*GetMaxSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaxSize not implemented")
}
func (UnimplementedCodecServer) mustEmbedUnimplementedCodecServer() {}
func (UnimplementedCodecServer) testEmbeddedByValue()               {}

// UnsafeCodecServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CodecServer will
// result in compilation errors.
type UnsafeCodecServer interface {
	mustEmbedUnimplementedCodecServer()
}

func RegisterCodecServer(s grpc.ServiceRegistrar, srv CodecServer) {
	// If the following call pancis, it indicates UnimplementedCodecServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Codec_ServiceDesc, srv)
}

func _Codec_GetEncoding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEncodingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodecServer).GetEncoding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Codec_GetEncoding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodecServer).GetEncoding(ctx, req.(*GetEncodingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Codec_GetDecoding_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDecodingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodecServer).GetDecoding(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Codec_GetDecoding_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodecServer).GetDecoding(ctx, req.(*GetDecodingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Codec_GetMaxSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMaxSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodecServer).GetMaxSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Codec_GetMaxSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodecServer).GetMaxSize(ctx, req.(*GetMaxSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Codec_ServiceDesc is the grpc.ServiceDesc for Codec service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Codec_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.Codec",
	HandlerType: (*CodecServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEncoding",
			Handler:    _Codec_GetEncoding_Handler,
		},
		{
			MethodName: "GetDecoding",
			Handler:    _Codec_GetDecoding_Handler,
		},
		{
			MethodName: "GetMaxSize",
			Handler:    _Codec_GetMaxSize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "codec.proto",
}
