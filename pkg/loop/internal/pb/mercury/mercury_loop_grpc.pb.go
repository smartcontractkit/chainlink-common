// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: mercury_loop.proto

// note: the generate.go file in this dir specifies the import path of the relative proto files

package mercurypb

import (
	context "context"
	v1 "github.com/smartcontractkit/chainlink-common/pkg/loop/internal/pb/mercury/v1"
	v2 "github.com/smartcontractkit/chainlink-common/pkg/loop/internal/pb/mercury/v2"
	v3 "github.com/smartcontractkit/chainlink-common/pkg/loop/internal/pb/mercury/v3"
	v4 "github.com/smartcontractkit/chainlink-common/pkg/loop/internal/pb/mercury/v4"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MercuryAdapter_NewMercuryV1Factory_FullMethodName = "/loop.internal.pb.mercury.MercuryAdapter/NewMercuryV1Factory"
	MercuryAdapter_NewMercuryV2Factory_FullMethodName = "/loop.internal.pb.mercury.MercuryAdapter/NewMercuryV2Factory"
	MercuryAdapter_NewMercuryV3Factory_FullMethodName = "/loop.internal.pb.mercury.MercuryAdapter/NewMercuryV3Factory"
	MercuryAdapter_NewMercuryV4Factory_FullMethodName = "/loop.internal.pb.mercury.MercuryAdapter/NewMercuryV4Factory"
)

// MercuryAdapterClient is the client API for MercuryAdapter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MercuryAdapterClient interface {
	NewMercuryV1Factory(ctx context.Context, in *NewMercuryV1FactoryRequest, opts ...grpc.CallOption) (*NewMercuryV1FactoryReply, error)
	NewMercuryV2Factory(ctx context.Context, in *NewMercuryV2FactoryRequest, opts ...grpc.CallOption) (*NewMercuryV2FactoryReply, error)
	NewMercuryV3Factory(ctx context.Context, in *NewMercuryV3FactoryRequest, opts ...grpc.CallOption) (*NewMercuryV3FactoryReply, error)
	NewMercuryV4Factory(ctx context.Context, in *NewMercuryV4FactoryRequest, opts ...grpc.CallOption) (*NewMercuryV4FactoryReply, error)
}

type mercuryAdapterClient struct {
	cc grpc.ClientConnInterface
}

func NewMercuryAdapterClient(cc grpc.ClientConnInterface) MercuryAdapterClient {
	return &mercuryAdapterClient{cc}
}

func (c *mercuryAdapterClient) NewMercuryV1Factory(ctx context.Context, in *NewMercuryV1FactoryRequest, opts ...grpc.CallOption) (*NewMercuryV1FactoryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewMercuryV1FactoryReply)
	err := c.cc.Invoke(ctx, MercuryAdapter_NewMercuryV1Factory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mercuryAdapterClient) NewMercuryV2Factory(ctx context.Context, in *NewMercuryV2FactoryRequest, opts ...grpc.CallOption) (*NewMercuryV2FactoryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewMercuryV2FactoryReply)
	err := c.cc.Invoke(ctx, MercuryAdapter_NewMercuryV2Factory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mercuryAdapterClient) NewMercuryV3Factory(ctx context.Context, in *NewMercuryV3FactoryRequest, opts ...grpc.CallOption) (*NewMercuryV3FactoryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewMercuryV3FactoryReply)
	err := c.cc.Invoke(ctx, MercuryAdapter_NewMercuryV3Factory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mercuryAdapterClient) NewMercuryV4Factory(ctx context.Context, in *NewMercuryV4FactoryRequest, opts ...grpc.CallOption) (*NewMercuryV4FactoryReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewMercuryV4FactoryReply)
	err := c.cc.Invoke(ctx, MercuryAdapter_NewMercuryV4Factory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MercuryAdapterServer is the server API for MercuryAdapter service.
// All implementations must embed UnimplementedMercuryAdapterServer
// for forward compatibility.
type MercuryAdapterServer interface {
	NewMercuryV1Factory(context.Context, *NewMercuryV1FactoryRequest) (*NewMercuryV1FactoryReply, error)
	NewMercuryV2Factory(context.Context, *NewMercuryV2FactoryRequest) (*NewMercuryV2FactoryReply, error)
	NewMercuryV3Factory(context.Context, *NewMercuryV3FactoryRequest) (*NewMercuryV3FactoryReply, error)
	NewMercuryV4Factory(context.Context, *NewMercuryV4FactoryRequest) (*NewMercuryV4FactoryReply, error)
	mustEmbedUnimplementedMercuryAdapterServer()
}

// UnimplementedMercuryAdapterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMercuryAdapterServer struct{}

func (UnimplementedMercuryAdapterServer) NewMercuryV1Factory(context.Context, *NewMercuryV1FactoryRequest) (*NewMercuryV1FactoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewMercuryV1Factory not implemented")
}
func (UnimplementedMercuryAdapterServer) NewMercuryV2Factory(context.Context, *NewMercuryV2FactoryRequest) (*NewMercuryV2FactoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewMercuryV2Factory not implemented")
}
func (UnimplementedMercuryAdapterServer) NewMercuryV3Factory(context.Context, *NewMercuryV3FactoryRequest) (*NewMercuryV3FactoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewMercuryV3Factory not implemented")
}
func (UnimplementedMercuryAdapterServer) NewMercuryV4Factory(context.Context, *NewMercuryV4FactoryRequest) (*NewMercuryV4FactoryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewMercuryV4Factory not implemented")
}
func (UnimplementedMercuryAdapterServer) mustEmbedUnimplementedMercuryAdapterServer() {}
func (UnimplementedMercuryAdapterServer) testEmbeddedByValue()                        {}

// UnsafeMercuryAdapterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MercuryAdapterServer will
// result in compilation errors.
type UnsafeMercuryAdapterServer interface {
	mustEmbedUnimplementedMercuryAdapterServer()
}

func RegisterMercuryAdapterServer(s grpc.ServiceRegistrar, srv MercuryAdapterServer) {
	// If the following call pancis, it indicates UnimplementedMercuryAdapterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MercuryAdapter_ServiceDesc, srv)
}

func _MercuryAdapter_NewMercuryV1Factory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMercuryV1FactoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MercuryAdapterServer).NewMercuryV1Factory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MercuryAdapter_NewMercuryV1Factory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MercuryAdapterServer).NewMercuryV1Factory(ctx, req.(*NewMercuryV1FactoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MercuryAdapter_NewMercuryV2Factory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMercuryV2FactoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MercuryAdapterServer).NewMercuryV2Factory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MercuryAdapter_NewMercuryV2Factory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MercuryAdapterServer).NewMercuryV2Factory(ctx, req.(*NewMercuryV2FactoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MercuryAdapter_NewMercuryV3Factory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMercuryV3FactoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MercuryAdapterServer).NewMercuryV3Factory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MercuryAdapter_NewMercuryV3Factory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MercuryAdapterServer).NewMercuryV3Factory(ctx, req.(*NewMercuryV3FactoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MercuryAdapter_NewMercuryV4Factory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMercuryV4FactoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MercuryAdapterServer).NewMercuryV4Factory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MercuryAdapter_NewMercuryV4Factory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MercuryAdapterServer).NewMercuryV4Factory(ctx, req.(*NewMercuryV4FactoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MercuryAdapter_ServiceDesc is the grpc.ServiceDesc for MercuryAdapter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MercuryAdapter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.internal.pb.mercury.MercuryAdapter",
	HandlerType: (*MercuryAdapterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewMercuryV1Factory",
			Handler:    _MercuryAdapter_NewMercuryV1Factory_Handler,
		},
		{
			MethodName: "NewMercuryV2Factory",
			Handler:    _MercuryAdapter_NewMercuryV2Factory_Handler,
		},
		{
			MethodName: "NewMercuryV3Factory",
			Handler:    _MercuryAdapter_NewMercuryV3Factory_Handler,
		},
		{
			MethodName: "NewMercuryV4Factory",
			Handler:    _MercuryAdapter_NewMercuryV4Factory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mercury_loop.proto",
}

const (
	OnchainConfigCodec_Encode_FullMethodName = "/loop.internal.pb.mercury.OnchainConfigCodec/Encode"
	OnchainConfigCodec_Decode_FullMethodName = "/loop.internal.pb.mercury.OnchainConfigCodec/Decode"
)

// OnchainConfigCodecClient is the client API for OnchainConfigCodec service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// OnchainConfigCodec is a gRPC adapter for the OnchainConfigCodec interface [pkg/types/mercury/v3/OnchainConfigCodec].
type OnchainConfigCodecClient interface {
	Encode(ctx context.Context, in *EncodeOnchainConfigRequest, opts ...grpc.CallOption) (*EncodeOnchainConfigReply, error)
	Decode(ctx context.Context, in *DecodeOnchainConfigRequest, opts ...grpc.CallOption) (*DecodeOnchainConfigReply, error)
}

type onchainConfigCodecClient struct {
	cc grpc.ClientConnInterface
}

func NewOnchainConfigCodecClient(cc grpc.ClientConnInterface) OnchainConfigCodecClient {
	return &onchainConfigCodecClient{cc}
}

func (c *onchainConfigCodecClient) Encode(ctx context.Context, in *EncodeOnchainConfigRequest, opts ...grpc.CallOption) (*EncodeOnchainConfigReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EncodeOnchainConfigReply)
	err := c.cc.Invoke(ctx, OnchainConfigCodec_Encode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *onchainConfigCodecClient) Decode(ctx context.Context, in *DecodeOnchainConfigRequest, opts ...grpc.CallOption) (*DecodeOnchainConfigReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DecodeOnchainConfigReply)
	err := c.cc.Invoke(ctx, OnchainConfigCodec_Decode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OnchainConfigCodecServer is the server API for OnchainConfigCodec service.
// All implementations must embed UnimplementedOnchainConfigCodecServer
// for forward compatibility.
//
// OnchainConfigCodec is a gRPC adapter for the OnchainConfigCodec interface [pkg/types/mercury/v3/OnchainConfigCodec].
type OnchainConfigCodecServer interface {
	Encode(context.Context, *EncodeOnchainConfigRequest) (*EncodeOnchainConfigReply, error)
	Decode(context.Context, *DecodeOnchainConfigRequest) (*DecodeOnchainConfigReply, error)
	mustEmbedUnimplementedOnchainConfigCodecServer()
}

// UnimplementedOnchainConfigCodecServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOnchainConfigCodecServer struct{}

func (UnimplementedOnchainConfigCodecServer) Encode(context.Context, *EncodeOnchainConfigRequest) (*EncodeOnchainConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Encode not implemented")
}
func (UnimplementedOnchainConfigCodecServer) Decode(context.Context, *DecodeOnchainConfigRequest) (*DecodeOnchainConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Decode not implemented")
}
func (UnimplementedOnchainConfigCodecServer) mustEmbedUnimplementedOnchainConfigCodecServer() {}
func (UnimplementedOnchainConfigCodecServer) testEmbeddedByValue()                            {}

// UnsafeOnchainConfigCodecServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OnchainConfigCodecServer will
// result in compilation errors.
type UnsafeOnchainConfigCodecServer interface {
	mustEmbedUnimplementedOnchainConfigCodecServer()
}

func RegisterOnchainConfigCodecServer(s grpc.ServiceRegistrar, srv OnchainConfigCodecServer) {
	// If the following call pancis, it indicates UnimplementedOnchainConfigCodecServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OnchainConfigCodec_ServiceDesc, srv)
}

func _OnchainConfigCodec_Encode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncodeOnchainConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnchainConfigCodecServer).Encode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnchainConfigCodec_Encode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnchainConfigCodecServer).Encode(ctx, req.(*EncodeOnchainConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OnchainConfigCodec_Decode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DecodeOnchainConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OnchainConfigCodecServer).Decode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OnchainConfigCodec_Decode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OnchainConfigCodecServer).Decode(ctx, req.(*DecodeOnchainConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OnchainConfigCodec_ServiceDesc is the grpc.ServiceDesc for OnchainConfigCodec service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OnchainConfigCodec_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.internal.pb.mercury.OnchainConfigCodec",
	HandlerType: (*OnchainConfigCodecServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Encode",
			Handler:    _OnchainConfigCodec_Encode_Handler,
		},
		{
			MethodName: "Decode",
			Handler:    _OnchainConfigCodec_Decode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mercury_loop.proto",
}

const (
	ReportCodecV4_BuildReport_FullMethodName                    = "/loop.internal.pb.mercury.ReportCodecV4/BuildReport"
	ReportCodecV4_MaxReportLength_FullMethodName                = "/loop.internal.pb.mercury.ReportCodecV4/MaxReportLength"
	ReportCodecV4_ObservationTimestampFromReport_FullMethodName = "/loop.internal.pb.mercury.ReportCodecV4/ObservationTimestampFromReport"
)

// ReportCodecV4Client is the client API for ReportCodecV4 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ReportCodec is a gRPC adapter for the ReportCodec interface [pkg/types/mercury/v4/ReportCodec].
type ReportCodecV4Client interface {
	BuildReport(ctx context.Context, in *v4.BuildReportRequest, opts ...grpc.CallOption) (*v4.BuildReportReply, error)
	MaxReportLength(ctx context.Context, in *v4.MaxReportLengthRequest, opts ...grpc.CallOption) (*v4.MaxReportLengthReply, error)
	ObservationTimestampFromReport(ctx context.Context, in *v4.ObservationTimestampFromReportRequest, opts ...grpc.CallOption) (*v4.ObservationTimestampFromReportReply, error)
}

type reportCodecV4Client struct {
	cc grpc.ClientConnInterface
}

func NewReportCodecV4Client(cc grpc.ClientConnInterface) ReportCodecV4Client {
	return &reportCodecV4Client{cc}
}

func (c *reportCodecV4Client) BuildReport(ctx context.Context, in *v4.BuildReportRequest, opts ...grpc.CallOption) (*v4.BuildReportReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v4.BuildReportReply)
	err := c.cc.Invoke(ctx, ReportCodecV4_BuildReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportCodecV4Client) MaxReportLength(ctx context.Context, in *v4.MaxReportLengthRequest, opts ...grpc.CallOption) (*v4.MaxReportLengthReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v4.MaxReportLengthReply)
	err := c.cc.Invoke(ctx, ReportCodecV4_MaxReportLength_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportCodecV4Client) ObservationTimestampFromReport(ctx context.Context, in *v4.ObservationTimestampFromReportRequest, opts ...grpc.CallOption) (*v4.ObservationTimestampFromReportReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v4.ObservationTimestampFromReportReply)
	err := c.cc.Invoke(ctx, ReportCodecV4_ObservationTimestampFromReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportCodecV4Server is the server API for ReportCodecV4 service.
// All implementations must embed UnimplementedReportCodecV4Server
// for forward compatibility.
//
// ReportCodec is a gRPC adapter for the ReportCodec interface [pkg/types/mercury/v4/ReportCodec].
type ReportCodecV4Server interface {
	BuildReport(context.Context, *v4.BuildReportRequest) (*v4.BuildReportReply, error)
	MaxReportLength(context.Context, *v4.MaxReportLengthRequest) (*v4.MaxReportLengthReply, error)
	ObservationTimestampFromReport(context.Context, *v4.ObservationTimestampFromReportRequest) (*v4.ObservationTimestampFromReportReply, error)
	mustEmbedUnimplementedReportCodecV4Server()
}

// UnimplementedReportCodecV4Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReportCodecV4Server struct{}

func (UnimplementedReportCodecV4Server) BuildReport(context.Context, *v4.BuildReportRequest) (*v4.BuildReportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildReport not implemented")
}
func (UnimplementedReportCodecV4Server) MaxReportLength(context.Context, *v4.MaxReportLengthRequest) (*v4.MaxReportLengthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaxReportLength not implemented")
}
func (UnimplementedReportCodecV4Server) ObservationTimestampFromReport(context.Context, *v4.ObservationTimestampFromReportRequest) (*v4.ObservationTimestampFromReportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObservationTimestampFromReport not implemented")
}
func (UnimplementedReportCodecV4Server) mustEmbedUnimplementedReportCodecV4Server() {}
func (UnimplementedReportCodecV4Server) testEmbeddedByValue()                       {}

// UnsafeReportCodecV4Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReportCodecV4Server will
// result in compilation errors.
type UnsafeReportCodecV4Server interface {
	mustEmbedUnimplementedReportCodecV4Server()
}

func RegisterReportCodecV4Server(s grpc.ServiceRegistrar, srv ReportCodecV4Server) {
	// If the following call pancis, it indicates UnimplementedReportCodecV4Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReportCodecV4_ServiceDesc, srv)
}

func _ReportCodecV4_BuildReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v4.BuildReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportCodecV4Server).BuildReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportCodecV4_BuildReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportCodecV4Server).BuildReport(ctx, req.(*v4.BuildReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportCodecV4_MaxReportLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v4.MaxReportLengthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportCodecV4Server).MaxReportLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportCodecV4_MaxReportLength_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportCodecV4Server).MaxReportLength(ctx, req.(*v4.MaxReportLengthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportCodecV4_ObservationTimestampFromReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v4.ObservationTimestampFromReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportCodecV4Server).ObservationTimestampFromReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportCodecV4_ObservationTimestampFromReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportCodecV4Server).ObservationTimestampFromReport(ctx, req.(*v4.ObservationTimestampFromReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReportCodecV4_ServiceDesc is the grpc.ServiceDesc for ReportCodecV4 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReportCodecV4_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.internal.pb.mercury.ReportCodecV4",
	HandlerType: (*ReportCodecV4Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuildReport",
			Handler:    _ReportCodecV4_BuildReport_Handler,
		},
		{
			MethodName: "MaxReportLength",
			Handler:    _ReportCodecV4_MaxReportLength_Handler,
		},
		{
			MethodName: "ObservationTimestampFromReport",
			Handler:    _ReportCodecV4_ObservationTimestampFromReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mercury_loop.proto",
}

const (
	ReportCodecV3_BuildReport_FullMethodName                    = "/loop.internal.pb.mercury.ReportCodecV3/BuildReport"
	ReportCodecV3_MaxReportLength_FullMethodName                = "/loop.internal.pb.mercury.ReportCodecV3/MaxReportLength"
	ReportCodecV3_ObservationTimestampFromReport_FullMethodName = "/loop.internal.pb.mercury.ReportCodecV3/ObservationTimestampFromReport"
)

// ReportCodecV3Client is the client API for ReportCodecV3 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ReportCodec is a gRPC adapter for the ReportCodec interface [pkg/types/mercury/v3/ReportCodec].
type ReportCodecV3Client interface {
	BuildReport(ctx context.Context, in *v3.BuildReportRequest, opts ...grpc.CallOption) (*v3.BuildReportReply, error)
	MaxReportLength(ctx context.Context, in *v3.MaxReportLengthRequest, opts ...grpc.CallOption) (*v3.MaxReportLengthReply, error)
	ObservationTimestampFromReport(ctx context.Context, in *v3.ObservationTimestampFromReportRequest, opts ...grpc.CallOption) (*v3.ObservationTimestampFromReportReply, error)
}

type reportCodecV3Client struct {
	cc grpc.ClientConnInterface
}

func NewReportCodecV3Client(cc grpc.ClientConnInterface) ReportCodecV3Client {
	return &reportCodecV3Client{cc}
}

func (c *reportCodecV3Client) BuildReport(ctx context.Context, in *v3.BuildReportRequest, opts ...grpc.CallOption) (*v3.BuildReportReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v3.BuildReportReply)
	err := c.cc.Invoke(ctx, ReportCodecV3_BuildReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportCodecV3Client) MaxReportLength(ctx context.Context, in *v3.MaxReportLengthRequest, opts ...grpc.CallOption) (*v3.MaxReportLengthReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v3.MaxReportLengthReply)
	err := c.cc.Invoke(ctx, ReportCodecV3_MaxReportLength_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportCodecV3Client) ObservationTimestampFromReport(ctx context.Context, in *v3.ObservationTimestampFromReportRequest, opts ...grpc.CallOption) (*v3.ObservationTimestampFromReportReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v3.ObservationTimestampFromReportReply)
	err := c.cc.Invoke(ctx, ReportCodecV3_ObservationTimestampFromReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportCodecV3Server is the server API for ReportCodecV3 service.
// All implementations must embed UnimplementedReportCodecV3Server
// for forward compatibility.
//
// ReportCodec is a gRPC adapter for the ReportCodec interface [pkg/types/mercury/v3/ReportCodec].
type ReportCodecV3Server interface {
	BuildReport(context.Context, *v3.BuildReportRequest) (*v3.BuildReportReply, error)
	MaxReportLength(context.Context, *v3.MaxReportLengthRequest) (*v3.MaxReportLengthReply, error)
	ObservationTimestampFromReport(context.Context, *v3.ObservationTimestampFromReportRequest) (*v3.ObservationTimestampFromReportReply, error)
	mustEmbedUnimplementedReportCodecV3Server()
}

// UnimplementedReportCodecV3Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReportCodecV3Server struct{}

func (UnimplementedReportCodecV3Server) BuildReport(context.Context, *v3.BuildReportRequest) (*v3.BuildReportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildReport not implemented")
}
func (UnimplementedReportCodecV3Server) MaxReportLength(context.Context, *v3.MaxReportLengthRequest) (*v3.MaxReportLengthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaxReportLength not implemented")
}
func (UnimplementedReportCodecV3Server) ObservationTimestampFromReport(context.Context, *v3.ObservationTimestampFromReportRequest) (*v3.ObservationTimestampFromReportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObservationTimestampFromReport not implemented")
}
func (UnimplementedReportCodecV3Server) mustEmbedUnimplementedReportCodecV3Server() {}
func (UnimplementedReportCodecV3Server) testEmbeddedByValue()                       {}

// UnsafeReportCodecV3Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReportCodecV3Server will
// result in compilation errors.
type UnsafeReportCodecV3Server interface {
	mustEmbedUnimplementedReportCodecV3Server()
}

func RegisterReportCodecV3Server(s grpc.ServiceRegistrar, srv ReportCodecV3Server) {
	// If the following call pancis, it indicates UnimplementedReportCodecV3Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReportCodecV3_ServiceDesc, srv)
}

func _ReportCodecV3_BuildReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v3.BuildReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportCodecV3Server).BuildReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportCodecV3_BuildReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportCodecV3Server).BuildReport(ctx, req.(*v3.BuildReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportCodecV3_MaxReportLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v3.MaxReportLengthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportCodecV3Server).MaxReportLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportCodecV3_MaxReportLength_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportCodecV3Server).MaxReportLength(ctx, req.(*v3.MaxReportLengthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportCodecV3_ObservationTimestampFromReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v3.ObservationTimestampFromReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportCodecV3Server).ObservationTimestampFromReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportCodecV3_ObservationTimestampFromReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportCodecV3Server).ObservationTimestampFromReport(ctx, req.(*v3.ObservationTimestampFromReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReportCodecV3_ServiceDesc is the grpc.ServiceDesc for ReportCodecV3 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReportCodecV3_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.internal.pb.mercury.ReportCodecV3",
	HandlerType: (*ReportCodecV3Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuildReport",
			Handler:    _ReportCodecV3_BuildReport_Handler,
		},
		{
			MethodName: "MaxReportLength",
			Handler:    _ReportCodecV3_MaxReportLength_Handler,
		},
		{
			MethodName: "ObservationTimestampFromReport",
			Handler:    _ReportCodecV3_ObservationTimestampFromReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mercury_loop.proto",
}

const (
	ReportCodecV1_BuildReport_FullMethodName               = "/loop.internal.pb.mercury.ReportCodecV1/BuildReport"
	ReportCodecV1_MaxReportLength_FullMethodName           = "/loop.internal.pb.mercury.ReportCodecV1/MaxReportLength"
	ReportCodecV1_CurrentBlockNumFromReport_FullMethodName = "/loop.internal.pb.mercury.ReportCodecV1/CurrentBlockNumFromReport"
)

// ReportCodecV1Client is the client API for ReportCodecV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ReportCodecV1 is a gRPC adapter for the ReportCodec interface [pkg/types/mercury/v1/ReportCodec].
type ReportCodecV1Client interface {
	BuildReport(ctx context.Context, in *v1.BuildReportRequest, opts ...grpc.CallOption) (*v1.BuildReportReply, error)
	MaxReportLength(ctx context.Context, in *v1.MaxReportLengthRequest, opts ...grpc.CallOption) (*v1.MaxReportLengthReply, error)
	CurrentBlockNumFromReport(ctx context.Context, in *v1.CurrentBlockNumFromReportRequest, opts ...grpc.CallOption) (*v1.CurrentBlockNumFromReportResponse, error)
}

type reportCodecV1Client struct {
	cc grpc.ClientConnInterface
}

func NewReportCodecV1Client(cc grpc.ClientConnInterface) ReportCodecV1Client {
	return &reportCodecV1Client{cc}
}

func (c *reportCodecV1Client) BuildReport(ctx context.Context, in *v1.BuildReportRequest, opts ...grpc.CallOption) (*v1.BuildReportReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.BuildReportReply)
	err := c.cc.Invoke(ctx, ReportCodecV1_BuildReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportCodecV1Client) MaxReportLength(ctx context.Context, in *v1.MaxReportLengthRequest, opts ...grpc.CallOption) (*v1.MaxReportLengthReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.MaxReportLengthReply)
	err := c.cc.Invoke(ctx, ReportCodecV1_MaxReportLength_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportCodecV1Client) CurrentBlockNumFromReport(ctx context.Context, in *v1.CurrentBlockNumFromReportRequest, opts ...grpc.CallOption) (*v1.CurrentBlockNumFromReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v1.CurrentBlockNumFromReportResponse)
	err := c.cc.Invoke(ctx, ReportCodecV1_CurrentBlockNumFromReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportCodecV1Server is the server API for ReportCodecV1 service.
// All implementations must embed UnimplementedReportCodecV1Server
// for forward compatibility.
//
// ReportCodecV1 is a gRPC adapter for the ReportCodec interface [pkg/types/mercury/v1/ReportCodec].
type ReportCodecV1Server interface {
	BuildReport(context.Context, *v1.BuildReportRequest) (*v1.BuildReportReply, error)
	MaxReportLength(context.Context, *v1.MaxReportLengthRequest) (*v1.MaxReportLengthReply, error)
	CurrentBlockNumFromReport(context.Context, *v1.CurrentBlockNumFromReportRequest) (*v1.CurrentBlockNumFromReportResponse, error)
	mustEmbedUnimplementedReportCodecV1Server()
}

// UnimplementedReportCodecV1Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReportCodecV1Server struct{}

func (UnimplementedReportCodecV1Server) BuildReport(context.Context, *v1.BuildReportRequest) (*v1.BuildReportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildReport not implemented")
}
func (UnimplementedReportCodecV1Server) MaxReportLength(context.Context, *v1.MaxReportLengthRequest) (*v1.MaxReportLengthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaxReportLength not implemented")
}
func (UnimplementedReportCodecV1Server) CurrentBlockNumFromReport(context.Context, *v1.CurrentBlockNumFromReportRequest) (*v1.CurrentBlockNumFromReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentBlockNumFromReport not implemented")
}
func (UnimplementedReportCodecV1Server) mustEmbedUnimplementedReportCodecV1Server() {}
func (UnimplementedReportCodecV1Server) testEmbeddedByValue()                       {}

// UnsafeReportCodecV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReportCodecV1Server will
// result in compilation errors.
type UnsafeReportCodecV1Server interface {
	mustEmbedUnimplementedReportCodecV1Server()
}

func RegisterReportCodecV1Server(s grpc.ServiceRegistrar, srv ReportCodecV1Server) {
	// If the following call pancis, it indicates UnimplementedReportCodecV1Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReportCodecV1_ServiceDesc, srv)
}

func _ReportCodecV1_BuildReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.BuildReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportCodecV1Server).BuildReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportCodecV1_BuildReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportCodecV1Server).BuildReport(ctx, req.(*v1.BuildReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportCodecV1_MaxReportLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.MaxReportLengthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportCodecV1Server).MaxReportLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportCodecV1_MaxReportLength_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportCodecV1Server).MaxReportLength(ctx, req.(*v1.MaxReportLengthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportCodecV1_CurrentBlockNumFromReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.CurrentBlockNumFromReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportCodecV1Server).CurrentBlockNumFromReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportCodecV1_CurrentBlockNumFromReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportCodecV1Server).CurrentBlockNumFromReport(ctx, req.(*v1.CurrentBlockNumFromReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReportCodecV1_ServiceDesc is the grpc.ServiceDesc for ReportCodecV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReportCodecV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.internal.pb.mercury.ReportCodecV1",
	HandlerType: (*ReportCodecV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuildReport",
			Handler:    _ReportCodecV1_BuildReport_Handler,
		},
		{
			MethodName: "MaxReportLength",
			Handler:    _ReportCodecV1_MaxReportLength_Handler,
		},
		{
			MethodName: "CurrentBlockNumFromReport",
			Handler:    _ReportCodecV1_CurrentBlockNumFromReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mercury_loop.proto",
}

const (
	ReportCodecV2_BuildReport_FullMethodName                    = "/loop.internal.pb.mercury.ReportCodecV2/BuildReport"
	ReportCodecV2_MaxReportLength_FullMethodName                = "/loop.internal.pb.mercury.ReportCodecV2/MaxReportLength"
	ReportCodecV2_ObservationTimestampFromReport_FullMethodName = "/loop.internal.pb.mercury.ReportCodecV2/ObservationTimestampFromReport"
)

// ReportCodecV2Client is the client API for ReportCodecV2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ReportCodecV2 is gRPC adapter for the ReportCodec interface [pkg/types/mercury/v2/ReportCodec].
type ReportCodecV2Client interface {
	BuildReport(ctx context.Context, in *v2.BuildReportRequest, opts ...grpc.CallOption) (*v2.BuildReportReply, error)
	MaxReportLength(ctx context.Context, in *v2.MaxReportLengthRequest, opts ...grpc.CallOption) (*v2.MaxReportLengthReply, error)
	ObservationTimestampFromReport(ctx context.Context, in *v2.ObservationTimestampFromReportRequest, opts ...grpc.CallOption) (*v2.ObservationTimestampFromReportReply, error)
}

type reportCodecV2Client struct {
	cc grpc.ClientConnInterface
}

func NewReportCodecV2Client(cc grpc.ClientConnInterface) ReportCodecV2Client {
	return &reportCodecV2Client{cc}
}

func (c *reportCodecV2Client) BuildReport(ctx context.Context, in *v2.BuildReportRequest, opts ...grpc.CallOption) (*v2.BuildReportReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v2.BuildReportReply)
	err := c.cc.Invoke(ctx, ReportCodecV2_BuildReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportCodecV2Client) MaxReportLength(ctx context.Context, in *v2.MaxReportLengthRequest, opts ...grpc.CallOption) (*v2.MaxReportLengthReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v2.MaxReportLengthReply)
	err := c.cc.Invoke(ctx, ReportCodecV2_MaxReportLength_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportCodecV2Client) ObservationTimestampFromReport(ctx context.Context, in *v2.ObservationTimestampFromReportRequest, opts ...grpc.CallOption) (*v2.ObservationTimestampFromReportReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(v2.ObservationTimestampFromReportReply)
	err := c.cc.Invoke(ctx, ReportCodecV2_ObservationTimestampFromReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportCodecV2Server is the server API for ReportCodecV2 service.
// All implementations must embed UnimplementedReportCodecV2Server
// for forward compatibility.
//
// ReportCodecV2 is gRPC adapter for the ReportCodec interface [pkg/types/mercury/v2/ReportCodec].
type ReportCodecV2Server interface {
	BuildReport(context.Context, *v2.BuildReportRequest) (*v2.BuildReportReply, error)
	MaxReportLength(context.Context, *v2.MaxReportLengthRequest) (*v2.MaxReportLengthReply, error)
	ObservationTimestampFromReport(context.Context, *v2.ObservationTimestampFromReportRequest) (*v2.ObservationTimestampFromReportReply, error)
	mustEmbedUnimplementedReportCodecV2Server()
}

// UnimplementedReportCodecV2Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReportCodecV2Server struct{}

func (UnimplementedReportCodecV2Server) BuildReport(context.Context, *v2.BuildReportRequest) (*v2.BuildReportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildReport not implemented")
}
func (UnimplementedReportCodecV2Server) MaxReportLength(context.Context, *v2.MaxReportLengthRequest) (*v2.MaxReportLengthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaxReportLength not implemented")
}
func (UnimplementedReportCodecV2Server) ObservationTimestampFromReport(context.Context, *v2.ObservationTimestampFromReportRequest) (*v2.ObservationTimestampFromReportReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObservationTimestampFromReport not implemented")
}
func (UnimplementedReportCodecV2Server) mustEmbedUnimplementedReportCodecV2Server() {}
func (UnimplementedReportCodecV2Server) testEmbeddedByValue()                       {}

// UnsafeReportCodecV2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReportCodecV2Server will
// result in compilation errors.
type UnsafeReportCodecV2Server interface {
	mustEmbedUnimplementedReportCodecV2Server()
}

func RegisterReportCodecV2Server(s grpc.ServiceRegistrar, srv ReportCodecV2Server) {
	// If the following call pancis, it indicates UnimplementedReportCodecV2Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReportCodecV2_ServiceDesc, srv)
}

func _ReportCodecV2_BuildReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v2.BuildReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportCodecV2Server).BuildReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportCodecV2_BuildReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportCodecV2Server).BuildReport(ctx, req.(*v2.BuildReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportCodecV2_MaxReportLength_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v2.MaxReportLengthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportCodecV2Server).MaxReportLength(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportCodecV2_MaxReportLength_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportCodecV2Server).MaxReportLength(ctx, req.(*v2.MaxReportLengthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportCodecV2_ObservationTimestampFromReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v2.ObservationTimestampFromReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportCodecV2Server).ObservationTimestampFromReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReportCodecV2_ObservationTimestampFromReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportCodecV2Server).ObservationTimestampFromReport(ctx, req.(*v2.ObservationTimestampFromReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReportCodecV2_ServiceDesc is the grpc.ServiceDesc for ReportCodecV2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReportCodecV2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.internal.pb.mercury.ReportCodecV2",
	HandlerType: (*ReportCodecV2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BuildReport",
			Handler:    _ReportCodecV2_BuildReport_Handler,
		},
		{
			MethodName: "MaxReportLength",
			Handler:    _ReportCodecV2_MaxReportLength_Handler,
		},
		{
			MethodName: "ObservationTimestampFromReport",
			Handler:    _ReportCodecV2_ObservationTimestampFromReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mercury_loop.proto",
}

const (
	ServerFetcher_FetchInitialMaxFinalizedBlockNumber_FullMethodName = "/loop.internal.pb.mercury.ServerFetcher/FetchInitialMaxFinalizedBlockNumber"
	ServerFetcher_LatestPrice_FullMethodName                         = "/loop.internal.pb.mercury.ServerFetcher/LatestPrice"
	ServerFetcher_LatestTimestamp_FullMethodName                     = "/loop.internal.pb.mercury.ServerFetcher/LatestTimestamp"
)

// ServerFetcherClient is the client API for ServerFetcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ServerFetcher is a gRPC adapter for the ServerFetcher interface [pkg/types/mercury/v3/ServerFetcher].
type ServerFetcherClient interface {
	FetchInitialMaxFinalizedBlockNumber(ctx context.Context, in *FetchInitialMaxFinalizedBlockNumberRequest, opts ...grpc.CallOption) (*FetchInitialMaxFinalizedBlockNumberReply, error)
	LatestPrice(ctx context.Context, in *LatestPriceRequest, opts ...grpc.CallOption) (*LatestPriceReply, error)
	LatestTimestamp(ctx context.Context, in *LatestTimestampRequest, opts ...grpc.CallOption) (*LatestTimestampReply, error)
}

type serverFetcherClient struct {
	cc grpc.ClientConnInterface
}

func NewServerFetcherClient(cc grpc.ClientConnInterface) ServerFetcherClient {
	return &serverFetcherClient{cc}
}

func (c *serverFetcherClient) FetchInitialMaxFinalizedBlockNumber(ctx context.Context, in *FetchInitialMaxFinalizedBlockNumberRequest, opts ...grpc.CallOption) (*FetchInitialMaxFinalizedBlockNumberReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchInitialMaxFinalizedBlockNumberReply)
	err := c.cc.Invoke(ctx, ServerFetcher_FetchInitialMaxFinalizedBlockNumber_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverFetcherClient) LatestPrice(ctx context.Context, in *LatestPriceRequest, opts ...grpc.CallOption) (*LatestPriceReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LatestPriceReply)
	err := c.cc.Invoke(ctx, ServerFetcher_LatestPrice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverFetcherClient) LatestTimestamp(ctx context.Context, in *LatestTimestampRequest, opts ...grpc.CallOption) (*LatestTimestampReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LatestTimestampReply)
	err := c.cc.Invoke(ctx, ServerFetcher_LatestTimestamp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServerFetcherServer is the server API for ServerFetcher service.
// All implementations must embed UnimplementedServerFetcherServer
// for forward compatibility.
//
// ServerFetcher is a gRPC adapter for the ServerFetcher interface [pkg/types/mercury/v3/ServerFetcher].
type ServerFetcherServer interface {
	FetchInitialMaxFinalizedBlockNumber(context.Context, *FetchInitialMaxFinalizedBlockNumberRequest) (*FetchInitialMaxFinalizedBlockNumberReply, error)
	LatestPrice(context.Context, *LatestPriceRequest) (*LatestPriceReply, error)
	LatestTimestamp(context.Context, *LatestTimestampRequest) (*LatestTimestampReply, error)
	mustEmbedUnimplementedServerFetcherServer()
}

// UnimplementedServerFetcherServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServerFetcherServer struct{}

func (UnimplementedServerFetcherServer) FetchInitialMaxFinalizedBlockNumber(context.Context, *FetchInitialMaxFinalizedBlockNumberRequest) (*FetchInitialMaxFinalizedBlockNumberReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchInitialMaxFinalizedBlockNumber not implemented")
}
func (UnimplementedServerFetcherServer) LatestPrice(context.Context, *LatestPriceRequest) (*LatestPriceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestPrice not implemented")
}
func (UnimplementedServerFetcherServer) LatestTimestamp(context.Context, *LatestTimestampRequest) (*LatestTimestampReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestTimestamp not implemented")
}
func (UnimplementedServerFetcherServer) mustEmbedUnimplementedServerFetcherServer() {}
func (UnimplementedServerFetcherServer) testEmbeddedByValue()                       {}

// UnsafeServerFetcherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerFetcherServer will
// result in compilation errors.
type UnsafeServerFetcherServer interface {
	mustEmbedUnimplementedServerFetcherServer()
}

func RegisterServerFetcherServer(s grpc.ServiceRegistrar, srv ServerFetcherServer) {
	// If the following call pancis, it indicates UnimplementedServerFetcherServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServerFetcher_ServiceDesc, srv)
}

func _ServerFetcher_FetchInitialMaxFinalizedBlockNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchInitialMaxFinalizedBlockNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerFetcherServer).FetchInitialMaxFinalizedBlockNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerFetcher_FetchInitialMaxFinalizedBlockNumber_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerFetcherServer).FetchInitialMaxFinalizedBlockNumber(ctx, req.(*FetchInitialMaxFinalizedBlockNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerFetcher_LatestPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LatestPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerFetcherServer).LatestPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerFetcher_LatestPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerFetcherServer).LatestPrice(ctx, req.(*LatestPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerFetcher_LatestTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LatestTimestampRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerFetcherServer).LatestTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServerFetcher_LatestTimestamp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerFetcherServer).LatestTimestamp(ctx, req.(*LatestTimestampRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServerFetcher_ServiceDesc is the grpc.ServiceDesc for ServerFetcher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerFetcher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.internal.pb.mercury.ServerFetcher",
	HandlerType: (*ServerFetcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchInitialMaxFinalizedBlockNumber",
			Handler:    _ServerFetcher_FetchInitialMaxFinalizedBlockNumber_Handler,
		},
		{
			MethodName: "LatestPrice",
			Handler:    _ServerFetcher_LatestPrice_Handler,
		},
		{
			MethodName: "LatestTimestamp",
			Handler:    _ServerFetcher_LatestTimestamp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mercury_loop.proto",
}

const (
	MercuryChainReader_LatestHeads_FullMethodName = "/loop.internal.pb.mercury.MercuryChainReader/LatestHeads"
)

// MercuryChainReaderClient is the client API for MercuryChainReader service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// MercuryChainReader is a gRPC adapter for the MercuryChainReader interface [pkg/types/mercury/MercuryChainReader].
type MercuryChainReaderClient interface {
	LatestHeads(ctx context.Context, in *LatestHeadsRequest, opts ...grpc.CallOption) (*LatestHeadsReply, error)
}

type mercuryChainReaderClient struct {
	cc grpc.ClientConnInterface
}

func NewMercuryChainReaderClient(cc grpc.ClientConnInterface) MercuryChainReaderClient {
	return &mercuryChainReaderClient{cc}
}

func (c *mercuryChainReaderClient) LatestHeads(ctx context.Context, in *LatestHeadsRequest, opts ...grpc.CallOption) (*LatestHeadsReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LatestHeadsReply)
	err := c.cc.Invoke(ctx, MercuryChainReader_LatestHeads_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MercuryChainReaderServer is the server API for MercuryChainReader service.
// All implementations must embed UnimplementedMercuryChainReaderServer
// for forward compatibility.
//
// MercuryChainReader is a gRPC adapter for the MercuryChainReader interface [pkg/types/mercury/MercuryChainReader].
type MercuryChainReaderServer interface {
	LatestHeads(context.Context, *LatestHeadsRequest) (*LatestHeadsReply, error)
	mustEmbedUnimplementedMercuryChainReaderServer()
}

// UnimplementedMercuryChainReaderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMercuryChainReaderServer struct{}

func (UnimplementedMercuryChainReaderServer) LatestHeads(context.Context, *LatestHeadsRequest) (*LatestHeadsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestHeads not implemented")
}
func (UnimplementedMercuryChainReaderServer) mustEmbedUnimplementedMercuryChainReaderServer() {}
func (UnimplementedMercuryChainReaderServer) testEmbeddedByValue()                            {}

// UnsafeMercuryChainReaderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MercuryChainReaderServer will
// result in compilation errors.
type UnsafeMercuryChainReaderServer interface {
	mustEmbedUnimplementedMercuryChainReaderServer()
}

func RegisterMercuryChainReaderServer(s grpc.ServiceRegistrar, srv MercuryChainReaderServer) {
	// If the following call pancis, it indicates UnimplementedMercuryChainReaderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MercuryChainReader_ServiceDesc, srv)
}

func _MercuryChainReader_LatestHeads_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LatestHeadsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MercuryChainReaderServer).LatestHeads(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MercuryChainReader_LatestHeads_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MercuryChainReaderServer).LatestHeads(ctx, req.(*LatestHeadsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MercuryChainReader_ServiceDesc is the grpc.ServiceDesc for MercuryChainReader service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MercuryChainReader_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "loop.internal.pb.mercury.MercuryChainReader",
	HandlerType: (*MercuryChainReaderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LatestHeads",
			Handler:    _MercuryChainReader_LatestHeads_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mercury_loop.proto",
}
